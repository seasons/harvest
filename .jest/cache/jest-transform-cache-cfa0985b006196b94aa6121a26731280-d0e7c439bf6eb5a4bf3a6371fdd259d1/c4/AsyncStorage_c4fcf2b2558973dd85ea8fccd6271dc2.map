{"version":3,"sources":["AsyncStorage.js"],"names":["require","NativeModules","RCTAsyncStorage","RNC_AsyncSQLiteDBStorage","RNCAsyncStorage","PlatformLocalStorage","Error","AsyncStorage","_getRequests","_getKeys","_immediate","getItem","key","callback","Promise","resolve","reject","multiGet","errors","result","value","errs","convertErrors","setItem","multiSet","removeItem","multiRemove","mergeItem","multiMerge","clear","error","err","convertError","getAllKeys","keys","flushGetRequests","getRequests","getKeys","map","forEach","reqLength","length","i","request","requestKeys","requestResult","setImmediate","getRequest","keyIndex","promiseResult","push","indexOf","keyValuePairs","Array","isArray","e","out","message"],"mappings":"AAWA;;;;;;;;;;;eAEwBA,OAAO,CAAC,cAAD,C;IAAxBC,a,YAAAA,a;;AAEP,IAAMC,eAAe,GACnBD,aAAa,CAACE,wBAAd,IACAF,aAAa,CAACG,eADd,IAEAH,aAAa,CAACI,oBAHhB;;AAKA,IAAI,CAACH,eAAL,EAAsB;AACpB,QAAM,IAAII,KAAJ,uwBAAN;AAgBD;;AAwBD,IAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAG,EADI;AAEnBC,EAAAA,QAAQ,EAAG,EAFQ;AAGnBC,EAAAA,UAAU,EAAG,IAHM;AAUnBC,EAAAA,OAAO,EAAE,iBACPC,GADO,EAEPC,QAFO,EAGiB;AACxB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCd,MAAAA,eAAe,CAACe,QAAhB,CAAyB,CAACL,GAAD,CAAzB,EAAgC,UAASM,MAAT,EAAiBC,MAAjB,EAAyB;AAEvD,YAAMC,KAAK,GAAGD,MAAM,IAAIA,MAAM,CAAC,CAAD,CAAhB,IAAuBA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAvB,GAAsCA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAtC,GAAqD,IAAnE;AACA,YAAME,IAAI,GAAGC,aAAa,CAACJ,MAAD,CAA1B;AACAL,QAAAA,QAAQ,IAAIA,QAAQ,CAACQ,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAb,EAAkBD,KAAlB,CAApB;;AACA,YAAIC,IAAJ,EAAU;AACRL,UAAAA,MAAM,CAACK,IAAI,CAAC,CAAD,CAAL,CAAN;AACD,SAFD,MAEO;AACLN,UAAAA,OAAO,CAACK,KAAD,CAAP;AACD;AACF,OAVD;AAWD,KAZM,CAAP;AAaD,GA3BkB;AAkCnBG,EAAAA,OAAO,EAAE,iBACPX,GADO,EAEPQ,KAFO,EAGPP,QAHO,EAIQ;AACf,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCd,MAAAA,eAAe,CAACsB,QAAhB,CAAyB,CAAC,CAACZ,GAAD,EAAMQ,KAAN,CAAD,CAAzB,EAAyC,UAASF,MAAT,EAAiB;AACxD,YAAMG,IAAI,GAAGC,aAAa,CAACJ,MAAD,CAA1B;AACAL,QAAAA,QAAQ,IAAIA,QAAQ,CAACQ,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAb,CAApB;;AACA,YAAIA,IAAJ,EAAU;AACRL,UAAAA,MAAM,CAACK,IAAI,CAAC,CAAD,CAAL,CAAN;AACD,SAFD,MAEO;AACLN,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,OARD;AASD,KAVM,CAAP;AAWD,GAlDkB;AAyDnBU,EAAAA,UAAU,EAAE,oBACVb,GADU,EAEVC,QAFU,EAGK;AACf,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCd,MAAAA,eAAe,CAACwB,WAAhB,CAA4B,CAACd,GAAD,CAA5B,EAAmC,UAASM,MAAT,EAAiB;AAClD,YAAMG,IAAI,GAAGC,aAAa,CAACJ,MAAD,CAA1B;AACAL,QAAAA,QAAQ,IAAIA,QAAQ,CAACQ,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAb,CAApB;;AACA,YAAIA,IAAJ,EAAU;AACRL,UAAAA,MAAM,CAACK,IAAI,CAAC,CAAD,CAAL,CAAN;AACD,SAFD,MAEO;AACLN,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,OARD;AASD,KAVM,CAAP;AAWD,GAxEkB;AAkFnBY,EAAAA,SAAS,EAAE,mBACTf,GADS,EAETQ,KAFS,EAGTP,QAHS,EAIM;AACf,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCd,MAAAA,eAAe,CAAC0B,UAAhB,CAA2B,CAAC,CAAChB,GAAD,EAAMQ,KAAN,CAAD,CAA3B,EAA2C,UAASF,MAAT,EAAiB;AAC1D,YAAMG,IAAI,GAAGC,aAAa,CAACJ,MAAD,CAA1B;AACAL,QAAAA,QAAQ,IAAIA,QAAQ,CAACQ,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAb,CAApB;;AACA,YAAIA,IAAJ,EAAU;AACRL,UAAAA,MAAM,CAACK,IAAI,CAAC,CAAD,CAAL,CAAN;AACD,SAFD,MAEO;AACLN,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,OARD;AASD,KAVM,CAAP;AAWD,GAlGkB;AA2GnBc,EAAAA,KAAK,EAAE,eAAShB,QAAT,EAA6D;AAClE,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCd,MAAAA,eAAe,CAAC2B,KAAhB,CAAsB,UAASC,KAAT,EAAgB;AACpC,YAAMC,GAAG,GAAGC,YAAY,CAACF,KAAD,CAAxB;AACAjB,QAAAA,QAAQ,IAAIA,QAAQ,CAACkB,GAAD,CAApB;;AACA,YAAIA,GAAJ,EAAS;AACPf,UAAAA,MAAM,CAACe,GAAD,CAAN;AACD,SAFD,MAEO;AACLhB,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,OARD;AASD,KAVM,CAAP;AAWD,GAvHkB;AA8HnBkB,EAAAA,UAAU,EAAE,oBACVpB,QADU,EAEoB;AAC9B,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCd,MAAAA,eAAe,CAAC+B,UAAhB,CAA2B,UAASH,KAAT,EAAgBI,IAAhB,EAAsB;AAC/C,YAAMH,GAAG,GAAGC,YAAY,CAACF,KAAD,CAAxB;AACAjB,QAAAA,QAAQ,IAAIA,QAAQ,CAACkB,GAAD,EAAMG,IAAN,CAApB;;AACA,YAAIH,GAAJ,EAAS;AACPf,UAAAA,MAAM,CAACe,GAAD,CAAN;AACD,SAFD,MAEO;AACLhB,UAAAA,OAAO,CAACmB,IAAD,CAAP;AACD;AACF,OARD;AASD,KAVM,CAAP;AAWD,GA5IkB;AA6JnBC,EAAAA,gBAAgB,EAAE,4BAAiB;AACjC,QAAMC,WAAW,GAAG,KAAK5B,YAAzB;AACA,QAAM6B,OAAO,GAAG,KAAK5B,QAArB;AAEA,SAAKD,YAAL,GAAoB,EAApB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AAEAP,IAAAA,eAAe,CAACe,QAAhB,CAAyBoB,OAAzB,EAAkC,UAASnB,MAAT,EAAiBC,MAAjB,EAAyB;AAOzD,UAAMmB,GAAG,GAAG,EAAZ;AACAnB,MAAAA,MAAM,IACJA,MAAM,CAACoB,OAAP,CAAe,gBAAkB;AAAA;AAAA,YAAhB3B,GAAgB;AAAA,YAAXQ,KAAW;;AAC/BkB,QAAAA,GAAG,CAAC1B,GAAD,CAAH,GAAWQ,KAAX;AACA,eAAOA,KAAP;AACD,OAHD,CADF;AAKA,UAAMoB,SAAS,GAAGJ,WAAW,CAACK,MAA9B;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAApB,EAA+BE,CAAC,EAAhC,EAAoC;AAClC,YAAMC,OAAO,GAAGP,WAAW,CAACM,CAAD,CAA3B;AACA,YAAME,WAAW,GAAGD,OAAO,CAACT,IAA5B;AACA,YAAMW,aAAa,GAAGD,WAAW,CAACN,GAAZ,CAAgB,UAAA1B,GAAG;AAAA,iBAAI,CAACA,GAAD,EAAM0B,GAAG,CAAC1B,GAAD,CAAT,CAAJ;AAAA,SAAnB,CAAtB;AACA+B,QAAAA,OAAO,CAAC9B,QAAR,IAAoB8B,OAAO,CAAC9B,QAAR,CAAiB,IAAjB,EAAuBgC,aAAvB,CAApB;AACAF,QAAAA,OAAO,CAAC5B,OAAR,IAAmB4B,OAAO,CAAC5B,OAAR,CAAgB8B,aAAhB,CAAnB;AACD;AACF,KArBD;AAsBD,GA1LkB;AAmMnB5B,EAAAA,QAAQ,EAAE,kBACRiB,IADQ,EAERrB,QAFQ,EAGuC;AAAA;;AAC/C,QAAI,CAAC,KAAKH,UAAV,EAAsB;AACpB,WAAKA,UAAL,GAAkBoC,YAAY,CAAC,YAAM;AACnC,QAAA,KAAI,CAACpC,UAAL,GAAkB,IAAlB;;AACA,QAAA,KAAI,CAACyB,gBAAL;AACD,OAH6B,CAA9B;AAID;;AAED,QAAMY,UAAwB,GAAG;AAC/Bb,MAAAA,IAAI,EAAEA,IADyB;AAE/BrB,MAAAA,QAAQ,EAAEA,QAFqB;AAI/BmC,MAAAA,QAAQ,EAAE,KAAKvC,QAAL,CAAcgC,MAJO;AAK/B1B,MAAAA,OAAO,EAAE,IALsB;AAM/BC,MAAAA,MAAM,EAAE;AANuB,KAAjC;AASA,QAAMiC,aAAa,GAAG,IAAInC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrD+B,MAAAA,UAAU,CAAChC,OAAX,GAAqBA,OAArB;AACAgC,MAAAA,UAAU,CAAC/B,MAAX,GAAoBA,MAApB;AACD,KAHqB,CAAtB;;AAKA,SAAKR,YAAL,CAAkB0C,IAAlB,CAAuBH,UAAvB;;AAEAb,IAAAA,IAAI,CAACK,OAAL,CAAa,UAAA3B,GAAG,EAAI;AAClB,UAAI,KAAI,CAACH,QAAL,CAAc0C,OAAd,CAAsBvC,GAAtB,MAA+B,CAAC,CAApC,EAAuC;AACrC,QAAA,KAAI,CAACH,QAAL,CAAcyC,IAAd,CAAmBtC,GAAnB;AACD;AACF,KAJD;AAMA,WAAOqC,aAAP;AACD,GArOkB;AA6OnBzB,EAAAA,QAAQ,EAAE,kBACR4B,aADQ,EAERvC,QAFQ,EAGO;AACf,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCd,MAAAA,eAAe,CAACsB,QAAhB,CAAyB4B,aAAzB,EAAwC,UAASlC,MAAT,EAAiB;AACvD,YAAMY,KAAK,GAAGR,aAAa,CAACJ,MAAD,CAA3B;AACAL,QAAAA,QAAQ,IAAIA,QAAQ,CAACiB,KAAD,CAApB;;AACA,YAAIA,KAAJ,EAAW;AACTd,UAAAA,MAAM,CAACc,KAAD,CAAN;AACD,SAFD,MAEO;AACLf,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,OARD;AASD,KAVM,CAAP;AAWD,GA5PkB;AAmQnBW,EAAAA,WAAW,EAAE,qBACXQ,IADW,EAEXrB,QAFW,EAGI;AACf,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCd,MAAAA,eAAe,CAACwB,WAAhB,CAA4BQ,IAA5B,EAAkC,UAAShB,MAAT,EAAiB;AACjD,YAAMY,KAAK,GAAGR,aAAa,CAACJ,MAAD,CAA3B;AACAL,QAAAA,QAAQ,IAAIA,QAAQ,CAACiB,KAAD,CAApB;;AACA,YAAIA,KAAJ,EAAW;AACTd,UAAAA,MAAM,CAACc,KAAD,CAAN;AACD,SAFD,MAEO;AACLf,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,OARD;AASD,KAVM,CAAP;AAWD,GAlRkB;AA4RnBa,EAAAA,UAAU,EAAE,oBACVwB,aADU,EAEVvC,QAFU,EAGK;AACf,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCd,MAAAA,eAAe,CAAC0B,UAAhB,CAA2BwB,aAA3B,EAA0C,UAASlC,MAAT,EAAiB;AACzD,YAAMY,KAAK,GAAGR,aAAa,CAACJ,MAAD,CAA3B;AACAL,QAAAA,QAAQ,IAAIA,QAAQ,CAACiB,KAAD,CAApB;;AACA,YAAIA,KAAJ,EAAW;AACTd,UAAAA,MAAM,CAACc,KAAD,CAAN;AACD,SAFD,MAEO;AACLf,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,OARD;AASD,KAVM,CAAP;AAWD;AA3SkB,CAArB;;AA+SA,IAAI,CAACb,eAAe,CAAC0B,UAArB,EAAiC;AAC/B,SAAOrB,YAAY,CAACoB,SAApB;AACA,SAAOpB,YAAY,CAACqB,UAApB;AACD;;AAED,SAASN,aAAT,CAAuBD,IAAvB,EAAsD;AACpD,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AACD,SAAO,CAACgC,KAAK,CAACC,OAAN,CAAcjC,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA9B,EAAsCiB,GAAtC,CAA0C,UAAAiB,CAAC;AAAA,WAAIvB,YAAY,CAACuB,CAAD,CAAhB;AAAA,GAA3C,CAAP;AACD;;AAED,SAASvB,YAAT,CAAsBF,KAAtB,EAAqC;AACnC,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AACD,MAAM0B,GAAG,GAAG,IAAIlD,KAAJ,CAAUwB,KAAK,CAAC2B,OAAhB,CAAZ;AAEAD,EAAAA,GAAG,CAAC5C,GAAJ,GAAUkB,KAAK,CAAClB,GAAhB;AACA,SAAO4C,GAAP;AACD;;eAEcjD,Y","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n * @jsdoc\n */\n\n'use strict';\n\nconst {NativeModules} = require('react-native');\n\nconst RCTAsyncStorage =\n  NativeModules.RNC_AsyncSQLiteDBStorage ||\n  NativeModules.RNCAsyncStorage ||\n  NativeModules.PlatformLocalStorage; // Support for external modules, like react-native-windows\n\nif (!RCTAsyncStorage) {\n  throw new Error(`[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.\n\nTo fix this issue try these steps:\n\n  • Run \\`react-native link @react-native-community/async-storage\\` in the project root.\n\n  • Rebuild and restart the app.\n\n  • Run the packager with \\`--clearCache\\` flag.\n\n  • If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory and then rebuild and re-run the app.\n\n  • If this happens while testing with Jest, check out docs how to integrate AsyncStorage with it: https://github.com/react-native-community/async-storage/blob/LEGACY/docs/Jest-integration.md\n\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-community/react-native-async-storage/issues \n`);\n}\n\ntype ReadOnlyArrayString = $ReadOnlyArray<string>;\n\ntype MultiGetCallbackFunction = (\n  errors: ?$ReadOnlyArray<Error>,\n  result: ?$ReadOnlyArray<ReadOnlyArrayString>,\n) => void;\n\ntype MultiRequest = {|\n  keys: $ReadOnlyArray<string>,\n  callback: ?MultiGetCallbackFunction,\n  keyIndex: number,\n  resolve: ?(result?: Promise<?$ReadOnlyArray<ReadOnlyArrayString>>) => void,\n  reject: ?(error?: any) => void,\n|};\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app.  It should be used instead of\n * LocalStorage.\n *\n * See http://facebook.github.io/react-native/docs/asyncstorage.html\n */\nconst AsyncStorage = {\n  _getRequests: ([]: Array<MultiRequest>),\n  _getKeys: ([]: Array<string>),\n  _immediate: (null: ?number),\n\n  /**\n   * Fetches an item for a `key` and invokes a callback upon completion.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#getitem\n   */\n  getItem: function(\n    key: string,\n    callback?: ?(error: ?Error, result: string | null) => void,\n  ): Promise<string | null> {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiGet([key], function(errors, result) {\n        // Unpack result to get value from [[key,value]]\n        const value = result && result[0] && result[0][1] ? result[0][1] : null;\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0], value);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(value);\n        }\n      });\n    });\n  },\n\n  /**\n   * Sets the value for a `key` and invokes a callback upon completion.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#setitem\n   */\n  setItem: function(\n    key: string,\n    value: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise<null> {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiSet([[key, value]], function(errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Removes an item for a `key` and invokes a callback upon completion.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#removeitem\n   */\n  removeItem: function(\n    key: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise<null> {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiRemove([key], function(errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Merges an existing `key` value with an input value, assuming both values\n   * are stringified JSON.\n   *\n   * **NOTE:** This is not supported by all native implementations.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#mergeitem\n   */\n  mergeItem: function(\n    key: string,\n    value: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise<null> {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiMerge([[key, value]], function(errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n   * don't want to call this; use `removeItem` or `multiRemove` to clear only\n   * your app's keys.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#clear\n   */\n  clear: function(callback?: ?(error: ?Error) => void): Promise<null> {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.clear(function(error) {\n        const err = convertError(error);\n        callback && callback(err);\n        if (err) {\n          reject(err);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Gets *all* keys known to your app; for all callers, libraries, etc.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#getallkeys\n   */\n  getAllKeys: function(\n    callback?: ?(error: ?Error, keys: ?ReadOnlyArrayString) => void,\n  ): Promise<ReadOnlyArrayString> {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.getAllKeys(function(error, keys) {\n        const err = convertError(error);\n        callback && callback(err, keys);\n        if (err) {\n          reject(err);\n        } else {\n          resolve(keys);\n        }\n      });\n    });\n  },\n\n  /**\n   * The following batched functions are useful for executing a lot of\n   * operations at once, allowing for native optimizations and provide the\n   * convenience of a single callback after all operations are complete.\n   *\n   * These functions return arrays of errors, potentially one for every key.\n   * For key-specific errors, the Error object will have a key property to\n   * indicate which key caused the error.\n   */\n\n  /**\n   * Flushes any pending requests using a single batch call to get the data.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#flushgetrequests\n   * */\n  flushGetRequests: function(): void {\n    const getRequests = this._getRequests;\n    const getKeys = this._getKeys;\n\n    this._getRequests = [];\n    this._getKeys = [];\n\n    RCTAsyncStorage.multiGet(getKeys, function(errors, result) {\n      // Even though the runtime complexity of this is theoretically worse vs if we used a map,\n      // it's much, much faster in practice for the data sets we deal with (we avoid\n      // allocating result pair arrays). This was heavily benchmarked.\n      //\n      // Is there a way to avoid using the map but fix the bug in this breaking test?\n      // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\n      const map = {};\n      result &&\n        result.forEach(([key, value]) => {\n          map[key] = value;\n          return value;\n        });\n      const reqLength = getRequests.length;\n      for (let i = 0; i < reqLength; i++) {\n        const request = getRequests[i];\n        const requestKeys = request.keys;\n        const requestResult = requestKeys.map(key => [key, map[key]]);\n        request.callback && request.callback(null, requestResult);\n        request.resolve && request.resolve(requestResult);\n      }\n    });\n  },\n\n  /**\n   * This allows you to batch the fetching of items given an array of `key`\n   * inputs. Your callback will be invoked with an array of corresponding\n   * key-value pairs found.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#multiget\n   */\n  multiGet: function(\n    keys: Array<string>,\n    callback?: ?MultiGetCallbackFunction,\n  ): Promise<?$ReadOnlyArray<ReadOnlyArrayString>> {\n    if (!this._immediate) {\n      this._immediate = setImmediate(() => {\n        this._immediate = null;\n        this.flushGetRequests();\n      });\n    }\n\n    const getRequest: MultiRequest = {\n      keys: keys,\n      callback: callback,\n      // do we need this?\n      keyIndex: this._getKeys.length,\n      resolve: null,\n      reject: null,\n    };\n\n    const promiseResult = new Promise((resolve, reject) => {\n      getRequest.resolve = resolve;\n      getRequest.reject = reject;\n    });\n\n    this._getRequests.push(getRequest);\n    // avoid fetching duplicates\n    keys.forEach(key => {\n      if (this._getKeys.indexOf(key) === -1) {\n        this._getKeys.push(key);\n      }\n    });\n\n    return promiseResult;\n  },\n\n  /**\n   * Use this as a batch operation for storing multiple key-value pairs. When\n   * the operation completes you'll get a single callback with any errors.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#multiset\n   */\n  multiSet: function(\n    keyValuePairs: Array<Array<string>>,\n    callback?: ?(errors: ?$ReadOnlyArray<?Error>) => void,\n  ): Promise<null> {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiSet(keyValuePairs, function(errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Call this to batch the deletion of all keys in the `keys` array.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#multiremove\n   */\n  multiRemove: function(\n    keys: Array<string>,\n    callback?: ?(errors: ?$ReadOnlyArray<?Error>) => void,\n  ): Promise<null> {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiRemove(keys, function(errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Batch operation to merge in existing and new values for a given set of\n   * keys. This assumes that the values are stringified JSON.\n   *\n   * **NOTE**: This is not supported by all native implementations.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#multimerge\n   */\n  multiMerge: function(\n    keyValuePairs: Array<Array<string>>,\n    callback?: ?(errors: ?$ReadOnlyArray<?Error>) => void,\n  ): Promise<null> {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiMerge(keyValuePairs, function(errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n};\n\n// Not all native implementations support merge.\nif (!RCTAsyncStorage.multiMerge) {\n  delete AsyncStorage.mergeItem;\n  delete AsyncStorage.multiMerge;\n}\n\nfunction convertErrors(errs): ?$ReadOnlyArray<?Error> {\n  if (!errs) {\n    return null;\n  }\n  return (Array.isArray(errs) ? errs : [errs]).map(e => convertError(e));\n}\n\nfunction convertError(error): ?Error {\n  if (!error) {\n    return null;\n  }\n  const out = new Error(error.message);\n  // $FlowFixMe: adding custom properties to error.\n  out.key = error.key;\n  return out;\n}\n\nexport default AsyncStorage;\n"]}