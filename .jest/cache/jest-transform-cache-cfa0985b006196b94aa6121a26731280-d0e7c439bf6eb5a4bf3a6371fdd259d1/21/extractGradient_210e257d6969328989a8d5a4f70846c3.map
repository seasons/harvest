{"version":3,"sources":["extractGradient.ts"],"names":["percentReg","percent","matched","console","offsetComparator","object","other","id","children","gradientTransform","transform","gradientUnits","props","stops","childArray","Children","React","parent","l","i","offset","stopColor","stopOpacity","offsetNumber","percentToFloat","color","isNaN","alpha","Math","gradient","k","j","s","name","units"],"mappings":"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","sourcesContent":["import React, { Children, ReactElement } from 'react';\n\nimport extractColor from './extractColor';\nimport extractOpacity from './extractOpacity';\nimport extractTransform from './extractTransform';\nimport { TransformProps } from './types';\nimport units from '../units';\n\nconst percentReg = /^([+\\-]?\\d+(?:\\.\\d+)?(?:[eE][+\\-]?\\d+)?)(%?)$/;\n\nfunction percentToFloat(\n  percent:\n    | number\n    | string\n    | {\n        __getAnimatedValue: () => number;\n      },\n): number {\n  if (typeof percent === 'number') {\n    return percent;\n  }\n  if (\n    typeof percent === 'object' &&\n    typeof percent.__getAnimatedValue === 'function'\n  ) {\n    return percent.__getAnimatedValue();\n  }\n  const matched = typeof percent === 'string' && percent.match(percentReg);\n  if (!matched) {\n    console.warn(`\"${percent}\" is not a valid number or percentage string.`);\n    return 0;\n  }\n\n  return matched[2] ? +matched[1] / 100 : +matched[1];\n}\n\nconst offsetComparator = (object: number[], other: number[]) =>\n  object[0] - other[0];\n\nexport default function extractGradient(\n  props: {\n    id?: string;\n    children?: ReactElement[];\n    transform?: number[] | string | TransformProps;\n    gradientTransform?: number[] | string | TransformProps;\n    gradientUnits?: 'objectBoundingBox' | 'userSpaceOnUse';\n  } & TransformProps,\n  parent: {},\n) {\n  const { id, children, gradientTransform, transform, gradientUnits } = props;\n  if (!id) {\n    return null;\n  }\n\n  const stops = [];\n  const childArray = children\n    ? Children.map(children, child =>\n        React.cloneElement(child, {\n          parent,\n        }),\n      )\n    : [];\n  const l = childArray.length;\n  for (let i = 0; i < l; i++) {\n    const {\n      props: { offset, stopColor, stopOpacity },\n    } = childArray[i];\n    const offsetNumber = percentToFloat(offset || 0);\n    const color = stopColor && extractColor(stopColor);\n    if (typeof color !== 'number' || isNaN(offsetNumber)) {\n      console.warn(\n        `\"${stopColor}\" is not a valid color or \"${offset}\" is not a valid offset`,\n      );\n      continue;\n    }\n    const alpha = Math.round(extractOpacity(stopOpacity) * 255);\n    stops.push([offsetNumber, (color & 0x00ffffff) | (alpha << 24)]);\n  }\n  stops.sort(offsetComparator);\n\n  const gradient = [];\n  const k = stops.length;\n  for (let j = 0; j < k; j++) {\n    const s = stops[j];\n    gradient.push(s[0], s[1]);\n  }\n\n  return {\n    name: id,\n    gradient,\n    children: childArray,\n    gradientUnits: (gradientUnits && units[gradientUnits]) || 0,\n    gradientTransform: extractTransform(\n      gradientTransform || transform || props,\n    ),\n  };\n}\n"]}