{"version":3,"sources":["Typography.tsx"],"names":["fontFamily","sans","thin","medium","bold","display","regular","verticalAlign","prop","renderFontValue","fontValue","concat","fontStyle","fontWeight","join","Text","styled","fontSize","lineHeight","color","maxWidth","space","textAlign","determineFontSizes","size","Array","isArray","match","themeProps","typeSizes","map","s","reduce","accumulator","current","Sans","props","weight","numberOfLines","displayName","LogoText"],"mappings":"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","sourcesContent":["import React, { CSSProperties } from \"react\"\nimport styled from \"styled-components/native\"\nimport { Color } from \"./Theme\"\nimport { color as colorHelper } from \"App/utils/color\"\nimport { SansSize, themeProps } from \"./Theme\"\nimport {\n  color,\n  ColorProps,\n  display,\n  DisplayProps as StyledSystemDisplayProps,\n  fontSize,\n  FontSizeProps,\n  lineHeight,\n  LineHeightProps,\n  maxWidth,\n  MaxWidthProps,\n  space,\n  SpaceProps,\n  style,\n  textAlign,\n  TextAlignProps,\n} from \"styled-system\"\n\n/**\n * Type definition for font objects\n */\nexport interface FontDefinition {\n  fontFamily: string\n  fontWeight?: string | number\n  fontStyle?: string\n}\n\n/**\n * Type definition for font value properties which can either\n * be an object for complex definitions or a string for single entries.\n */\nexport type FontValue = string | FontDefinition\n\n/**\n * Defines the shape of the font family\n */\nexport interface FontFamilyProps {\n  sans: {\n    thin: FontValue\n    medium: FontValue\n    bold: FontValue\n  }\n  display: {\n    regular: FontValue\n  }\n}\n\n/**\n * A map of the font families and their settings\n */\nexport const fontFamily: FontFamilyProps = {\n  sans: {\n    thin: \"ProximaNovaT-Thin\",\n    medium: \"ProximaNova-Medium\",\n    bold: \"ProximaNova-Bold\",\n  },\n  display: {\n    regular: \"Apercu-Mono\",\n  },\n}\n\nexport interface VerticalAlignProps {\n  verticalAlign?:\n    | \"baseline\"\n    | \"sub\"\n    | \"super\"\n    | \"text-top\"\n    | \"text-bottom\"\n    | \"middle\"\n    | \"top\"\n    | \"bottom\"\n    | \"inherit\"\n    | \"initial\"\n    | \"unset\"\n}\nconst verticalAlign = style({\n  prop: \"verticalAlign\",\n})\n\n/** renderFontValue */\nexport const renderFontValue = (fontValue: FontValue) => {\n  if (typeof fontValue === \"string\") {\n    return `font-family: ${fontValue}`\n  } else {\n    return [`font-family: ${fontValue.fontFamily}`]\n      .concat(fontValue.fontStyle ? `font-style: ${fontValue.fontStyle}` : [])\n      .concat(fontValue.fontWeight ? `font-weight: ${fontValue.fontWeight}` : [])\n      .join(\";\\n\")\n  }\n}\n\nexport interface TextProps\n  extends ColorProps,\n    FontSizeProps,\n    LineHeightProps,\n    MaxWidthProps,\n    SpaceProps,\n    StyledSystemDisplayProps,\n    TextAlignProps,\n    VerticalAlignProps {\n  fontFamily?: string\n  style?: CSSProperties\n  numberOfLines?: number\n}\n\n/** Base Text component for typography */\nexport const Text = styled.Text<TextProps>`\n  ${({ fontFamily }) => fontFamily && renderFontValue(fontFamily)};\n  ${fontSize};\n  ${lineHeight};\n  ${color};\n  ${display};\n  ${maxWidth};\n  ${space};\n  ${textAlign};\n  ${verticalAlign};\n`\n\n/**\n * Any valid font family\n */\nexport type FontFamily = typeof themeProps[\"fontFamily\"]\n\n/**\n * Determines which font sizes/line heights to use for typography.\n */\nexport function determineFontSizes(size: string | string[]) {\n  if (!Array.isArray(size)) {\n    const match = themeProps.typeSizes[size]\n    return {\n      fontSize: match.fontSize,\n      lineHeight: match.lineHeight,\n    }\n  }\n\n  return size\n    .map(s => themeProps.typeSizes[s])\n    .reduce(\n      (accumulator, current) => {\n        return {\n          fontSize: [...accumulator.fontSize, current.fontSize],\n          lineHeight: [...accumulator.lineHeight, current.lineHeight],\n        }\n      },\n      { fontSize: [], lineHeight: [] }\n    )\n}\n\n/**\n * Sans\n */\n\nexport interface SansProps extends Partial<TextProps> {\n  italic?: boolean\n  role?: string\n  size: SansSize\n  color?: Color | string\n  /**\n   * Explicitly specify `null` to inherit weight from parent, otherwise default\n   * to `regular`.\n   */\n  weight?: null | \"thin\" | \"medium\"\n}\n\n/**\n * The Sans typeface is the main Seasons typeface\n */\n\nexport const Sans: React.SFC<SansProps> = props => {\n  const { size, weight, numberOfLines } = props\n  const color = props.color ? colorHelper(props.color) : colorHelper(\"black\")\n  return (\n    <Text\n      {...props}\n      fontFamily={fontFamily.sans[weight || \"medium\"]}\n      {...determineFontSizes(size)}\n      color={color}\n      numberOfLines={numberOfLines}\n    />\n  )\n}\n\nSans.displayName = \"Sans\"\n\nexport const LogoText = styled.Text`\n  font-family: \"Apercu-Mono\";\n  font-size: 20;\n  letter-spacing: 2;\n  line-height: 24;\n  color: #101010;\n`\n"]}