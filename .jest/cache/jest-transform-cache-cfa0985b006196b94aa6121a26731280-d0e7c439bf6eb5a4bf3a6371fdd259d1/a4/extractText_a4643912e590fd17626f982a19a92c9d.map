{"version":3,"sources":["extractText.tsx"],"names":["fontRegExp","fontFamilyPrefix","fontFamilySuffix","commaReg","cachedFontObjectsFromString","fontFamilyString","match","isBold","isItalic","fontSize","fontWeight","fontStyle","fontFamily","extractSingleFontFamily","fontData","fontVariant","fontStretch","textAnchor","textDecoration","letterSpacing","wordSpacing","kerning","fontFeatureSettings","fontVariantLigatures","fontVariationSettings","font","props","ownedFont","baseFont","parseFontString","TSpan","String","x","y","dx","dy","rotate","children","inlineSize","baselineShift","verticalAlign","alignmentBaseline","textChildren","container","Children","Array","content","extractFont"],"mappings":"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","sourcesContent":["import React, { Children, ComponentType } from 'react';\nimport extractLengthList from './extractLengthList';\nimport { pickNotNil } from '../util';\nimport { NumberArray, NumberProp } from './types';\n\nconst fontRegExp = /^\\s*((?:(?:normal|bold|italic)\\s+)*)(?:(\\d+(?:\\.\\d+)?(?:%|px|em|pt|pc|mm|cm|in]))*(?:\\s*\\/.*?)?\\s+)?\\s*\"?([^\"]*)/i;\nconst fontFamilyPrefix = /^[\\s\"']*/;\nconst fontFamilySuffix = /[\\s\"']*$/;\nconst commaReg = /\\s*,\\s*/g;\n\nconst cachedFontObjectsFromString: {\n  [font: string]: {\n    fontStyle: string;\n    fontSize: NumberProp;\n    fontWeight: NumberProp;\n    fontFamily: string | null;\n  } | null;\n} = {};\n\nfunction extractSingleFontFamily(fontFamilyString?: string) {\n  // SVG on the web allows for multiple font-families to be specified.\n  // For compatibility, we extract the first font-family, hoping\n  // we'll get a match.\n  return fontFamilyString\n    ? fontFamilyString\n        .split(commaReg)[0]\n        .replace(fontFamilyPrefix, '')\n        .replace(fontFamilySuffix, '')\n    : null;\n}\n\nfunction parseFontString(font: string) {\n  if (cachedFontObjectsFromString.hasOwnProperty(font)) {\n    return cachedFontObjectsFromString[font];\n  }\n  const match = fontRegExp.exec(font);\n  if (!match) {\n    cachedFontObjectsFromString[font] = null;\n    return null;\n  }\n  const isBold = /bold/.exec(match[1]);\n  const isItalic = /italic/.exec(match[1]);\n  cachedFontObjectsFromString[font] = {\n    fontSize: match[2] || 12,\n    fontWeight: isBold ? 'bold' : 'normal',\n    fontStyle: isItalic ? 'italic' : 'normal',\n    fontFamily: extractSingleFontFamily(match[3]),\n  };\n  return cachedFontObjectsFromString[font];\n}\n\ninterface fontProps {\n  fontData?: unknown;\n  fontStyle?: string;\n  fontVariant?: string;\n  fontWeight?: NumberProp;\n  fontStretch?: string;\n  fontSize?: NumberProp;\n  fontFamily?: string;\n  textAnchor?: string;\n  textDecoration?: string;\n  letterSpacing?: NumberProp;\n  wordSpacing?: NumberProp;\n  kerning?: NumberProp;\n  fontFeatureSettings?: string;\n  fontVariantLigatures?: string;\n  fontVariationSettings?: string;\n  font?: string;\n}\n\nexport function extractFont(props: fontProps) {\n  const {\n    fontData,\n    fontStyle,\n    fontVariant,\n    fontWeight,\n    fontStretch,\n    fontSize,\n    fontFamily,\n    textAnchor,\n    textDecoration,\n    letterSpacing,\n    wordSpacing,\n    kerning,\n    fontFeatureSettings,\n    fontVariantLigatures,\n    fontVariationSettings,\n    font,\n  } = props;\n\n  const ownedFont = pickNotNil({\n    fontData,\n    fontStyle,\n    fontVariant,\n    fontWeight,\n    fontStretch,\n    fontSize,\n    fontFamily: extractSingleFontFamily(fontFamily),\n    textAnchor,\n    textDecoration,\n    letterSpacing,\n    wordSpacing,\n    kerning,\n    fontFeatureSettings,\n    fontVariantLigatures,\n    fontVariationSettings,\n  });\n\n  const baseFont = typeof font === 'string' ? parseFontString(font) : font;\n\n  return { ...baseFont, ...ownedFont };\n}\n\nlet TSpan: ComponentType;\n\nexport function setTSpan(TSpanImplementation: ComponentType) {\n  TSpan = TSpanImplementation;\n}\n\nfunction getChild(child: undefined | string | number | ComponentType) {\n  if (typeof child === 'string' || typeof child === 'number') {\n    return <TSpan>{String(child)}</TSpan>;\n  } else {\n    return child;\n  }\n}\n\nexport type TextProps = {\n  x?: NumberArray;\n  y?: NumberArray;\n  dx?: NumberArray;\n  dy?: NumberArray;\n  rotate?: NumberArray;\n  children?: string | number | (string | number | ComponentType)[];\n  inlineSize?: NumberProp;\n  baselineShift?: NumberProp;\n  verticalAlign?: NumberProp;\n  alignmentBaseline?: string;\n} & fontProps;\n\nexport default function extractText(props: TextProps, container: boolean) {\n  const {\n    x,\n    y,\n    dx,\n    dy,\n    rotate,\n    children,\n    inlineSize,\n    baselineShift,\n    verticalAlign,\n    alignmentBaseline,\n  } = props;\n\n  const textChildren =\n    typeof children === 'string' || typeof children === 'number' ? (\n      container ? (\n        <TSpan>{String(children)}</TSpan>\n      ) : null\n    ) : Children.count(children) > 1 || Array.isArray(children) ? (\n      Children.map(children, getChild)\n    ) : (\n      children\n    );\n\n  return {\n    content: textChildren === null ? String(children) : null,\n    children: textChildren,\n    inlineSize,\n    baselineShift,\n    verticalAlign,\n    alignmentBaseline,\n    font: extractFont(props),\n    x: extractLengthList(x),\n    y: extractLengthList(y),\n    dx: extractLengthList(dx),\n    dy: extractLengthList(dy),\n    rotate: extractLengthList(rotate),\n  };\n}\n"]}