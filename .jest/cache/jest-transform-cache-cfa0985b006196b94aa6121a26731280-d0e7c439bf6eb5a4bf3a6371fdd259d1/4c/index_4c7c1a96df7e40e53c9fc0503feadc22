1a04434a09af0ee53049e0f87e26188d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _networking = _interopRequireDefault(require("../networking"));

var _whitelist = require("../utils/whitelist");

var _camel = require("../utils/camel");

var _authError = _interopRequireDefault(require("./authError"));

var _auth0Error = _interopRequireDefault(require("./auth0Error"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function responseHandler(response) {
  var exceptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (response.ok && response.json) {
    return (0, _camel.toCamelCase)(response.json, exceptions);
  }

  throw new _authError.default(response);
}

var Auth = function () {
  function Auth() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, Auth);
    this.client = new _networking.default(options);
    var clientId = options.clientId;

    if (!clientId) {
      throw new Error('Missing clientId in parameters');
    }

    this.domain = this.client.domain;
    this.clientId = clientId;
  }

  (0, _createClass2.default)(Auth, [{
    key: "authorizeUrl",
    value: function authorizeUrl() {
      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var query = (0, _whitelist.apply)({
        parameters: {
          redirectUri: {
            required: true,
            toName: 'redirect_uri'
          },
          responseType: {
            required: true,
            toName: 'response_type'
          },
          state: {
            required: true
          }
        },
        whitelist: false
      }, parameters);
      return this.client.url('/authorize', _objectSpread({}, query, {
        client_id: this.clientId
      }), true);
    }
  }, {
    key: "logoutUrl",
    value: function logoutUrl() {
      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var query = (0, _whitelist.apply)({
        parameters: {
          federated: {
            required: false
          },
          clientId: {
            required: false,
            toName: 'client_id'
          },
          returnTo: {
            required: false
          }
        }
      }, parameters);
      return this.client.url('/v2/logout', _objectSpread({}, query), true);
    }
  }, {
    key: "exchange",
    value: function exchange() {
      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var payload = (0, _whitelist.apply)({
        parameters: {
          code: {
            required: true
          },
          verifier: {
            required: true,
            toName: 'code_verifier'
          },
          redirectUri: {
            required: true,
            toName: 'redirect_uri'
          }
        }
      }, parameters);
      return this.client.post('/oauth/token', _objectSpread({}, payload, {
        client_id: this.clientId,
        grant_type: 'authorization_code'
      })).then(responseHandler);
    }
  }, {
    key: "passwordRealm",
    value: function passwordRealm() {
      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var payload = (0, _whitelist.apply)({
        parameters: {
          username: {
            required: true
          },
          password: {
            required: true
          },
          realm: {
            required: true
          },
          audience: {
            required: false
          },
          scope: {
            required: false
          }
        }
      }, parameters);
      return this.client.post('/oauth/token', _objectSpread({}, payload, {
        client_id: this.clientId,
        grant_type: 'http://auth0.com/oauth/grant-type/password-realm'
      })).then(responseHandler);
    }
  }, {
    key: "refreshToken",
    value: function refreshToken() {
      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var payload = (0, _whitelist.apply)({
        parameters: {
          refreshToken: {
            required: true,
            toName: 'refresh_token'
          },
          scope: {
            required: false
          }
        }
      }, parameters);
      return this.client.post('/oauth/token', _objectSpread({}, payload, {
        client_id: this.clientId,
        grant_type: 'refresh_token'
      })).then(responseHandler);
    }
  }, {
    key: "revoke",
    value: function revoke() {
      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var payload = (0, _whitelist.apply)({
        parameters: {
          refreshToken: {
            required: true,
            toName: 'token'
          }
        }
      }, parameters);
      return this.client.post('/oauth/revoke', _objectSpread({}, payload, {
        client_id: this.clientId
      })).then(function (response) {
        if (response.ok) {
          return {};
        }

        throw new _authError.default(response);
      });
    }
  }, {
    key: "userInfo",
    value: function userInfo() {
      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var payload = (0, _whitelist.apply)({
        parameters: {
          token: {
            required: true
          }
        }
      }, parameters);
      var _this$client = this.client,
          baseUrl = _this$client.baseUrl,
          telemetry = _this$client.telemetry;
      var client = new _networking.default({
        baseUrl: baseUrl,
        telemetry: telemetry,
        token: payload.token
      });
      var claims = ['sub', 'name', 'given_name', 'family_name', 'middle_name', 'nickname', 'preferred_username', 'profile', 'picture', 'website', 'email', 'email_verified', 'gender', 'birthdate', 'zoneinfo', 'locale', 'phone_number', 'phone_number_verified', 'address', 'updated_at'];
      return client.get('/userinfo').then(function (response) {
        return responseHandler(response, {
          attributes: claims,
          whitelist: true
        });
      });
    }
  }, {
    key: "resetPassword",
    value: function resetPassword() {
      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var payload = (0, _whitelist.apply)({
        parameters: {
          email: {
            required: true
          },
          connection: {
            required: true
          }
        }
      }, parameters);
      return this.client.post('/dbconnections/change_password', _objectSpread({}, payload, {
        client_id: this.clientId
      })).then(function (response) {
        if (response.ok) {
          return {};
        }

        throw new _authError.default(response);
      });
    }
  }, {
    key: "createUser",
    value: function createUser() {
      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var payload = (0, _whitelist.apply)({
        parameters: {
          email: {
            required: true
          },
          password: {
            required: true
          },
          connection: {
            required: true
          },
          username: {
            required: false
          },
          metadata: {
            required: false,
            toName: 'user_metadata'
          }
        }
      }, parameters);
      return this.client.post('/dbconnections/signup', _objectSpread({}, payload, {
        client_id: this.clientId
      })).then(function (response) {
        if (response.ok && response.json) {
          return (0, _camel.toCamelCase)(response.json);
        }

        throw new _auth0Error.default(response);
      });
    }
  }]);
  return Auth;
}();

exports.default = Auth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInJlc3BvbnNlSGFuZGxlciIsInJlc3BvbnNlIiwiZXhjZXB0aW9ucyIsIm9rIiwianNvbiIsIkF1dGhFcnJvciIsIkF1dGgiLCJvcHRpb25zIiwiY2xpZW50IiwiQ2xpZW50IiwiY2xpZW50SWQiLCJFcnJvciIsImRvbWFpbiIsInBhcmFtZXRlcnMiLCJxdWVyeSIsInJlZGlyZWN0VXJpIiwicmVxdWlyZWQiLCJ0b05hbWUiLCJyZXNwb25zZVR5cGUiLCJzdGF0ZSIsIndoaXRlbGlzdCIsInVybCIsImNsaWVudF9pZCIsImZlZGVyYXRlZCIsInJldHVyblRvIiwicGF5bG9hZCIsImNvZGUiLCJ2ZXJpZmllciIsInBvc3QiLCJncmFudF90eXBlIiwidGhlbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJyZWFsbSIsImF1ZGllbmNlIiwic2NvcGUiLCJyZWZyZXNoVG9rZW4iLCJ0b2tlbiIsImJhc2VVcmwiLCJ0ZWxlbWV0cnkiLCJjbGFpbXMiLCJnZXQiLCJhdHRyaWJ1dGVzIiwiZW1haWwiLCJjb25uZWN0aW9uIiwibWV0YWRhdGEiLCJBdXRoMEVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLFNBQVNBLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW9EO0FBQUEsTUFBakJDLFVBQWlCLHVFQUFKLEVBQUk7O0FBQ2xELE1BQUlELFFBQVEsQ0FBQ0UsRUFBVCxJQUFlRixRQUFRLENBQUNHLElBQTVCLEVBQWtDO0FBQ2hDLFdBQU8sd0JBQVlILFFBQVEsQ0FBQ0csSUFBckIsRUFBMkJGLFVBQTNCLENBQVA7QUFDRDs7QUFDRCxRQUFNLElBQUlHLGtCQUFKLENBQWNKLFFBQWQsQ0FBTjtBQUNEOztJQVNvQkssSTtBQUNuQixrQkFBMEI7QUFBQSxRQUFkQyxPQUFjLHVFQUFKLEVBQUk7QUFBQTtBQUN4QixTQUFLQyxNQUFMLEdBQWMsSUFBSUMsbUJBQUos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RUFBRTtBQUFFZixZQUFBQSxRQUFRLEVBQUU7QUFBWixXQUpBO0FBS1Y2QixVQUFBQSxRQUFRLEVBQUU7QUFBRTdCLFlBQUFBLFFBQVEsRUFBRSxLQUFaO0FBQW1CQyxZQUFBQSxNQUFNLEVBQUU7QUFBM0I7QUFMQTtBQURkLE9BRGMsRUFVZEosVUFWYyxDQUFoQjtBQWFBLGFBQU8sS0FBS0wsTUFBTCxDQUNKb0IsSUFESSxDQUNDLHVCQURELG9CQUVBSCxPQUZBO0FBR0hILFFBQUFBLFNBQVMsRUFBRSxLQUFLWjtBQUhiLFVBS0pvQixJQUxJLENBS0MsVUFBQTdCLFFBQVEsRUFBSTtBQUNoQixZQUFJQSxRQUFRLENBQUNFLEVBQVQsSUFBZUYsUUFBUSxDQUFDRyxJQUE1QixFQUFrQztBQUNoQyxpQkFBTyx3QkFBWUgsUUFBUSxDQUFDRyxJQUFyQixDQUFQO0FBQ0Q7O0FBQ0QsY0FBTSxJQUFJMEMsbUJBQUosQ0FBZTdDLFFBQWYsQ0FBTjtBQUNELE9BVkksQ0FBUDtBQVdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENsaWVudCBmcm9tICcuLi9uZXR3b3JraW5nJztcbmltcG9ydCB7IGFwcGx5IH0gZnJvbSAnLi4vdXRpbHMvd2hpdGVsaXN0JztcbmltcG9ydCB7IHRvQ2FtZWxDYXNlIH0gZnJvbSAnLi4vdXRpbHMvY2FtZWwnO1xuaW1wb3J0IEF1dGhFcnJvciBmcm9tICcuL2F1dGhFcnJvcic7XG5pbXBvcnQgQXV0aDBFcnJvciBmcm9tICcuL2F1dGgwRXJyb3InO1xuXG5mdW5jdGlvbiByZXNwb25zZUhhbmRsZXIocmVzcG9uc2UsIGV4Y2VwdGlvbnMgPSB7fSkge1xuICBpZiAocmVzcG9uc2Uub2sgJiYgcmVzcG9uc2UuanNvbikge1xuICAgIHJldHVybiB0b0NhbWVsQ2FzZShyZXNwb25zZS5qc29uLCBleGNlcHRpb25zKTtcbiAgfVxuICB0aHJvdyBuZXcgQXV0aEVycm9yKHJlc3BvbnNlKTtcbn1cblxuLyoqXG4gKiBBdXRoMCBBdXRoIEFQSVxuICpcbiAqIEBleHBvcnQgQXV0aFxuICogQHNlZSBodHRwczovL2F1dGgwLmNvbS9kb2NzL2FwaS9hdXRoZW50aWNhdGlvblxuICogQGNsYXNzIEF1dGhcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0aCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuY2xpZW50ID0gbmV3IENsaWVudChvcHRpb25zKTtcbiAgICBjb25zdCB7IGNsaWVudElkIH0gPSBvcHRpb25zO1xuICAgIGlmICghY2xpZW50SWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBjbGllbnRJZCBpbiBwYXJhbWV0ZXJzJyk7XG4gICAgfVxuICAgIHRoaXMuZG9tYWluID0gdGhpcy5jbGllbnQuZG9tYWluO1xuICAgIHRoaXMuY2xpZW50SWQgPSBjbGllbnRJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGZ1bGwgYXV0aG9yaXplIGVuZHBvaW50IHVybCBpbiB0aGUgQXV0aG9yaXphdGlvbiBTZXJ2ZXIgKEFTKSB3aXRoIGdpdmVuIHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbWV0ZXJzIHBhcmFtZXRlcnMgdG8gc2VuZCB0byBgL2F1dGhvcml6ZWBcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmFtZXRlcnMucmVzcG9uc2VUeXBlIHR5cGUgb2YgdGhlIHJlc3BvbnNlIHRvIGdldCBmcm9tIGAvYXV0aG9yaXplYC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmFtZXRlcnMucmVkaXJlY3RVcmkgd2hlcmUgdGhlIEFTIHdpbGwgcmVkaXJlY3QgYmFjayBhZnRlciBzdWNjZXNzIG9yIGZhaWx1cmUuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXJhbWV0ZXJzLnN0YXRlIHJhbmRvbSBzdHJpbmcgdG8gcHJldmVudCBDU1JGIGF0dGFja3MuXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IGF1dGhvcml6ZSB1cmwgd2l0aCBzcGVjaWZpZWQgcGFyYW1ldGVycyB0byByZWRpcmVjdCB0byBmb3IgQXV0aFovQXV0aE4uXG4gICAqIEBzZWUgaHR0cHM6Ly9hdXRoMC5jb20vZG9jcy9hcGkvYXV0aGVudGljYXRpb24jYXV0aG9yaXplLWNsaWVudFxuICAgKlxuICAgKiBAbWVtYmVyb2YgQXV0aFxuICAgKi9cbiAgYXV0aG9yaXplVXJsKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgIGNvbnN0IHF1ZXJ5ID0gYXBwbHkoXG4gICAgICB7XG4gICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICByZWRpcmVjdFVyaTogeyByZXF1aXJlZDogdHJ1ZSwgdG9OYW1lOiAncmVkaXJlY3RfdXJpJyB9LFxuICAgICAgICAgIHJlc3BvbnNlVHlwZTogeyByZXF1aXJlZDogdHJ1ZSwgdG9OYW1lOiAncmVzcG9uc2VfdHlwZScgfSxcbiAgICAgICAgICBzdGF0ZTogeyByZXF1aXJlZDogdHJ1ZSB9XG4gICAgICAgIH0sXG4gICAgICAgIHdoaXRlbGlzdDogZmFsc2VcbiAgICAgIH0sXG4gICAgICBwYXJhbWV0ZXJzXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQudXJsKFxuICAgICAgJy9hdXRob3JpemUnLFxuICAgICAgeyAuLi5xdWVyeSwgY2xpZW50X2lkOiB0aGlzLmNsaWVudElkIH0sXG4gICAgICB0cnVlXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIGZ1bGwgbG9nb3V0IGVuZHBvaW50IHVybCBpbiB0aGUgQXV0aG9yaXphdGlvbiBTZXJ2ZXIgKEFTKSB3aXRoIGdpdmVuIHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbWV0ZXJzIHBhcmFtZXRlcnMgdG8gc2VuZCB0byBgL3YyL2xvZ291dGBcbiAgICogQHBhcmFtIHtCb29sZWFufSBbcGFyYW1ldGVycy5mZWRlcmF0ZWRdIGlmIHRoZSBsb2dvdXQgc2hvdWxkIGluY2x1ZGUgcmVtb3Zpbmcgc2Vzc2lvbiBmb3IgZmVkZXJhdGVkIElkUC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IFtwYXJhbWV0ZXJzLmNsaWVudElkXSBjbGllbnQgaWRlbnRpZmllciBvZiB0aGUgb25lIHJlcXVlc3RpbmcgdGhlIGxvZ291dFxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3BhcmFtZXRlcnMucmV0dXJuVG9dIHVybCB3aGVyZSB0aGUgdXNlciBpcyByZWRpcmVjdGVkIHRvIGFmdGVyIGxvZ291dC4gSXQgbXVzdCBiZSBkZWNsYXJlZCBpbiB5b3UgQXV0aDAgRGFzaGJvYXJkXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IGxvZ291dCB1cmwgd2l0aCBzcGVjaWZpZWQgcGFyYW1ldGVyc1xuICAgKiBAc2VlIGh0dHBzOi8vYXV0aDAuY29tL2RvY3MvYXBpL2F1dGhlbnRpY2F0aW9uI2xvZ291dFxuICAgKlxuICAgKiBAbWVtYmVyb2YgQXV0aFxuICAgKi9cbiAgbG9nb3V0VXJsKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgIGNvbnN0IHF1ZXJ5ID0gYXBwbHkoXG4gICAgICB7XG4gICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICBmZWRlcmF0ZWQ6IHsgcmVxdWlyZWQ6IGZhbHNlIH0sXG4gICAgICAgICAgY2xpZW50SWQ6IHsgcmVxdWlyZWQ6IGZhbHNlLCB0b05hbWU6ICdjbGllbnRfaWQnIH0sXG4gICAgICAgICAgcmV0dXJuVG86IHsgcmVxdWlyZWQ6IGZhbHNlIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHBhcmFtZXRlcnNcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmNsaWVudC51cmwoJy92Mi9sb2dvdXQnLCB7IC4uLnF1ZXJ5IH0sIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4Y2hhbmdlcyBhIGNvZGUgb2J0YWluZWQgdmlhIGAvYXV0aG9yaXplYCAody9QS0NFKSBmb3IgdGhlIHVzZXIncyB0b2tlbnNcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtZXRlcnMgcGFyYW1ldGVycyB1c2VkIHRvIG9idGFpbiB0b2tlbnMgZnJvbSBhIGNvZGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmFtZXRlcnMuY29kZSBjb2RlIHJldHVybmVkIGJ5IGAvYXV0aG9yaXplYC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmFtZXRlcnMucmVkaXJlY3RVcmkgb3JpZ2luYWwgcmVkaXJlY3RVcmkgdXNlZCB3aGVuIGNhbGxpbmcgYC9hdXRob3JpemVgLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGFyYW1ldGVycy52ZXJpZmllciB2YWx1ZSB1c2VkIHRvIGdlbmVyYXRlIHRoZSBjb2RlIGNoYWxsZW5nZSBzZW50IHRvIGAvYXV0aG9yaXplYC5cbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqIEBzZWUgaHR0cHM6Ly9hdXRoMC5jb20vZG9jcy9hcGktYXV0aC9ncmFudC9hdXRob3JpemF0aW9uLWNvZGUtcGtjZVxuICAgKlxuICAgKiBAbWVtYmVyb2YgQXV0aFxuICAgKi9cbiAgZXhjaGFuZ2UocGFyYW1ldGVycyA9IHt9KSB7XG4gICAgY29uc3QgcGF5bG9hZCA9IGFwcGx5KFxuICAgICAge1xuICAgICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgICAgY29kZTogeyByZXF1aXJlZDogdHJ1ZSB9LFxuICAgICAgICAgIHZlcmlmaWVyOiB7IHJlcXVpcmVkOiB0cnVlLCB0b05hbWU6ICdjb2RlX3ZlcmlmaWVyJyB9LFxuICAgICAgICAgIHJlZGlyZWN0VXJpOiB7IHJlcXVpcmVkOiB0cnVlLCB0b05hbWU6ICdyZWRpcmVjdF91cmknIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHBhcmFtZXRlcnNcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmNsaWVudFxuICAgICAgLnBvc3QoJy9vYXV0aC90b2tlbicsIHtcbiAgICAgICAgLi4ucGF5bG9hZCxcbiAgICAgICAgY2xpZW50X2lkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICBncmFudF90eXBlOiAnYXV0aG9yaXphdGlvbl9jb2RlJ1xuICAgICAgfSlcbiAgICAgIC50aGVuKHJlc3BvbnNlSGFuZGxlcik7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgQXV0aCB3aXRoIHVzZXIgY3JlZGVudGlhbHMgdXNpbmcgdGhlIFBhc3N3b3JkIFJlYWxtIEdyYW50XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbWV0ZXJzIHBhc3N3b3JkIHJlYWxtIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmFtZXRlcnMudXNlcm5hbWUgdXNlcidzIHVzZXJuYW1lIG9yIGVtYWlsXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXJhbWV0ZXJzLnBhc3N3b3JkIHVzZXIncyBwYXNzd29yZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGFyYW1ldGVycy5yZWFsbSBuYW1lIG9mIHRoZSBSZWFsbSB3aGVyZSB0byBBdXRoIChvciBjb25uZWN0aW9uIG5hbWUpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbcGFyYW1ldGVycy5hdWRpZW5jZV0gaWRlbnRpZmllciBvZiBSZXNvdXJjZSBTZXJ2ZXIgKFJTKSB0byBiZSBpbmNsdWRlZCBhcyBhdWRpZW5jZSAoYXVkIGNsYWltKSBvZiB0aGUgaXNzdWVkIGFjY2VzcyB0b2tlblxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3BhcmFtZXRlcnMuc2NvcGVdIHNjb3BlcyByZXF1ZXN0ZWQgZm9yIHRoZSBpc3N1ZWQgdG9rZW5zLiBlLmcuIGBvcGVuaWQgcHJvZmlsZWBcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqIEBzZWUgaHR0cHM6Ly9hdXRoMC5jb20vZG9jcy9hcGktYXV0aC9ncmFudC9wYXNzd29yZCNyZWFsbS1zdXBwb3J0XG4gICAqXG4gICAqIEBtZW1iZXJvZiBBdXRoXG4gICAqL1xuICBwYXNzd29yZFJlYWxtKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgIGNvbnN0IHBheWxvYWQgPSBhcHBseShcbiAgICAgIHtcbiAgICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICAgIHVzZXJuYW1lOiB7IHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgICAgICAgcGFzc3dvcmQ6IHsgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICAgICAgICByZWFsbTogeyByZXF1aXJlZDogdHJ1ZSB9LFxuICAgICAgICAgIGF1ZGllbmNlOiB7IHJlcXVpcmVkOiBmYWxzZSB9LFxuICAgICAgICAgIHNjb3BlOiB7IHJlcXVpcmVkOiBmYWxzZSB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwYXJhbWV0ZXJzXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnRcbiAgICAgIC5wb3N0KCcvb2F1dGgvdG9rZW4nLCB7XG4gICAgICAgIC4uLnBheWxvYWQsXG4gICAgICAgIGNsaWVudF9pZDogdGhpcy5jbGllbnRJZCxcbiAgICAgICAgZ3JhbnRfdHlwZTogJ2h0dHA6Ly9hdXRoMC5jb20vb2F1dGgvZ3JhbnQtdHlwZS9wYXNzd29yZC1yZWFsbSdcbiAgICAgIH0pXG4gICAgICAudGhlbihyZXNwb25zZUhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9idGFpbiBuZXcgdG9rZW5zIHVzaW5nIHRoZSBSZWZyZXNoIFRva2VuIG9idGFpbmVkIGR1cmluZyBBdXRoIChyZXF1ZXN0aW5nIGBvZmZsaW5lX2FjY2Vzc2Agc2NvcGUpXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbWV0ZXJzIHJlZnJlc2ggdG9rZW4gcGFyYW1ldGVyc1xuICAgKiBAcGFyYW0ge1N0cmluZ30gcGFyYW1ldGVycy5yZWZyZXNoVG9rZW4gdXNlcidzIGlzc3VlZCByZWZyZXNoIHRva2VuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbcGFyYW1ldGVycy5zY29wZV0gc2NvcGVzIHJlcXVlc3RlZCBmb3IgdGhlIGlzc3VlZCB0b2tlbnMuIGUuZy4gYG9wZW5pZCBwcm9maWxlYFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICogQHNlZSBodHRwczovL2F1dGgwLmNvbS9kb2NzL3Rva2Vucy9yZWZyZXNoLXRva2VuL2N1cnJlbnQjdXNlLWEtcmVmcmVzaC10b2tlblxuICAgKlxuICAgKiBAbWVtYmVyb2YgQXV0aFxuICAgKi9cbiAgcmVmcmVzaFRva2VuKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgIGNvbnN0IHBheWxvYWQgPSBhcHBseShcbiAgICAgIHtcbiAgICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICAgIHJlZnJlc2hUb2tlbjogeyByZXF1aXJlZDogdHJ1ZSwgdG9OYW1lOiAncmVmcmVzaF90b2tlbicgfSxcbiAgICAgICAgICBzY29wZTogeyByZXF1aXJlZDogZmFsc2UgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcGFyYW1ldGVyc1xuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAucG9zdCgnL29hdXRoL3Rva2VuJywge1xuICAgICAgICAuLi5wYXlsb2FkLFxuICAgICAgICBjbGllbnRfaWQ6IHRoaXMuY2xpZW50SWQsXG4gICAgICAgIGdyYW50X3R5cGU6ICdyZWZyZXNoX3Rva2VuJ1xuICAgICAgfSlcbiAgICAgIC50aGVuKHJlc3BvbnNlSGFuZGxlcik7XG4gIH1cblxuICAvKipcbiAgICogUmV2b2tlIGFuIGlzc3VlZCByZWZyZXNoIHRva2VuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbWV0ZXJzIHJldm9rZSB0b2tlbiBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXJhbWV0ZXJzLnJlZnJlc2hUb2tlbiB1c2VyJ3MgaXNzdWVkIHJlZnJlc2ggdG9rZW5cbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqXG4gICAqIEBtZW1iZXJvZiBBdXRoXG4gICAqL1xuICByZXZva2UocGFyYW1ldGVycyA9IHt9KSB7XG4gICAgY29uc3QgcGF5bG9hZCA9IGFwcGx5KFxuICAgICAge1xuICAgICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgICAgcmVmcmVzaFRva2VuOiB7IHJlcXVpcmVkOiB0cnVlLCB0b05hbWU6ICd0b2tlbicgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcGFyYW1ldGVyc1xuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAucG9zdCgnL29hdXRoL3Jldm9rZScsIHtcbiAgICAgICAgLi4ucGF5bG9hZCxcbiAgICAgICAgY2xpZW50X2lkOiB0aGlzLmNsaWVudElkXG4gICAgICB9KVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEF1dGhFcnJvcihyZXNwb25zZSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdXNlciBpbmZvcm1hdGlvbiB1c2luZyBhbiBhY2Nlc3MgdG9rZW5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtZXRlcnMgdXNlciBpbmZvIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmFtZXRlcnMudG9rZW4gdXNlcidzIGFjY2VzcyB0b2tlblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICpcbiAgICogQG1lbWJlcm9mIEF1dGhcbiAgICovXG4gIHVzZXJJbmZvKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgIGNvbnN0IHBheWxvYWQgPSBhcHBseShcbiAgICAgIHtcbiAgICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICAgIHRva2VuOiB7IHJlcXVpcmVkOiB0cnVlIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHBhcmFtZXRlcnNcbiAgICApO1xuICAgIGNvbnN0IHsgYmFzZVVybCwgdGVsZW1ldHJ5IH0gPSB0aGlzLmNsaWVudDtcbiAgICBjb25zdCBjbGllbnQgPSBuZXcgQ2xpZW50KHsgYmFzZVVybCwgdGVsZW1ldHJ5LCB0b2tlbjogcGF5bG9hZC50b2tlbiB9KTtcbiAgICBjb25zdCBjbGFpbXMgPSBbXG4gICAgICAnc3ViJyxcbiAgICAgICduYW1lJyxcbiAgICAgICdnaXZlbl9uYW1lJyxcbiAgICAgICdmYW1pbHlfbmFtZScsXG4gICAgICAnbWlkZGxlX25hbWUnLFxuICAgICAgJ25pY2tuYW1lJyxcbiAgICAgICdwcmVmZXJyZWRfdXNlcm5hbWUnLFxuICAgICAgJ3Byb2ZpbGUnLFxuICAgICAgJ3BpY3R1cmUnLFxuICAgICAgJ3dlYnNpdGUnLFxuICAgICAgJ2VtYWlsJyxcbiAgICAgICdlbWFpbF92ZXJpZmllZCcsXG4gICAgICAnZ2VuZGVyJyxcbiAgICAgICdiaXJ0aGRhdGUnLFxuICAgICAgJ3pvbmVpbmZvJyxcbiAgICAgICdsb2NhbGUnLFxuICAgICAgJ3Bob25lX251bWJlcicsXG4gICAgICAncGhvbmVfbnVtYmVyX3ZlcmlmaWVkJyxcbiAgICAgICdhZGRyZXNzJyxcbiAgICAgICd1cGRhdGVkX2F0J1xuICAgIF07XG4gICAgcmV0dXJuIGNsaWVudFxuICAgICAgLmdldCgnL3VzZXJpbmZvJylcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+XG4gICAgICAgIHJlc3BvbnNlSGFuZGxlcihyZXNwb25zZSwgeyBhdHRyaWJ1dGVzOiBjbGFpbXMsIHdoaXRlbGlzdDogdHJ1ZSB9KVxuICAgICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0IGFuIGVtYWlsIHdpdGggaW5zdHJ1Y3Rpb25zIHRvIGNoYW5nZSBwYXNzd29yZCBvZiBhIHVzZXJcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtZXRlcnMgcmVzZXQgcGFzc3dvcmQgcGFyYW1ldGVyc1xuICAgKiBAcGFyYW0ge1N0cmluZ30gcGFyYW1ldGVycy5lbWFpbCB1c2VyJ3MgZW1haWxcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmFtZXRlcnMuY29ubmVjdGlvbiBuYW1lIG9mIHRoZSBjb25uZWN0aW9uIG9mIHRoZSB1c2VyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKlxuICAgKiBAbWVtYmVyb2YgQXV0aFxuICAgKi9cbiAgcmVzZXRQYXNzd29yZChwYXJhbWV0ZXJzID0ge30pIHtcbiAgICBjb25zdCBwYXlsb2FkID0gYXBwbHkoXG4gICAgICB7XG4gICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICBlbWFpbDogeyByZXF1aXJlZDogdHJ1ZSB9LFxuICAgICAgICAgIGNvbm5lY3Rpb246IHsgcmVxdWlyZWQ6IHRydWUgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcGFyYW1ldGVyc1xuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAucG9zdCgnL2RiY29ubmVjdGlvbnMvY2hhbmdlX3Bhc3N3b3JkJywge1xuICAgICAgICAuLi5wYXlsb2FkLFxuICAgICAgICBjbGllbnRfaWQ6IHRoaXMuY2xpZW50SWRcbiAgICAgIH0pXG4gICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgQXV0aEVycm9yKHJlc3BvbnNlKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbWV0ZXJzIGNyZWF0ZSB1c2VyIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmFtZXRlcnMuZW1haWwgdXNlcidzIGVtYWlsXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbcGFyYW1ldGVycy51c2VybmFtZV0gdXNlcidzIHVzZXJuYW1lXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXJhbWV0ZXJzLnBhc3N3b3JkIHVzZXIncyBwYXNzd29yZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGFyYW1ldGVycy5jb25uZWN0aW9uIG5hbWUgb2YgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24gd2hlcmUgdG8gY3JlYXRlIHRoZSB1c2VyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbcGFyYW1ldGVycy5tZXRhZGF0YV0gYWRkaXRpb25hbCB1c2VyIGluZm9ybWF0aW9uIHRoYXQgd2lsbCBiZSBzdG9yZWQgaW4gYHVzZXJfbWV0YWRhdGFgXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKlxuICAgKiBAbWVtYmVyb2YgQXV0aFxuICAgKi9cbiAgY3JlYXRlVXNlcihwYXJhbWV0ZXJzID0ge30pIHtcbiAgICBjb25zdCBwYXlsb2FkID0gYXBwbHkoXG4gICAgICB7XG4gICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICBlbWFpbDogeyByZXF1aXJlZDogdHJ1ZSB9LFxuICAgICAgICAgIHBhc3N3b3JkOiB7IHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgICAgICAgY29ubmVjdGlvbjogeyByZXF1aXJlZDogdHJ1ZSB9LFxuICAgICAgICAgIHVzZXJuYW1lOiB7IHJlcXVpcmVkOiBmYWxzZSB9LFxuICAgICAgICAgIG1ldGFkYXRhOiB7IHJlcXVpcmVkOiBmYWxzZSwgdG9OYW1lOiAndXNlcl9tZXRhZGF0YScgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcGFyYW1ldGVyc1xuICAgICk7XG5cbiAgICByZXR1cm4gdGhpcy5jbGllbnRcbiAgICAgIC5wb3N0KCcvZGJjb25uZWN0aW9ucy9zaWdudXAnLCB7XG4gICAgICAgIC4uLnBheWxvYWQsXG4gICAgICAgIGNsaWVudF9pZDogdGhpcy5jbGllbnRJZFxuICAgICAgfSlcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLm9rICYmIHJlc3BvbnNlLmpzb24pIHtcbiAgICAgICAgICByZXR1cm4gdG9DYW1lbENhc2UocmVzcG9uc2UuanNvbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEF1dGgwRXJyb3IocmVzcG9uc2UpO1xuICAgICAgfSk7XG4gIH1cbn1cbiJdfQ==