485091593d6bf489043b63ce9b618883









'use strict';var _jsxFileName = "/Users/kierangillen/code/personal/harvest/node_modules/react-native/Libraries/Components/TextInput/TextInput.js";function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}



























var AndroidTextInput;
var RCTMultilineTextInputView;
var RCTSinglelineTextInputView;

if (require('Platform').OS === 'android') {
  AndroidTextInput = require('requireNativeComponent')('AndroidTextInput');
} else if (require('Platform').OS === 'ios') {
  RCTMultilineTextInputView = require('requireNativeComponent')(
  'RCTMultilineTextInputView');

  RCTSinglelineTextInputView = require('requireNativeComponent')(
  'RCTSinglelineTextInputView');

}

var onlyMultiline = {
  onTextInput: true,
  children: true };






































































var DataDetectorTypes = [
'phoneNumber',
'link',
'address',
'calendarEvent',
'none',
'all'];






































































































































































var emptyFunctionThatReturnsTrue = function emptyFunctionThatReturnsTrue() {return true;};

















































































































var TextInput = require('create-react-class')({
  displayName: 'TextInput',
  statics: {
    State: {
      currentlyFocusedField: require('TextInputState').currentlyFocusedField,
      focusTextInput: require('TextInputState').focusTextInput,
      blurTextInput: require('TextInputState').blurTextInput } },


  propTypes: _objectSpread({}, require('DeprecatedViewPropTypes'), {









    autoCapitalize: require('prop-types').oneOf([
    'none',
    'sentences',
    'words',
    'characters']),

























    autoCompleteType: require('prop-types').oneOf([
    'cc-csc',
    'cc-exp',
    'cc-exp-month',
    'cc-exp-year',
    'cc-number',
    'email',
    'name',
    'password',
    'postal-code',
    'street-address',
    'tel',
    'username',
    'off']),




    autoCorrect: require('prop-types').bool,





    spellCheck: require('prop-types').bool,




    autoFocus: require('prop-types').bool,




    allowFontScaling: require('prop-types').bool,







    maxFontSizeMultiplier: require('prop-types').number,



    editable: require('prop-types').bool,





























    keyboardType: require('prop-types').oneOf([

    'default',
    'email-address',
    'numeric',
    'phone-pad',
    'number-pad',

    'ascii-capable',
    'numbers-and-punctuation',
    'url',
    'name-phone-pad',
    'decimal-pad',
    'twitter',
    'web-search',

    'visible-password']),





    keyboardAppearance: require('prop-types').oneOf(['default', 'light', 'dark']),
































    returnKeyType: require('prop-types').oneOf([

    'done',
    'go',
    'next',
    'search',
    'send',

    'none',
    'previous',

    'default',
    'emergency-call',
    'google',
    'join',
    'route',
    'yahoo']),





    returnKeyLabel: require('prop-types').string,




    maxLength: require('prop-types').number,





    numberOfLines: require('prop-types').number,








    disableFullscreenUI: require('prop-types').bool,





    enablesReturnKeyAutomatically: require('prop-types').bool,




    multiline: require('prop-types').bool,





    textBreakStrategy: require('prop-types').oneOf(['simple', 'highQuality', 'balanced']),



    onBlur: require('prop-types').func,



    onFocus: require('prop-types').func,



    onChange: require('prop-types').func,




    onChangeText: require('prop-types').func,







    onContentSizeChange: require('prop-types').func,
    onTextInput: require('prop-types').func,



    onEndEditing: require('prop-types').func,





    onSelectionChange: require('prop-types').func,




    onSubmitEditing: require('prop-types').func,







    onKeyPress: require('prop-types').func,



    onLayout: require('prop-types').func,





    onScroll: require('prop-types').func,



    placeholder: require('prop-types').string,



    placeholderTextColor: require('DeprecatedColorPropType'),





    scrollEnabled: require('prop-types').bool,




    secureTextEntry: require('prop-types').bool,



    selectionColor: require('DeprecatedColorPropType'),















    selectionState: require('prop-types').instanceOf(require('DocumentSelectionState')),




    selection: require('prop-types').shape({
      start: require('prop-types').number.isRequired,
      end: require('prop-types').number }),










    value: require('prop-types').string,





    defaultValue: require('prop-types').string,





    clearButtonMode: require('prop-types').oneOf([
    'never',
    'while-editing',
    'unless-editing',
    'always']),





    clearTextOnFocus: require('prop-types').bool,



    selectTextOnFocus: require('prop-types').bool,







    blurOnSubmit: require('prop-types').bool,

















    style: require('Text').propTypes.style,




    underlineColorAndroid: require('DeprecatedColorPropType'),












    inlineImageLeft: require('prop-types').string,





    inlineImagePadding: require('prop-types').number,








    rejectResponderTermination: require('prop-types').bool,



















    dataDetectorTypes: require('prop-types').oneOfType([
    require('prop-types').oneOf(DataDetectorTypes),
    require('prop-types').arrayOf(require('prop-types').oneOf(DataDetectorTypes))]),





    caretHidden: require('prop-types').bool,



    contextMenuHidden: require('prop-types').bool,






    inputAccessoryViewID: require('prop-types').string,





    textContentType: require('prop-types').oneOf([
    'none',
    'URL',
    'addressCity',
    'addressCityAndState',
    'addressState',
    'countryName',
    'creditCardNumber',
    'emailAddress',
    'familyName',
    'fullStreetAddress',
    'givenName',
    'jobTitle',
    'location',
    'middleName',
    'name',
    'namePrefix',
    'nameSuffix',
    'nickname',
    'organizationName',
    'postalCode',
    'streetAddressLine1',
    'streetAddressLine2',
    'sublocality',
    'telephoneNumber',
    'username',
    'password',
    'newPassword',
    'oneTimeCode']) }),


  getDefaultProps: function getDefaultProps() {
    return {
      allowFontScaling: true,
      rejectResponderTermination: true,
      underlineColorAndroid: 'transparent' };

  },




  mixins: [require('NativeMethodsMixin')],




  isFocused: function isFocused() {
    return (
      require('TextInputState').currentlyFocusedField() ===
      require('ReactNative').findNodeHandle(this._inputRef));

  },

  _inputRef: undefined,
  _focusSubscription: undefined,
  _lastNativeText: undefined,
  _lastNativeSelection: undefined,
  _rafId: null,

  componentDidMount: function componentDidMount() {
    this._lastNativeText = this.props.value;
    var tag = require('ReactNative').findNodeHandle(this._inputRef);
    if (tag != null) {

      require('TextInputState').registerInput(tag);
    }

    if (this.props.autoFocus) {
      this._rafId = requestAnimationFrame(this.focus);
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    this._focusSubscription && this._focusSubscription.remove();
    if (this.isFocused()) {
      this.blur();
    }
    var tag = require('ReactNative').findNodeHandle(this._inputRef);
    if (tag != null) {
      require('TextInputState').unregisterInput(tag);
    }
    if (this._rafId != null) {
      cancelAnimationFrame(this._rafId);
    }
  },




  clear: function clear() {
    this.setNativeProps({ text: '' });
  },

  render: function render() {
    var textInput;
    if (require('Platform').OS === 'ios') {
      textInput = require('UIManager').getViewManagerConfig('RCTVirtualText') ?
      this._renderIOS() :
      this._renderIOSLegacy();
    } else if (require('Platform').OS === 'android') {
      textInput = this._renderAndroid();
    }
    return (
      require('React').createElement(require('TextAncestor').Provider, { value: true, __source: { fileName: _jsxFileName, lineNumber: 1002 } }, textInput));

  },

  _getText: function _getText() {
    return typeof this.props.value === 'string' ?
    this.props.value :
    typeof this.props.defaultValue === 'string' ?
    this.props.defaultValue :
    '';
  },

  _setNativeRef: function _setNativeRef(ref) {
    this._inputRef = ref;
  },

  _renderIOSLegacy: function _renderIOSLegacy() {
    var textContainer;

    var props = require("@babel/runtime/helpers/extends")({}, this.props);
    props.style = [this.props.style];

    if (props.selection && props.selection.end == null) {
      props.selection = {
        start: props.selection.start,
        end: props.selection.start };

    }

    if (!props.multiline) {
      if (__DEV__) {
        for (var propKey in onlyMultiline) {
          if (props[propKey]) {
            var error = new Error(
            'TextInput prop `' +
            propKey +
            '` is only supported with multiline.');

            require('fbjs/lib/warning')(false, '%s', error.stack);
          }
        }
      }
      textContainer =
      require('React').createElement(RCTSinglelineTextInputView, require("@babel/runtime/helpers/extends")({
        ref: this._setNativeRef },
      props, {
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onSelectionChange: this._onSelectionChange,
        onSelectionChangeShouldSetResponder: emptyFunctionThatReturnsTrue,
        text: this._getText(), __source: { fileName: _jsxFileName, lineNumber: 1045 } }));


    } else {
      var children = props.children;
      var childCount = 0;
      require('React').Children.forEach(children, function () {return ++childCount;});
      require('invariant')(
      !(props.value && childCount),
      'Cannot specify both value and children.');

      if (childCount >= 1) {
        children =
        require('React').createElement(require('Text'), {
          style: props.style,
          allowFontScaling: props.allowFontScaling,
          maxFontSizeMultiplier: props.maxFontSizeMultiplier, __source: { fileName: _jsxFileName, lineNumber: 1066 } },
        children);


      }
      if (props.inputView) {
        children = [children, props.inputView];
      }
      props.style.unshift(styles.multilineInput);
      textContainer =
      require('React').createElement(RCTMultilineTextInputView, require("@babel/runtime/helpers/extends")({
        ref: this._setNativeRef },
      props, {
        children: children,
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onContentSizeChange: this.props.onContentSizeChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        onSelectionChangeShouldSetResponder: emptyFunctionThatReturnsTrue,
        text: this._getText(),
        dataDetectorTypes: this.props.dataDetectorTypes,
        onScroll: this._onScroll, __source: { fileName: _jsxFileName, lineNumber: 1079 } }));


    }

    return (
      require('React').createElement(require('TouchableWithoutFeedback'), {
        onLayout: props.onLayout,
        onPress: this._onPress,
        rejectResponderTermination: true,
        accessible: props.accessible,
        accessibilityLabel: props.accessibilityLabel,
        accessibilityRole: props.accessibilityRole,
        accessibilityStates: props.accessibilityStates,
        nativeID: this.props.nativeID,
        testID: props.testID, __source: { fileName: _jsxFileName, lineNumber: 1098 } },
      textContainer));


  },

  _renderIOS: function _renderIOS() {
    var props = require("@babel/runtime/helpers/extends")({}, this.props);
    props.style = [this.props.style];

    if (props.selection && props.selection.end == null) {
      props.selection = {
        start: props.selection.start,
        end: props.selection.start };

    }

    var RCTTextInputView = props.multiline ?
    RCTMultilineTextInputView :
    RCTSinglelineTextInputView;

    if (props.multiline) {
      props.style.unshift(styles.multilineInput);
    }

    var textContainer =
    require('React').createElement(RCTTextInputView, require("@babel/runtime/helpers/extends")({
      ref: this._setNativeRef },
    props, {
      onFocus: this._onFocus,
      onBlur: this._onBlur,
      onChange: this._onChange,
      onContentSizeChange: this.props.onContentSizeChange,
      onSelectionChange: this._onSelectionChange,
      onTextInput: this._onTextInput,
      onSelectionChangeShouldSetResponder: emptyFunctionThatReturnsTrue,
      text: this._getText(),
      dataDetectorTypes: this.props.dataDetectorTypes,
      onScroll: this._onScroll, __source: { fileName: _jsxFileName, lineNumber: 1133 } }));



    return (
      require('React').createElement(require('TouchableWithoutFeedback'), {
        onLayout: props.onLayout,
        onPress: this._onPress,
        rejectResponderTermination: props.rejectResponderTermination,
        accessible: props.accessible,
        accessibilityLabel: props.accessibilityLabel,
        accessibilityRole: props.accessibilityRole,
        accessibilityStates: props.accessibilityStates,
        nativeID: this.props.nativeID,
        testID: props.testID, __source: { fileName: _jsxFileName, lineNumber: 1150 } },
      textContainer));


  },

  _renderAndroid: function _renderAndroid() {
    var props = require("@babel/runtime/helpers/extends")({}, this.props);
    props.style = [this.props.style];
    props.autoCapitalize = require('UIManager').getViewManagerConfig(
    'AndroidTextInput').
    Constants.AutoCapitalizationType[props.autoCapitalize || 'sentences'];



    var children = this.props.children;
    var childCount = 0;
    require('React').Children.forEach(children, function () {return ++childCount;});
    require('invariant')(
    !(this.props.value && childCount),
    'Cannot specify both value and children.');

    if (childCount > 1) {
      children = require('React').createElement(require('Text'), { __source: { fileName: _jsxFileName, lineNumber: 1182 } }, children);
    }

    if (props.selection && props.selection.end == null) {
      props.selection = {
        start: props.selection.start,
        end: props.selection.start };

    }

    var textContainer =
    require('React').createElement(AndroidTextInput, require("@babel/runtime/helpers/extends")({
      ref: this._setNativeRef },
    props, {
      mostRecentEventCount: 0,
      onFocus: this._onFocus,
      onBlur: this._onBlur,
      onChange: this._onChange,
      onSelectionChange: this._onSelectionChange,
      onTextInput: this._onTextInput,
      text: this._getText(),
      children: children,
      disableFullscreenUI: this.props.disableFullscreenUI,
      textBreakStrategy: this.props.textBreakStrategy,
      onScroll: this._onScroll, __source: { fileName: _jsxFileName, lineNumber: 1193 } }));



    return (
      require('React').createElement(require('TouchableWithoutFeedback'), {
        onLayout: props.onLayout,
        onPress: this._onPress,
        accessible: this.props.accessible,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityRole: this.props.accessibilityRole,
        accessibilityStates: this.props.accessibilityStates,
        nativeID: this.props.nativeID,
        testID: this.props.testID, __source: { fileName: _jsxFileName, lineNumber: 1211 } },
      textContainer));


  },

  _onFocus: function _onFocus(event) {
    if (this.props.onFocus) {
      this.props.onFocus(event);
    }

    if (this.props.selectionState) {
      this.props.selectionState.focus();
    }
  },

  _onPress: function _onPress(event) {
    if (this.props.editable || this.props.editable === undefined) {
      this.focus();
    }
  },

  _onChange: function _onChange(event) {


    if (this._inputRef && this._inputRef.setNativeProps) {
      this._inputRef.setNativeProps({
        mostRecentEventCount: event.nativeEvent.eventCount });

    }

    var text = event.nativeEvent.text;
    this.props.onChange && this.props.onChange(event);
    this.props.onChangeText && this.props.onChangeText(text);

    if (!this._inputRef) {


      return;
    }

    this._lastNativeText = text;
    this.forceUpdate();
  },

  _onSelectionChange: function _onSelectionChange(event) {
    this.props.onSelectionChange && this.props.onSelectionChange(event);

    if (!this._inputRef) {


      return;
    }

    this._lastNativeSelection = event.nativeEvent.selection;

    if (this.props.selection || this.props.selectionState) {
      this.forceUpdate();
    }
  },

  componentDidUpdate: function componentDidUpdate() {



    var nativeProps = {};

    if (
    this._lastNativeText !== this.props.value &&
    typeof this.props.value === 'string')
    {
      nativeProps.text = this.props.value;
    }var



    selection = this.props.selection;
    if (
    this._lastNativeSelection &&
    selection && (
    this._lastNativeSelection.start !== selection.start ||
    this._lastNativeSelection.end !== selection.end))
    {
      nativeProps.selection = this.props.selection;
    }

    if (
    Object.keys(nativeProps).length > 0 &&
    this._inputRef &&
    this._inputRef.setNativeProps)
    {
      this._inputRef.setNativeProps(nativeProps);
    }

    if (this.props.selectionState && selection) {
      this.props.selectionState.update(selection.start, selection.end);
    }
  },

  _onBlur: function _onBlur(event) {


    this.blur();
    if (this.props.onBlur) {
      this.props.onBlur(event);
    }

    if (this.props.selectionState) {
      this.props.selectionState.blur();
    }
  },

  _onTextInput: function _onTextInput(event) {
    this.props.onTextInput && this.props.onTextInput(event);
  },

  _onScroll: function _onScroll(event) {
    this.props.onScroll && this.props.onScroll(event);
  } });var


InternalTextInputType = function (_ReactNative$NativeCo) {require("@babel/runtime/helpers/inherits")(InternalTextInputType, _ReactNative$NativeCo);function InternalTextInputType() {require("@babel/runtime/helpers/classCallCheck")(this, InternalTextInputType);return require("@babel/runtime/helpers/possibleConstructorReturn")(this, require("@babel/runtime/helpers/getPrototypeOf")(InternalTextInputType).apply(this, arguments));}require("@babel/runtime/helpers/createClass")(InternalTextInputType, [{ key: "clear", value: function clear()
    {} }, { key: "isFocused", value: function isFocused()


    {} }]);return InternalTextInputType;}(require('ReactNative').NativeComponent);


var TypedTextInput = TextInput;

var styles = require('StyleSheet').create({
  multilineInput: {



    paddingTop: 5 } });



module.exports = TypedTextInput;