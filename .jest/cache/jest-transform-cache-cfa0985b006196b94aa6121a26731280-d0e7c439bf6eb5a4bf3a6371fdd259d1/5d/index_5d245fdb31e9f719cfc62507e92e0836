1395b5cb76fe662224a13dd4d6fe9e0e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _telemetry = _interopRequireDefault(require("./telemetry"));

var _url2 = _interopRequireDefault(require("url"));

var _base = _interopRequireDefault(require("base-64"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Client = function () {
  function Client(options) {
    (0, _classCallCheck2.default)(this, Client);
    var baseUrl = options.baseUrl,
        _options$telemetry = options.telemetry,
        telemetry = _options$telemetry === void 0 ? {} : _options$telemetry,
        token = options.token;

    if (!baseUrl) {
      throw new Error('Missing Auth0 domain');
    }

    var _telemetry$name = telemetry.name,
        name = _telemetry$name === void 0 ? _telemetry.default.name : _telemetry$name,
        _telemetry$version = telemetry.version,
        version = _telemetry$version === void 0 ? _telemetry.default.version : _telemetry$version;
    this.telemetry = {
      name: name,
      version: version
    };

    if (name !== _telemetry.default.name) {
      this.telemetry.env = {};
      this.telemetry.env[_telemetry.default.name] = _telemetry.default.version;
    }

    var parsed = _url2.default.parse(baseUrl);

    this.baseUrl = parsed.protocol === 'https:' || parsed.protocol === 'http:' ? baseUrl : "https://" + baseUrl;
    this.domain = parsed.hostname || baseUrl;

    if (token) {
      this.bearer = "Bearer " + token;
    }
  }

  (0, _createClass2.default)(Client, [{
    key: "post",
    value: function post(path, body) {
      return this.request('POST', this.url(path), body);
    }
  }, {
    key: "patch",
    value: function patch(path, body) {
      return this.request('PATCH', this.url(path), body);
    }
  }, {
    key: "get",
    value: function get(path, query) {
      return this.request('GET', this.url(path, query));
    }
  }, {
    key: "url",
    value: function url(path, query) {
      var includeTelemetry = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var endpoint = _url2.default.resolve(this.baseUrl, path);

      if (query && query.length !== 0 || includeTelemetry) {
        var parsed = _url2.default.parse(endpoint);

        parsed.query = query || {};

        if (includeTelemetry) {
          parsed.query.auth0Client = this._encodedTelemetry();
        }

        endpoint = _url2.default.format(parsed);
      }

      return endpoint;
    }
  }, {
    key: "request",
    value: function request(method, url, body) {
      var options = {
        method: method,
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          'Auth0-Client': this._encodedTelemetry()
        }
      };

      if (this.bearer) {
        options.headers['Authorization'] = this.bearer;
      }

      if (body) {
        options.body = JSON.stringify(body);
      }

      return fetch(url, options).then(function (response) {
        var payload = {
          status: response.status,
          ok: response.ok,
          headers: response.headers
        };
        return response.json().then(function (json) {
          return _objectSpread({}, payload, {
            json: json
          });
        }).catch(function () {
          return response.text().then(function (text) {
            return _objectSpread({}, payload, {
              text: text
            });
          }).catch(function () {
            return _objectSpread({}, payload, {
              text: response.statusText
            });
          });
        });
      });
    }
  }, {
    key: "_encodedTelemetry",
    value: function _encodedTelemetry() {
      return _base.default.encode(JSON.stringify(this.telemetry));
    }
  }]);
  return Client;
}();

exports.default = Client;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIkNsaWVudCIsIm9wdGlvbnMiLCJiYXNlVXJsIiwidGVsZW1ldHJ5IiwidG9rZW4iLCJFcnJvciIsIm5hbWUiLCJkZWZhdWx0cyIsInZlcnNpb24iLCJlbnYiLCJwYXJzZWQiLCJ1cmwiLCJwYXJzZSIsInByb3RvY29sIiwiZG9tYWluIiwiaG9zdG5hbWUiLCJiZWFyZXIiLCJwYXRoIiwiYm9keSIsInJlcXVlc3QiLCJxdWVyeSIsImluY2x1ZGVUZWxlbWV0cnkiLCJlbmRwb2ludCIsInJlc29sdmUiLCJsZW5ndGgiLCJhdXRoMENsaWVudCIsIl9lbmNvZGVkVGVsZW1ldHJ5IiwiZm9ybWF0IiwibWV0aG9kIiwiaGVhZGVycyIsIkFjY2VwdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsInBheWxvYWQiLCJzdGF0dXMiLCJvayIsImpzb24iLCJjYXRjaCIsInRleHQiLCJzdGF0dXNUZXh0IiwiYmFzZTY0IiwiZW5jb2RlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7OztJQUVxQkEsTTtBQUNuQixrQkFBWUMsT0FBWixFQUFxQjtBQUFBO0FBQUEsUUFDWEMsT0FEVyxHQUN3QkQsT0FEeEIsQ0FDWEMsT0FEVztBQUFBLDZCQUN3QkQsT0FEeEIsQ0FDRkUsU0FERTtBQUFBLFFBQ0ZBLFNBREUsbUNBQ1UsRUFEVjtBQUFBLFFBQ2NDLEtBRGQsR0FDd0JILE9BRHhCLENBQ2NHLEtBRGQ7O0FBRW5CLFFBQUksQ0FBQ0YsT0FBTCxFQUFjO0FBQ1osWUFBTSxJQUFJRyxLQUFKLENBQVUsc0JBQVYsQ0FBTjtBQUNEOztBQUprQiwwQkFLMENGLFNBTDFDLENBS1hHLElBTFc7QUFBQSxRQUtYQSxJQUxXLGdDQUtKQyxtQkFBU0QsSUFMTDtBQUFBLDZCQUswQ0gsU0FMMUMsQ0FLV0ssT0FMWDtBQUFBLFFBS1dBLE9BTFgsbUNBS3FCRCxtQkFBU0MsT0FMOUI7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O0FBQ2RDLFVBQUFBLE1BQU0sRUFBRUYsUUFBUSxDQUFDRSxNQURIO0FBRWRDLFVBQUFBLEVBQUUsRUFBRUgsUUFBUSxDQUFDRyxFQUZDO0FBR2RULFVBQUFBLE9BQU8sRUFBRU0sUUFBUSxDQUFDTjtBQUhKLFNBQWhCO0FBS0EsZUFBT00sUUFBUSxDQUNaSSxJQURJLEdBRUpMLElBRkksQ0FFQyxVQUFBSyxJQUFJLEVBQUk7QUFDWixtQ0FBWUgsT0FBWjtBQUFxQkcsWUFBQUEsSUFBSSxFQUFKQTtBQUFyQjtBQUNELFNBSkksRUFLSkMsS0FMSSxDQUtFLFlBQU07QUFDWCxpQkFBT0wsUUFBUSxDQUNaTSxJQURJLEdBRUpQLElBRkksQ0FFQyxVQUFBTyxJQUFJLEVBQUk7QUFDWixxQ0FBWUwsT0FBWjtBQUFxQkssY0FBQUEsSUFBSSxFQUFKQTtBQUFyQjtBQUNELFdBSkksRUFLSkQsS0FMSSxDQUtFLFlBQU07QUFDWCxxQ0FBWUosT0FBWjtBQUFxQkssY0FBQUEsSUFBSSxFQUFFTixRQUFRLENBQUNPO0FBQXBDO0FBQ0QsV0FQSSxDQUFQO0FBUUQsU0FkSSxDQUFQO0FBZUQsT0FyQk0sQ0FBUDtBQXNCRDs7O3dDQUVtQjtBQUNsQixhQUFPQyxjQUFPQyxNQUFQLENBQWNiLElBQUksQ0FBQ0MsU0FBTCxDQUFlLEtBQUs3QixTQUFwQixDQUFkLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWZhdWx0cyBmcm9tICcuL3RlbGVtZXRyeSc7XG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgYmFzZTY0IGZyb20gJ2Jhc2UtNjQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDbGllbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgY29uc3QgeyBiYXNlVXJsLCB0ZWxlbWV0cnkgPSB7fSwgdG9rZW4gfSA9IG9wdGlvbnM7XG4gICAgaWYgKCFiYXNlVXJsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgQXV0aDAgZG9tYWluJyk7XG4gICAgfVxuICAgIGNvbnN0IHsgbmFtZSA9IGRlZmF1bHRzLm5hbWUsIHZlcnNpb24gPSBkZWZhdWx0cy52ZXJzaW9uIH0gPSB0ZWxlbWV0cnk7XG4gICAgdGhpcy50ZWxlbWV0cnkgPSB7IG5hbWUsIHZlcnNpb24gfTtcbiAgICBpZiAobmFtZSAhPT0gZGVmYXVsdHMubmFtZSkge1xuICAgICAgdGhpcy50ZWxlbWV0cnkuZW52ID0ge307XG4gICAgICB0aGlzLnRlbGVtZXRyeS5lbnZbZGVmYXVsdHMubmFtZV0gPSBkZWZhdWx0cy52ZXJzaW9uO1xuICAgIH1cbiAgICBjb25zdCBwYXJzZWQgPSB1cmwucGFyc2UoYmFzZVVybCk7XG4gICAgdGhpcy5iYXNlVXJsID1cbiAgICAgIHBhcnNlZC5wcm90b2NvbCA9PT0gJ2h0dHBzOicgfHwgcGFyc2VkLnByb3RvY29sID09PSAnaHR0cDonXG4gICAgICAgID8gYmFzZVVybFxuICAgICAgICA6IGBodHRwczovLyR7YmFzZVVybH1gO1xuICAgIHRoaXMuZG9tYWluID0gcGFyc2VkLmhvc3RuYW1lIHx8IGJhc2VVcmw7XG4gICAgaWYgKHRva2VuKSB7XG4gICAgICB0aGlzLmJlYXJlciA9IGBCZWFyZXIgJHt0b2tlbn1gO1xuICAgIH1cbiAgfVxuXG4gIHBvc3QocGF0aCwgYm9keSkge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ1BPU1QnLCB0aGlzLnVybChwYXRoKSwgYm9keSk7XG4gIH1cblxuICBwYXRjaChwYXRoLCBib2R5KSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnUEFUQ0gnLCB0aGlzLnVybChwYXRoKSwgYm9keSk7XG4gIH1cblxuICBnZXQocGF0aCwgcXVlcnkpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdHRVQnLCB0aGlzLnVybChwYXRoLCBxdWVyeSkpO1xuICB9XG5cbiAgdXJsKHBhdGgsIHF1ZXJ5LCBpbmNsdWRlVGVsZW1ldHJ5ID0gZmFsc2UpIHtcbiAgICBsZXQgZW5kcG9pbnQgPSB1cmwucmVzb2x2ZSh0aGlzLmJhc2VVcmwsIHBhdGgpO1xuICAgIGlmICgocXVlcnkgJiYgcXVlcnkubGVuZ3RoICE9PSAwKSB8fCBpbmNsdWRlVGVsZW1ldHJ5KSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSB1cmwucGFyc2UoZW5kcG9pbnQpO1xuICAgICAgcGFyc2VkLnF1ZXJ5ID0gcXVlcnkgfHwge307XG4gICAgICBpZiAoaW5jbHVkZVRlbGVtZXRyeSkge1xuICAgICAgICBwYXJzZWQucXVlcnkuYXV0aDBDbGllbnQgPSB0aGlzLl9lbmNvZGVkVGVsZW1ldHJ5KCk7XG4gICAgICB9XG4gICAgICBlbmRwb2ludCA9IHVybC5mb3JtYXQocGFyc2VkKTtcbiAgICB9XG4gICAgcmV0dXJuIGVuZHBvaW50O1xuICB9XG5cbiAgcmVxdWVzdChtZXRob2QsIHVybCwgYm9keSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdBdXRoMC1DbGllbnQnOiB0aGlzLl9lbmNvZGVkVGVsZW1ldHJ5KClcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmICh0aGlzLmJlYXJlcikge1xuICAgICAgb3B0aW9ucy5oZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSB0aGlzLmJlYXJlcjtcbiAgICB9XG4gICAgaWYgKGJvZHkpIHtcbiAgICAgIG9wdGlvbnMuYm9keSA9IEpTT04uc3RyaW5naWZ5KGJvZHkpO1xuICAgIH1cbiAgICByZXR1cm4gZmV0Y2godXJsLCBvcHRpb25zKS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICBvazogcmVzcG9uc2Uub2ssXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlLmhlYWRlcnNcbiAgICAgIH07XG4gICAgICByZXR1cm4gcmVzcG9uc2VcbiAgICAgICAgLmpzb24oKVxuICAgICAgICAudGhlbihqc29uID0+IHtcbiAgICAgICAgICByZXR1cm4geyAuLi5wYXlsb2FkLCBqc29uIH07XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlXG4gICAgICAgICAgICAudGV4dCgpXG4gICAgICAgICAgICAudGhlbih0ZXh0ID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHsgLi4ucGF5bG9hZCwgdGV4dCB9O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiB7IC4uLnBheWxvYWQsIHRleHQ6IHJlc3BvbnNlLnN0YXR1c1RleHQgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIF9lbmNvZGVkVGVsZW1ldHJ5KCkge1xuICAgIHJldHVybiBiYXNlNjQuZW5jb2RlKEpTT04uc3RyaW5naWZ5KHRoaXMudGVsZW1ldHJ5KSk7XG4gIH1cbn1cbiJdfQ==