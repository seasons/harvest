2424e00a10fd2c93d45251750e00a73b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reactNative = require("react-native");

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

var PRESS_RETENTION_OFFSET = {
  top: 20,
  left: 20,
  right: 20,
  bottom: 30
};
var Mixin = _reactNative.Touchable.Mixin;
var _touchableHandleStartShouldSetResponder = Mixin.touchableHandleStartShouldSetResponder,
    _touchableHandleResponderTerminationRequest = Mixin.touchableHandleResponderTerminationRequest,
    _touchableHandleResponderGrant = Mixin.touchableHandleResponderGrant,
    _touchableHandleResponderMove = Mixin.touchableHandleResponderMove,
    _touchableHandleResponderRelease = Mixin.touchableHandleResponderRelease,
    _touchableHandleResponderTerminate = Mixin.touchableHandleResponderTerminate;

var _default = _objectSpread({}, Mixin, {
  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder(e) {
    var onStartShouldSetResponder = this.props.onStartShouldSetResponder;

    if (onStartShouldSetResponder) {
      return onStartShouldSetResponder(e);
    } else {
      return _touchableHandleStartShouldSetResponder.call(this, e);
    }
  },
  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest(e) {
    var onResponderTerminationRequest = this.props.onResponderTerminationRequest;

    if (onResponderTerminationRequest) {
      return onResponderTerminationRequest(e);
    } else {
      return _touchableHandleResponderTerminationRequest.call(this, e);
    }
  },
  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
    var onResponderGrant = this.props.onResponderGrant;

    if (onResponderGrant) {
      return onResponderGrant(e);
    } else {
      return _touchableHandleResponderGrant.call(this, e);
    }
  },
  touchableHandleResponderMove: function touchableHandleResponderMove(e) {
    var onResponderMove = this.props.onResponderMove;

    if (onResponderMove) {
      return onResponderMove(e);
    } else {
      return _touchableHandleResponderMove.call(this, e);
    }
  },
  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
    var onResponderRelease = this.props.onResponderRelease;

    if (onResponderRelease) {
      return onResponderRelease(e);
    } else {
      return _touchableHandleResponderRelease.call(this, e);
    }
  },
  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
    var onResponderTerminate = this.props.onResponderTerminate;

    if (onResponderTerminate) {
      return onResponderTerminate(e);
    } else {
      return _touchableHandleResponderTerminate.call(this, e);
    }
  },
  touchableHandlePress: function touchableHandlePress(e) {
    var onPress = this.props.onPress;
    onPress && onPress(e);
  },
  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    var onPressIn = this.props.onPressIn;
    onPressIn && onPressIn(e);
  },
  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    var onPressOut = this.props.onPressOut;
    onPressOut && onPressOut(e);
  },
  touchableHandleLongPress: function touchableHandleLongPress(e) {
    var onLongPress = this.props.onLongPress;
    onLongPress && onLongPress(e);
  },
  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    var pressRetentionOffset = this.props.pressRetentionOffset;
    return pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },
  touchableGetHitSlop: function touchableGetHitSlop() {
    var hitSlop = this.props.hitSlop;
    return hitSlop;
  },
  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    var delayPressIn = this.props.delayPressIn;
    return delayPressIn || 0;
  },
  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    var delayLongPress = this.props.delayLongPress;
    return delayLongPress === 0 ? 0 : delayLongPress || 500;
  },
  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    var delayPressOut = this.props.delayPressOut;
    return delayPressOut || 0;
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN2Z1RvdWNoYWJsZU1peGluLnRzIl0sIm5hbWVzIjpbIlBSRVNTX1JFVEVOVElPTl9PRkZTRVQiLCJ0b3AiLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJNaXhpbiIsIlRvdWNoYWJsZSIsInRvdWNoYWJsZUhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyIiwidG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0IiwidG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyR3JhbnQiLCJ0b3VjaGFibGVIYW5kbGVSZXNwb25kZXJNb3ZlIiwidG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyUmVsZWFzZSIsInRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclRlcm1pbmF0ZSIsIm9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXIiLCJvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdCIsIm9uUmVzcG9uZGVyR3JhbnQiLCJvblJlc3BvbmRlck1vdmUiLCJvblJlc3BvbmRlclJlbGVhc2UiLCJvblJlc3BvbmRlclRlcm1pbmF0ZSIsInRvdWNoYWJsZUhhbmRsZVByZXNzIiwib25QcmVzcyIsInRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzSW4iLCJvblByZXNzSW4iLCJ0b3VjaGFibGVIYW5kbGVBY3RpdmVQcmVzc091dCIsIm9uUHJlc3NPdXQiLCJ0b3VjaGFibGVIYW5kbGVMb25nUHJlc3MiLCJvbkxvbmdQcmVzcyIsInRvdWNoYWJsZUdldFByZXNzUmVjdE9mZnNldCIsInByZXNzUmV0ZW50aW9uT2Zmc2V0IiwidG91Y2hhYmxlR2V0SGl0U2xvcCIsImhpdFNsb3AiLCJ0b3VjaGFibGVHZXRIaWdobGlnaHREZWxheU1TIiwiZGVsYXlQcmVzc0luIiwidG91Y2hhYmxlR2V0TG9uZ1ByZXNzRGVsYXlNUyIsImRlbGF5TG9uZ1ByZXNzIiwidG91Y2hhYmxlR2V0UHJlc3NPdXREZWxheU1TIiwiZGVsYXlQcmVzc091dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7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c0IsR0FDVixLQURVLEtBQ1YsQ0FEVSxPQUFBO0FBRTlCLFdBQUEsT0FBQTs7QUFHRkMsRUFBQUEsNEJBQTRCLEVBQUUsU0FBQSw0QkFBQSxHQUFXO0FBQUEsUUFDL0JDLFlBRCtCLEdBQ2QsS0FEYyxLQUNkLENBRGMsWUFBQTtBQUV2QyxXQUFPQSxZQUFZLElBQW5CLENBQUE7O0FBR0ZDLEVBQUFBLDRCQUE0QixFQUFFLFNBQUEsNEJBQUEsR0FBVztBQUFBLFFBQy9CQyxjQUQrQixHQUNaLEtBRFksS0FDWixDQURZLGNBQUE7QUFFdkMsV0FBT0EsY0FBYyxLQUFkQSxDQUFBQSxHQUFBQSxDQUFBQSxHQUEyQkEsY0FBYyxJQUFoRCxHQUFBOztBQUdGQyxFQUFBQSwyQkFBMkIsRUFBRSxTQUFBLDJCQUFBLEdBQVc7QUFBQSxRQUM5QkMsYUFEOEIsR0FDWixLQURZLEtBQ1osQ0FEWSxhQUFBO0FBRXRDLFdBQU9BLGFBQWEsSUFBcEIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IFRvdWNoYWJsZSwgR2VzdHVyZVJlc3BvbmRlckV2ZW50IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmNvbnN0IFBSRVNTX1JFVEVOVElPTl9PRkZTRVQgPSB7IHRvcDogMjAsIGxlZnQ6IDIwLCByaWdodDogMjAsIGJvdHRvbTogMzAgfTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IHsgTWl4aW4gfSA9IFRvdWNoYWJsZTtcbmNvbnN0IHtcbiAgdG91Y2hhYmxlSGFuZGxlU3RhcnRTaG91bGRTZXRSZXNwb25kZXIsXG4gIHRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdCxcbiAgdG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyR3JhbnQsXG4gIHRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlck1vdmUsXG4gIHRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclJlbGVhc2UsXG4gIHRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclRlcm1pbmF0ZSxcbn0gPSBNaXhpbjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAuLi5NaXhpbixcblxuICB0b3VjaGFibGVIYW5kbGVTdGFydFNob3VsZFNldFJlc3BvbmRlcjogZnVuY3Rpb24oZTogR2VzdHVyZVJlc3BvbmRlckV2ZW50KSB7XG4gICAgY29uc3QgeyBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyKSB7XG4gICAgICByZXR1cm4gb25TdGFydFNob3VsZFNldFJlc3BvbmRlcihlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRvdWNoYWJsZUhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyLmNhbGwodGhpcywgZSk7XG4gICAgfVxuICB9LFxuXG4gIHRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdDogZnVuY3Rpb24oXG4gICAgZTogR2VzdHVyZVJlc3BvbmRlckV2ZW50LFxuICApIHtcbiAgICBjb25zdCB7IG9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0IH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdCkge1xuICAgICAgcmV0dXJuIG9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0KGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0LmNhbGwodGhpcywgZSk7XG4gICAgfVxuICB9LFxuXG4gIHRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlckdyYW50OiBmdW5jdGlvbihlOiBHZXN0dXJlUmVzcG9uZGVyRXZlbnQpIHtcbiAgICBjb25zdCB7IG9uUmVzcG9uZGVyR3JhbnQgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKG9uUmVzcG9uZGVyR3JhbnQpIHtcbiAgICAgIHJldHVybiBvblJlc3BvbmRlckdyYW50KGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyR3JhbnQuY2FsbCh0aGlzLCBlKTtcbiAgICB9XG4gIH0sXG5cbiAgdG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyTW92ZTogZnVuY3Rpb24oZTogR2VzdHVyZVJlc3BvbmRlckV2ZW50KSB7XG4gICAgY29uc3QgeyBvblJlc3BvbmRlck1vdmUgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKG9uUmVzcG9uZGVyTW92ZSkge1xuICAgICAgcmV0dXJuIG9uUmVzcG9uZGVyTW92ZShlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlck1vdmUuY2FsbCh0aGlzLCBlKTtcbiAgICB9XG4gIH0sXG5cbiAgdG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyUmVsZWFzZTogZnVuY3Rpb24oZTogR2VzdHVyZVJlc3BvbmRlckV2ZW50KSB7XG4gICAgY29uc3QgeyBvblJlc3BvbmRlclJlbGVhc2UgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKG9uUmVzcG9uZGVyUmVsZWFzZSkge1xuICAgICAgcmV0dXJuIG9uUmVzcG9uZGVyUmVsZWFzZShlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclJlbGVhc2UuY2FsbCh0aGlzLCBlKTtcbiAgICB9XG4gIH0sXG5cbiAgdG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyVGVybWluYXRlOiBmdW5jdGlvbihlOiBHZXN0dXJlUmVzcG9uZGVyRXZlbnQpIHtcbiAgICBjb25zdCB7IG9uUmVzcG9uZGVyVGVybWluYXRlIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChvblJlc3BvbmRlclRlcm1pbmF0ZSkge1xuICAgICAgcmV0dXJuIG9uUmVzcG9uZGVyVGVybWluYXRlKGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyVGVybWluYXRlLmNhbGwodGhpcywgZSk7XG4gICAgfVxuICB9LFxuXG4gIHRvdWNoYWJsZUhhbmRsZVByZXNzOiBmdW5jdGlvbihlOiBHZXN0dXJlUmVzcG9uZGVyRXZlbnQpIHtcbiAgICBjb25zdCB7IG9uUHJlc3MgfSA9IHRoaXMucHJvcHM7XG4gICAgb25QcmVzcyAmJiBvblByZXNzKGUpO1xuICB9LFxuXG4gIHRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzSW46IGZ1bmN0aW9uKGU6IEdlc3R1cmVSZXNwb25kZXJFdmVudCkge1xuICAgIGNvbnN0IHsgb25QcmVzc0luIH0gPSB0aGlzLnByb3BzO1xuICAgIG9uUHJlc3NJbiAmJiBvblByZXNzSW4oZSk7XG4gIH0sXG5cbiAgdG91Y2hhYmxlSGFuZGxlQWN0aXZlUHJlc3NPdXQ6IGZ1bmN0aW9uKGU6IEdlc3R1cmVSZXNwb25kZXJFdmVudCkge1xuICAgIGNvbnN0IHsgb25QcmVzc091dCB9ID0gdGhpcy5wcm9wcztcbiAgICBvblByZXNzT3V0ICYmIG9uUHJlc3NPdXQoZSk7XG4gIH0sXG5cbiAgdG91Y2hhYmxlSGFuZGxlTG9uZ1ByZXNzOiBmdW5jdGlvbihlOiBHZXN0dXJlUmVzcG9uZGVyRXZlbnQpIHtcbiAgICBjb25zdCB7IG9uTG9uZ1ByZXNzIH0gPSB0aGlzLnByb3BzO1xuICAgIG9uTG9uZ1ByZXNzICYmIG9uTG9uZ1ByZXNzKGUpO1xuICB9LFxuXG4gIHRvdWNoYWJsZUdldFByZXNzUmVjdE9mZnNldDogZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgeyBwcmVzc1JldGVudGlvbk9mZnNldCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gcHJlc3NSZXRlbnRpb25PZmZzZXQgfHwgUFJFU1NfUkVURU5USU9OX09GRlNFVDtcbiAgfSxcblxuICB0b3VjaGFibGVHZXRIaXRTbG9wOiBmdW5jdGlvbigpIHtcbiAgICBjb25zdCB7IGhpdFNsb3AgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIGhpdFNsb3A7XG4gIH0sXG5cbiAgdG91Y2hhYmxlR2V0SGlnaGxpZ2h0RGVsYXlNUzogZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgeyBkZWxheVByZXNzSW4gfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIGRlbGF5UHJlc3NJbiB8fCAwO1xuICB9LFxuXG4gIHRvdWNoYWJsZUdldExvbmdQcmVzc0RlbGF5TVM6IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHsgZGVsYXlMb25nUHJlc3MgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIGRlbGF5TG9uZ1ByZXNzID09PSAwID8gMCA6IGRlbGF5TG9uZ1ByZXNzIHx8IDUwMDtcbiAgfSxcblxuICB0b3VjaGFibGVHZXRQcmVzc091dERlbGF5TVM6IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHsgZGVsYXlQcmVzc091dCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gZGVsYXlQcmVzc091dCB8fCAwO1xuICB9LFxufTtcbiJdfQ==