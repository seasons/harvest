a2e951dba28b55f6068502574dc8ea6e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = extractStroke;

var _extractBrush = _interopRequireDefault(require("./extractBrush"));

var _extractOpacity = _interopRequireDefault(require("./extractOpacity"));

var _extractLengthList = _interopRequireDefault(require("./extractLengthList"));

var caps = {
  butt: 0,
  square: 2,
  round: 1
};
var joins = {
  miter: 0,
  bevel: 2,
  round: 1
};
var vectorEffects = {
  none: 0,
  default: 0,
  nonScalingStroke: 1,
  'non-scaling-stroke': 1,
  inherit: 2,
  uri: 3
};

function extractStroke(props, styleProperties) {
  var stroke = props.stroke,
      strokeOpacity = props.strokeOpacity,
      strokeLinecap = props.strokeLinecap,
      strokeLinejoin = props.strokeLinejoin,
      strokeDasharray = props.strokeDasharray,
      strokeWidth = props.strokeWidth,
      strokeDashoffset = props.strokeDashoffset,
      strokeMiterlimit = props.strokeMiterlimit,
      vectorEffect = props.vectorEffect;

  if (stroke != null) {
    styleProperties.push('stroke');
  }

  if (strokeWidth != null) {
    styleProperties.push('strokeWidth');
  }

  if (strokeOpacity != null) {
    styleProperties.push('strokeOpacity');
  }

  if (strokeDasharray != null) {
    styleProperties.push('strokeDasharray');
  }

  if (strokeDashoffset != null) {
    styleProperties.push('strokeDashoffset');
  }

  if (strokeLinecap != null) {
    styleProperties.push('strokeLinecap');
  }

  if (strokeLinejoin != null) {
    styleProperties.push('strokeLinejoin');
  }

  if (strokeMiterlimit != null) {
    styleProperties.push('strokeMiterlimit');
  }

  var strokeDash = !strokeDasharray || strokeDasharray === 'none' ? null : (0, _extractLengthList.default)(strokeDasharray);
  return {
    stroke: (0, _extractBrush.default)(stroke),
    strokeOpacity: (0, _extractOpacity.default)(strokeOpacity),
    strokeLinecap: strokeLinecap && caps[strokeLinecap] || 0,
    strokeLinejoin: strokeLinejoin && joins[strokeLinejoin] || 0,
    strokeDasharray: strokeDash && strokeDash.length % 2 === 1 ? strokeDash.concat(strokeDash) : strokeDash,
    strokeWidth: strokeWidth != null ? strokeWidth : 1,
    strokeDashoffset: strokeDasharray && strokeDashoffset ? +strokeDashoffset || 0 : null,
    strokeMiterlimit: (strokeMiterlimit && typeof strokeMiterlimit !== 'number' ? parseFloat(strokeMiterlimit) : strokeMiterlimit) || 4,
    vectorEffect: vectorEffect && vectorEffects[vectorEffect] || 0
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4dHJhY3RTdHJva2UudHMiXSwibmFtZXMiOlsiY2FwcyIsImJ1dHQiLCJzcXVhcmUiLCJyb3VuZCIsImpvaW5zIiwibWl0ZXIiLCJiZXZlbCIsInZlY3RvckVmZmVjdHMiLCJub25lIiwiZGVmYXVsdCIsIm5vblNjYWxpbmdTdHJva2UiLCJpbmhlcml0IiwidXJpIiwic3Ryb2tlIiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZUxpbmVjYXAiLCJzdHJva2VMaW5lam9pbiIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZVdpZHRoIiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJ2ZWN0b3JFZmZlY3QiLCJwcm9wcyIsInN0eWxlUHJvcGVydGllcyIsInN0cm9rZURhc2giLCJwYXJzZUZsb2F0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQSxhQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLGtCQUFBLENBQUE7O0FBQ0EsSUFBQSxlQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLG9CQUFBLENBQUE7O0FBQ0EsSUFBQSxrQkFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSx1QkFBQSxDQUFBOztBQUdBLElBQU1BLElBQUksR0FBRztBQUNYQyxFQUFBQSxJQUFJLEVBRE8sQ0FBQTtBQUVYQyxFQUFBQSxNQUFNLEVBRkssQ0FBQTtBQUdYQyxFQUFBQSxLQUFLLEVBSFA7QUFBYSxDQUFiO0FBTUEsSUFBTUMsS0FBSyxHQUFHO0FBQ1pDLEVBQUFBLEtBQUssRUFETyxDQUFBO0FBRVpDLEVBQUFBLEtBQUssRUFGTyxDQUFBO0FBR1pILEVBQUFBLEtBQUssRUFIUDtBQUFjLENBQWQ7QUFNQSxJQUFNSSxhQUFhLEdBQUc7QUFDcEJDLEVBQUFBLElBQUksRUFEZ0IsQ0FBQTtBQUVwQkMsRUFBQUEsT0FBTyxFQUZhLENBQUE7QUFHcEJDLEVBQUFBLGdCQUFnQixFQUhJLENBQUE7QUFJcEIsd0JBSm9CLENBQUE7QUFLcEJDLEVBQUFBLE9BQU8sRUFMYSxD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Q0FEYkwsZ0JBQ2EsQ0FEYkEsR0FBRCxnQkFBQSxLQWJHLENBQUE7QUFnQkxDLElBQUFBLFlBQVksRUFBR0EsWUFBWSxJQUFJZCxhQUFhLENBQTlCLFlBQThCLENBQTdCYyxJQWhCakI7QUFBTyxHQUFQO0FBa0JEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4dHJhY3RCcnVzaCBmcm9tICcuL2V4dHJhY3RCcnVzaCc7XG5pbXBvcnQgZXh0cmFjdE9wYWNpdHkgZnJvbSAnLi9leHRyYWN0T3BhY2l0eSc7XG5pbXBvcnQgZXh0cmFjdExlbmd0aExpc3QgZnJvbSAnLi9leHRyYWN0TGVuZ3RoTGlzdCc7XG5pbXBvcnQgeyBTdHJva2VQcm9wcyB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBjYXBzID0ge1xuICBidXR0OiAwLFxuICBzcXVhcmU6IDIsXG4gIHJvdW5kOiAxLFxufTtcblxuY29uc3Qgam9pbnMgPSB7XG4gIG1pdGVyOiAwLFxuICBiZXZlbDogMixcbiAgcm91bmQ6IDEsXG59O1xuXG5jb25zdCB2ZWN0b3JFZmZlY3RzID0ge1xuICBub25lOiAwLFxuICBkZWZhdWx0OiAwLFxuICBub25TY2FsaW5nU3Ryb2tlOiAxLFxuICAnbm9uLXNjYWxpbmctc3Ryb2tlJzogMSxcbiAgaW5oZXJpdDogMixcbiAgdXJpOiAzLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0cmFjdFN0cm9rZShcbiAgcHJvcHM6IFN0cm9rZVByb3BzLFxuICBzdHlsZVByb3BlcnRpZXM6IHN0cmluZ1tdLFxuKSB7XG4gIGNvbnN0IHtcbiAgICBzdHJva2UsXG4gICAgc3Ryb2tlT3BhY2l0eSxcbiAgICBzdHJva2VMaW5lY2FwLFxuICAgIHN0cm9rZUxpbmVqb2luLFxuICAgIHN0cm9rZURhc2hhcnJheSxcbiAgICBzdHJva2VXaWR0aCxcbiAgICBzdHJva2VEYXNob2Zmc2V0LFxuICAgIHN0cm9rZU1pdGVybGltaXQsXG4gICAgdmVjdG9yRWZmZWN0LFxuICB9ID0gcHJvcHM7XG5cbiAgaWYgKHN0cm9rZSAhPSBudWxsKSB7XG4gICAgc3R5bGVQcm9wZXJ0aWVzLnB1c2goJ3N0cm9rZScpO1xuICB9XG4gIGlmIChzdHJva2VXaWR0aCAhPSBudWxsKSB7XG4gICAgc3R5bGVQcm9wZXJ0aWVzLnB1c2goJ3N0cm9rZVdpZHRoJyk7XG4gIH1cbiAgaWYgKHN0cm9rZU9wYWNpdHkgIT0gbnVsbCkge1xuICAgIHN0eWxlUHJvcGVydGllcy5wdXNoKCdzdHJva2VPcGFjaXR5Jyk7XG4gIH1cbiAgaWYgKHN0cm9rZURhc2hhcnJheSAhPSBudWxsKSB7XG4gICAgc3R5bGVQcm9wZXJ0aWVzLnB1c2goJ3N0cm9rZURhc2hhcnJheScpO1xuICB9XG4gIGlmIChzdHJva2VEYXNob2Zmc2V0ICE9IG51bGwpIHtcbiAgICBzdHlsZVByb3BlcnRpZXMucHVzaCgnc3Ryb2tlRGFzaG9mZnNldCcpO1xuICB9XG4gIGlmIChzdHJva2VMaW5lY2FwICE9IG51bGwpIHtcbiAgICBzdHlsZVByb3BlcnRpZXMucHVzaCgnc3Ryb2tlTGluZWNhcCcpO1xuICB9XG4gIGlmIChzdHJva2VMaW5lam9pbiAhPSBudWxsKSB7XG4gICAgc3R5bGVQcm9wZXJ0aWVzLnB1c2goJ3N0cm9rZUxpbmVqb2luJyk7XG4gIH1cbiAgaWYgKHN0cm9rZU1pdGVybGltaXQgIT0gbnVsbCkge1xuICAgIHN0eWxlUHJvcGVydGllcy5wdXNoKCdzdHJva2VNaXRlcmxpbWl0Jyk7XG4gIH1cblxuICBjb25zdCBzdHJva2VEYXNoID1cbiAgICAhc3Ryb2tlRGFzaGFycmF5IHx8IHN0cm9rZURhc2hhcnJheSA9PT0gJ25vbmUnXG4gICAgICA/IG51bGxcbiAgICAgIDogZXh0cmFjdExlbmd0aExpc3Qoc3Ryb2tlRGFzaGFycmF5KTtcblxuICByZXR1cm4ge1xuICAgIHN0cm9rZTogZXh0cmFjdEJydXNoKHN0cm9rZSksXG4gICAgc3Ryb2tlT3BhY2l0eTogZXh0cmFjdE9wYWNpdHkoc3Ryb2tlT3BhY2l0eSksXG4gICAgc3Ryb2tlTGluZWNhcDogKHN0cm9rZUxpbmVjYXAgJiYgY2Fwc1tzdHJva2VMaW5lY2FwXSkgfHwgMCxcbiAgICBzdHJva2VMaW5lam9pbjogKHN0cm9rZUxpbmVqb2luICYmIGpvaW5zW3N0cm9rZUxpbmVqb2luXSkgfHwgMCxcbiAgICBzdHJva2VEYXNoYXJyYXk6XG4gICAgICBzdHJva2VEYXNoICYmIHN0cm9rZURhc2gubGVuZ3RoICUgMiA9PT0gMVxuICAgICAgICA/IHN0cm9rZURhc2guY29uY2F0KHN0cm9rZURhc2gpXG4gICAgICAgIDogc3Ryb2tlRGFzaCxcbiAgICBzdHJva2VXaWR0aDogc3Ryb2tlV2lkdGggIT0gbnVsbCA/IHN0cm9rZVdpZHRoIDogMSxcbiAgICBzdHJva2VEYXNob2Zmc2V0OlxuICAgICAgc3Ryb2tlRGFzaGFycmF5ICYmIHN0cm9rZURhc2hvZmZzZXQgPyArc3Ryb2tlRGFzaG9mZnNldCB8fCAwIDogbnVsbCxcbiAgICBzdHJva2VNaXRlcmxpbWl0OlxuICAgICAgKHN0cm9rZU1pdGVybGltaXQgJiYgdHlwZW9mIHN0cm9rZU1pdGVybGltaXQgIT09ICdudW1iZXInXG4gICAgICAgID8gcGFyc2VGbG9hdChzdHJva2VNaXRlcmxpbWl0KVxuICAgICAgICA6IHN0cm9rZU1pdGVybGltaXQpIHx8IDQsXG4gICAgdmVjdG9yRWZmZWN0OiAodmVjdG9yRWZmZWN0ICYmIHZlY3RvckVmZmVjdHNbdmVjdG9yRWZmZWN0XSkgfHwgMCxcbiAgfTtcbn1cbiJdfQ==