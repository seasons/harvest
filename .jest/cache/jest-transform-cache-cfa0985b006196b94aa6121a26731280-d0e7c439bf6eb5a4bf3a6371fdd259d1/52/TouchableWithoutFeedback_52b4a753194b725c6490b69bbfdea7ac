f5af8d85de1aa91b0154dfdc4b82a02b










'use strict';function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}



































var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var OVERRIDE_PROPS = [
'accessibilityComponentType',
'accessibilityLabel',
'accessibilityHint',
'accessibilityIgnoresInvertColors',
'accessibilityRole',
'accessibilityStates',
'accessibilityTraits',
'hitSlop',
'nativeID',
'onBlur',
'onFocus',
'onLayout',
'testID'];





































var TouchableWithoutFeedback = require('create-react-class')({
  displayName: 'TouchableWithoutFeedback',
  mixins: [require('Touchable').Mixin],

  propTypes: {
    accessible: require('prop-types').bool,
    accessibilityLabel: require('prop-types').node,
    accessibilityHint: require('prop-types').string,
    accessibilityComponentType: require('prop-types').oneOf(require('DeprecatedViewAccessibility').DeprecatedAccessibilityComponentTypes),


    accessibilityIgnoresInvertColors: require('prop-types').bool,
    accessibilityRole: require('prop-types').oneOf(require('DeprecatedViewAccessibility').DeprecatedAccessibilityRoles),
    accessibilityStates: require('prop-types').arrayOf(
    require('prop-types').oneOf(require('DeprecatedViewAccessibility').DeprecatedAccessibilityStates)),

    accessibilityTraits: require('prop-types').oneOfType([
    require('prop-types').oneOf(require('DeprecatedViewAccessibility').DeprecatedAccessibilityTraits),
    require('prop-types').arrayOf(require('prop-types').oneOf(require('DeprecatedViewAccessibility').DeprecatedAccessibilityTraits))]),






    onFocus: require('prop-types').func,





    onBlur: require('prop-types').func,



    disabled: require('prop-types').bool,




    onPress: require('prop-types').func,




    onPressIn: require('prop-types').func,



    onPressOut: require('prop-types').func,





    onLayout: require('prop-types').func,

    onLongPress: require('prop-types').func,

    nativeID: require('prop-types').string,
    testID: require('prop-types').string,




    delayPressIn: require('prop-types').number,



    delayPressOut: require('prop-types').number,



    delayLongPress: require('prop-types').number,







    pressRetentionOffset: require('DeprecatedEdgeInsetsPropType'),








    hitSlop: require('DeprecatedEdgeInsetsPropType') },


  getInitialState: function getInitialState() {
    return this.touchableGetInitialState();
  },

  componentDidMount: function componentDidMount() {
    require('ensurePositiveDelayProps')(this.props);
  },

  UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
    require('ensurePositiveDelayProps')(nextProps);
  },





  touchableHandlePress: function touchableHandlePress(e) {
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    this.props.onPressIn && this.props.onPressIn(e);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    this.props.onPressOut && this.props.onPressOut(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {

    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn || 0;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress === 0 ?
    0 :
    this.props.delayLongPress || 500;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut || 0;
  },

  render: function render() {


    var child = require('React').Children.only(this.props.children);
    var children = child.props.children;
    if (require('Touchable').TOUCH_TARGET_DEBUG && child.type === require('View')) {
      children = require('React').Children.toArray(children);
      children.push(
      require('Touchable').renderDebugView({ color: 'red', hitSlop: this.props.hitSlop }));

    }

    var overrides = {};
    for (var _i = 0, _OVERRIDE_PROPS = OVERRIDE_PROPS; _i < _OVERRIDE_PROPS.length; _i++) {var prop = _OVERRIDE_PROPS[_i];
      if (this.props[prop] !== undefined) {
        overrides[prop] = this.props[prop];
      }
    }

    return require('React').cloneElement(child, _objectSpread({},
    overrides, {
      accessible: this.props.accessible !== false,
      onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
      onResponderTerminationRequest: this.
      touchableHandleResponderTerminationRequest,
      onResponderGrant: this.touchableHandleResponderGrant,
      onResponderMove: this.touchableHandleResponderMove,
      onResponderRelease: this.touchableHandleResponderRelease,
      onResponderTerminate: this.touchableHandleResponderTerminate,
      children: children }));

  } });


module.exports = TouchableWithoutFeedback;