{"version":3,"sources":["extractColor.ts"],"names":["colors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","colorNames","color","r","g","b","Object","h","_h","s","_s","l","_l","val","t2","t1","rgb","i","t3","wh","_w","bl","_b","ratio","Math","v","f","n","abbr","hex","rgba","per","keyword","match","string","hexAlpha","i2","parseInt","parseFloat","integerColor","clamp","hslRegEx","alpha","a","isNaN","hslToRgb","hwbRegEx","w","hwbToRgb","prefix","rgbFromHslString","rgbFromHwbString","rgbFromString","identity","toSignedInt32","x","Platform","parsedColor","colorFromString","Array","int32Color"],"mappings":"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","sourcesContent":["import { Platform } from 'react-native';\nimport { Color } from './types';\n\nexport const colors: { [colorname: string]: number[] } = {\n  aliceblue: [240, 248, 255],\n  antiquewhite: [250, 235, 215],\n  aqua: [0, 255, 255],\n  aquamarine: [127, 255, 212],\n  azure: [240, 255, 255],\n  beige: [245, 245, 220],\n  bisque: [255, 228, 196],\n  black: [0, 0, 0],\n  blanchedalmond: [255, 235, 205],\n  blue: [0, 0, 255],\n  blueviolet: [138, 43, 226],\n  brown: [165, 42, 42],\n  burlywood: [222, 184, 135],\n  cadetblue: [95, 158, 160],\n  chartreuse: [127, 255, 0],\n  chocolate: [210, 105, 30],\n  coral: [255, 127, 80],\n  cornflowerblue: [100, 149, 237],\n  cornsilk: [255, 248, 220],\n  crimson: [220, 20, 60],\n  cyan: [0, 255, 255],\n  darkblue: [0, 0, 139],\n  darkcyan: [0, 139, 139],\n  darkgoldenrod: [184, 134, 11],\n  darkgray: [169, 169, 169],\n  darkgreen: [0, 100, 0],\n  darkgrey: [169, 169, 169],\n  darkkhaki: [189, 183, 107],\n  darkmagenta: [139, 0, 139],\n  darkolivegreen: [85, 107, 47],\n  darkorange: [255, 140, 0],\n  darkorchid: [153, 50, 204],\n  darkred: [139, 0, 0],\n  darksalmon: [233, 150, 122],\n  darkseagreen: [143, 188, 143],\n  darkslateblue: [72, 61, 139],\n  darkslategray: [47, 79, 79],\n  darkslategrey: [47, 79, 79],\n  darkturquoise: [0, 206, 209],\n  darkviolet: [148, 0, 211],\n  deeppink: [255, 20, 147],\n  deepskyblue: [0, 191, 255],\n  dimgray: [105, 105, 105],\n  dimgrey: [105, 105, 105],\n  dodgerblue: [30, 144, 255],\n  firebrick: [178, 34, 34],\n  floralwhite: [255, 250, 240],\n  forestgreen: [34, 139, 34],\n  fuchsia: [255, 0, 255],\n  gainsboro: [220, 220, 220],\n  ghostwhite: [248, 248, 255],\n  gold: [255, 215, 0],\n  goldenrod: [218, 165, 32],\n  gray: [128, 128, 128],\n  green: [0, 128, 0],\n  greenyellow: [173, 255, 47],\n  grey: [128, 128, 128],\n  honeydew: [240, 255, 240],\n  hotpink: [255, 105, 180],\n  indianred: [205, 92, 92],\n  indigo: [75, 0, 130],\n  ivory: [255, 255, 240],\n  khaki: [240, 230, 140],\n  lavender: [230, 230, 250],\n  lavenderblush: [255, 240, 245],\n  lawngreen: [124, 252, 0],\n  lemonchiffon: [255, 250, 205],\n  lightblue: [173, 216, 230],\n  lightcoral: [240, 128, 128],\n  lightcyan: [224, 255, 255],\n  lightgoldenrodyellow: [250, 250, 210],\n  lightgray: [211, 211, 211],\n  lightgreen: [144, 238, 144],\n  lightgrey: [211, 211, 211],\n  lightpink: [255, 182, 193],\n  lightsalmon: [255, 160, 122],\n  lightseagreen: [32, 178, 170],\n  lightskyblue: [135, 206, 250],\n  lightslategray: [119, 136, 153],\n  lightslategrey: [119, 136, 153],\n  lightsteelblue: [176, 196, 222],\n  lightyellow: [255, 255, 224],\n  lime: [0, 255, 0],\n  limegreen: [50, 205, 50],\n  linen: [250, 240, 230],\n  magenta: [255, 0, 255],\n  maroon: [128, 0, 0],\n  mediumaquamarine: [102, 205, 170],\n  mediumblue: [0, 0, 205],\n  mediumorchid: [186, 85, 211],\n  mediumpurple: [147, 112, 219],\n  mediumseagreen: [60, 179, 113],\n  mediumslateblue: [123, 104, 238],\n  mediumspringgreen: [0, 250, 154],\n  mediumturquoise: [72, 209, 204],\n  mediumvioletred: [199, 21, 133],\n  midnightblue: [25, 25, 112],\n  mintcream: [245, 255, 250],\n  mistyrose: [255, 228, 225],\n  moccasin: [255, 228, 181],\n  navajowhite: [255, 222, 173],\n  navy: [0, 0, 128],\n  oldlace: [253, 245, 230],\n  olive: [128, 128, 0],\n  olivedrab: [107, 142, 35],\n  orange: [255, 165, 0],\n  orangered: [255, 69, 0],\n  orchid: [218, 112, 214],\n  palegoldenrod: [238, 232, 170],\n  palegreen: [152, 251, 152],\n  paleturquoise: [175, 238, 238],\n  palevioletred: [219, 112, 147],\n  papayawhip: [255, 239, 213],\n  peachpuff: [255, 218, 185],\n  peru: [205, 133, 63],\n  pink: [255, 192, 203],\n  plum: [221, 160, 221],\n  powderblue: [176, 224, 230],\n  purple: [128, 0, 128],\n  rebeccapurple: [102, 51, 153],\n  red: [255, 0, 0],\n  rosybrown: [188, 143, 143],\n  royalblue: [65, 105, 225],\n  saddlebrown: [139, 69, 19],\n  salmon: [250, 128, 114],\n  sandybrown: [244, 164, 96],\n  seagreen: [46, 139, 87],\n  seashell: [255, 245, 238],\n  sienna: [160, 82, 45],\n  silver: [192, 192, 192],\n  skyblue: [135, 206, 235],\n  slateblue: [106, 90, 205],\n  slategray: [112, 128, 144],\n  slategrey: [112, 128, 144],\n  snow: [255, 250, 250],\n  springgreen: [0, 255, 127],\n  steelblue: [70, 130, 180],\n  tan: [210, 180, 140],\n  teal: [0, 128, 128],\n  thistle: [216, 191, 216],\n  tomato: [255, 99, 71],\n  turquoise: [64, 224, 208],\n  violet: [238, 130, 238],\n  wheat: [245, 222, 179],\n  white: [255, 255, 255],\n  whitesmoke: [245, 245, 245],\n  yellow: [255, 255, 0],\n  yellowgreen: [154, 205, 50],\n};\nexport const colorNames: { [colorname: string]: number | void } = {};\nfor (const name in colors) {\n  if (colors.hasOwnProperty(name)) {\n    const color: number[] = colors[name];\n    const r = color[0];\n    const g = color[1];\n    const b = color[2];\n    colorNames[name] = (0xff000000 | (r << 16) | (g << 8) | b) >>> 0;\n  }\n}\nObject.freeze(colorNames);\n\nfunction hslToRgb(_h: number, _s: number, _l: number, a: number) {\n  const h = _h / 360;\n  const s = _s / 100;\n  const l = _l / 100;\n  let t1;\n  let t2;\n  let t3;\n  let rgb;\n  let val;\n\n  if (s === 0) {\n    val = l;\n    return [val, val, val, a];\n  }\n\n  if (l < 0.5) {\n    t2 = l * (1 + s);\n  } else {\n    t2 = l + s - l * s;\n  }\n\n  t1 = 2 * l - t2;\n\n  rgb = [0, 0, 0, a];\n  for (let i = 0; i < 3; i++) {\n    t3 = h + (1 / 3) * -(i - 1);\n    if (t3 < 0) {\n      t3++;\n    }\n    if (t3 > 1) {\n      t3--;\n    }\n\n    if (6 * t3 < 1) {\n      val = t1 + (t2 - t1) * 6 * t3;\n    } else if (2 * t3 < 1) {\n      val = t2;\n    } else if (3 * t3 < 2) {\n      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n    } else {\n      val = t1;\n    }\n\n    rgb[i] = val;\n  }\n\n  return rgb;\n}\n\nfunction hwbToRgb(_h: number, _w: number, _b: number, a: number) {\n  const h = _h / 360;\n  let wh = _w / 100;\n  let bl = _b / 100;\n  const ratio = wh + bl;\n  let i;\n  let v;\n  let f;\n  let n;\n\n  // wh + bl cant be > 1\n  if (ratio > 1) {\n    wh /= ratio;\n    bl /= ratio;\n  }\n\n  i = Math.floor(6 * h);\n  v = 1 - bl;\n  f = 6 * h - i;\n\n  if ((i & 0x01) !== 0) {\n    f = 1 - f;\n  }\n\n  n = wh + f * (v - wh); // linear interpolation\n\n  let r;\n  let g;\n  let b;\n  switch (i) {\n    default:\n    case 6:\n    case 0:\n      r = v;\n      g = n;\n      b = wh;\n      break;\n    case 1:\n      r = n;\n      g = v;\n      b = wh;\n      break;\n    case 2:\n      r = wh;\n      g = v;\n      b = n;\n      break;\n    case 3:\n      r = wh;\n      g = n;\n      b = v;\n      break;\n    case 4:\n      r = n;\n      g = wh;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = wh;\n      b = n;\n      break;\n  }\n\n  return [r, g, b, a];\n}\n\nfunction clamp(num: number, min: number, max: number) {\n  return Math.min(Math.max(min, num), max);\n}\n\nconst abbr = /^#([a-f0-9]{3,4})$/i;\nconst hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\nconst rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d.]+)\\s*)?\\)$/;\nconst per = /^rgba?\\(\\s*([+-]?[\\d.]+)%\\s*,\\s*([+-]?[\\d.]+)%\\s*,\\s*([+-]?[\\d.]+)%\\s*(?:,\\s*([+-]?[\\d.]+)\\s*)?\\)$/;\nconst keyword = /(\\D+)/;\n\nfunction rgbFromString(string: string) {\n  let rgb = [0, 0, 0, 1];\n  let match;\n  let i;\n  let hexAlpha;\n\n  if ((match = string.match(hex))) {\n    hexAlpha = match[2];\n    match = match[1];\n\n    for (i = 0; i < 3; i++) {\n      // https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n      const i2 = i * 2;\n      rgb[i] = parseInt(match.slice(i2, i2 + 2), 16) / 255;\n    }\n\n    if (hexAlpha) {\n      rgb[3] = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;\n    }\n  } else if ((match = string.match(abbr))) {\n    match = match[1];\n    hexAlpha = match[3];\n\n    for (i = 0; i < 3; i++) {\n      rgb[i] = parseInt(match[i] + match[i], 16) / 255;\n    }\n\n    if (hexAlpha) {\n      rgb[3] =\n        Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;\n    }\n  } else if ((match = string.match(rgba))) {\n    for (i = 0; i < 3; i++) {\n      rgb[i] = parseInt(match[i + 1], 0) / 255;\n    }\n\n    if (match[4]) {\n      rgb[3] = parseFloat(match[4]);\n    }\n  } else if ((match = string.match(per))) {\n    for (i = 0; i < 3; i++) {\n      rgb[i] = parseFloat(match[i + 1]) / 100;\n    }\n\n    if (match[4]) {\n      rgb[3] = parseFloat(match[4]);\n    }\n  } else if ((match = string.match(keyword))) {\n    if (match[1] === 'transparent') {\n      return [0, 0, 0, 0];\n    }\n\n    let color = colorNames[match[1]];\n\n    if (!(typeof color === 'number')) {\n      return null;\n    }\n\n    return integerColor(color);\n  } else {\n    return null;\n  }\n\n  for (i = 0; i < 4; i++) {\n    rgb[i] = clamp(rgb[i], 0, 1);\n  }\n\n  return rgb;\n}\n\nconst hslRegEx = /^hsla?\\(\\s*([+-]?(?:\\d*\\.)?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d.]+)%\\s*,\\s*([+-]?[\\d.]+)%\\s*(?:,\\s*([+-]?[\\d.]+)\\s*)?\\)$/;\n\nfunction rgbFromHslString(string: string) {\n  const match = string.match(hslRegEx);\n  if (!match) {\n    return null;\n  }\n\n  const alpha = parseFloat(match[4]);\n  const h = (parseFloat(match[1]) + 360) % 360;\n  const s = clamp(parseFloat(match[2]), 0, 100);\n  const l = clamp(parseFloat(match[3]), 0, 100);\n  const a = isNaN(alpha) ? 1 : clamp(alpha, 0, 1);\n  return hslToRgb(h, s, l, a);\n}\n\nconst hwbRegEx = /^hwb\\(\\s*([+-]?\\d*[.]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d.]+)%\\s*,\\s*([+-]?[\\d.]+)%\\s*(?:,\\s*([+-]?[\\d.]+)\\s*)?\\)$/;\n\nfunction rgbFromHwbString(string: string) {\n  const match = string.match(hwbRegEx);\n  if (!match) {\n    return null;\n  }\n\n  const alpha = parseFloat(match[4]);\n  const h = ((parseFloat(match[1]) % 360) + 360) % 360;\n  const w = clamp(parseFloat(match[2]), 0, 100);\n  const b = clamp(parseFloat(match[3]), 0, 100);\n  const a = isNaN(alpha) ? 1 : clamp(alpha, 0, 1);\n  return hwbToRgb(h, w, b, a);\n}\n\nfunction colorFromString(string: string) {\n  const prefix = string.substring(0, 3).toLowerCase();\n\n  switch (prefix) {\n    case 'hsl':\n      return rgbFromHslString(string);\n    case 'hwb':\n      return rgbFromHwbString(string);\n    default:\n      return rgbFromString(string);\n  }\n}\n\nconst identity = (x: number) => x;\n\nconst toSignedInt32 = (x: number) => x | 0x0;\n\n// Android use 32 bit *signed* integer to represent the color\n// We utilize the fact that bitwise operations in JS also operates on\n// signed 32 bit integers, so that we can use those to convert from\n// *unsigned* to *signed* 32bit in that way.\nexport const integerColor =\n  Platform.OS === 'android' ? toSignedInt32 : identity;\n\n// Returns 0xaarrggbb or null\nexport default function extractColor(color: Color | void) {\n  if (typeof color === 'number') {\n    if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {\n      return integerColor(color);\n    }\n    return null;\n  }\n\n  const parsedColor =\n    typeof color === 'string' ? colorFromString(color) : color;\n  if (!Array.isArray(parsedColor)) {\n    return parsedColor;\n  }\n\n  const r = parsedColor[0];\n  const g = parsedColor[1];\n  const b = parsedColor[2];\n  const a = parsedColor[3];\n\n  const int32Color =\n    ((a === undefined ? 0xff000000 : Math.round(a * 255) << 24) |\n      (Math.round(r * 255) << 16) |\n      (Math.round(g * 255) << 8) |\n      Math.round(b * 255)) >>>\n    0;\n\n  return integerColor(int32Color);\n}\n"]}