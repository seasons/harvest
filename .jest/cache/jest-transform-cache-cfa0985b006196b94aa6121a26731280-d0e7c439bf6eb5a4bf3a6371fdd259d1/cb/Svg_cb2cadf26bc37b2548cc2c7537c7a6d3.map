{"version":3,"sources":["Svg.tsx"],"names":["RNSVGSvgViewManager","NativeModules","styles","StyleSheet","svg","backgroundColor","borderWidth","Svg","Shape","displayName","defaultProps","preserveAspectRatio","measureInWindow","measure","measureLayout","setNativeProps","width","height","props","toDataURL","handle","opacity","viewBox","style","children","onLayout","stylesAndProps","Array","Object","color","font","transform","fill","fillOpacity","fillRule","stroke","strokeWidth","strokeOpacity","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","w","parseInt","h","doNotParseWidth","isNaN","doNotParseHeight","dimensions","flex","o","opacityStyle","RNSVGSvg"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  requireNativeComponent,\n  StyleSheet,\n  findNodeHandle,\n  NativeModules,\n  MeasureOnSuccessCallback,\n  MeasureLayoutOnSuccessCallback,\n  MeasureInWindowOnSuccessCallback,\n} from 'react-native';\nimport {\n  ClipProps,\n  FillProps,\n  NumberProp,\n  StrokeProps,\n  ResponderProps,\n  TransformProps,\n  ResponderInstanceProps,\n} from '../lib/extract/types';\nimport extractResponder from '../lib/extract/extractResponder';\nimport extractViewBox from '../lib/extract/extractViewBox';\nimport Shape from './Shape';\nimport G from './G';\n\nconst RNSVGSvgViewManager = NativeModules.RNSVGSvgViewManager;\n\nconst styles = StyleSheet.create({\n  svg: {\n    backgroundColor: 'transparent',\n    borderWidth: 0,\n  },\n});\n\nexport default class Svg extends Shape<\n  {\n    style?: [] | {};\n    viewBox?: string;\n    opacity?: NumberProp;\n    onLayout?: () => void;\n    preserveAspectRatio?: string;\n  } & TransformProps &\n    ResponderProps &\n    StrokeProps &\n    FillProps &\n    ClipProps\n> {\n  static displayName = 'Svg';\n\n  static defaultProps = {\n    preserveAspectRatio: 'xMidYMid meet',\n  };\n\n  measureInWindow = (callback: MeasureInWindowOnSuccessCallback) => {\n    this.root && this.root.measureInWindow(callback);\n  };\n\n  measure = (callback: MeasureOnSuccessCallback) => {\n    this.root && this.root.measure(callback);\n  };\n\n  measureLayout = (\n    relativeToNativeNode: number,\n    onSuccess: MeasureLayoutOnSuccessCallback,\n    onFail: () => void /* currently unused */,\n  ) => {\n    this.root &&\n      this.root.measureLayout(relativeToNativeNode, onSuccess, onFail);\n  };\n\n  setNativeProps = (\n    props: Object & {\n      width?: NumberProp;\n      height?: NumberProp;\n      bbWidth?: NumberProp;\n      bbHeight?: NumberProp;\n    },\n  ) => {\n    const { width, height } = props;\n    if (width) {\n      props.bbWidth = width;\n    }\n    if (height) {\n      props.bbHeight = height;\n    }\n    this.root && this.root.setNativeProps(props);\n  };\n\n  toDataURL = (callback: () => void, options: Object) => {\n    if (!callback) {\n      return;\n    }\n    const handle = findNodeHandle(this.root as Component);\n    RNSVGSvgViewManager.toDataURL(handle, options, callback);\n  };\n\n  render() {\n    const {\n      opacity = 1,\n      viewBox,\n      preserveAspectRatio,\n      style,\n      children,\n      onLayout,\n      ...props\n    } = this.props;\n    const stylesAndProps = {\n      ...(Array.isArray(style) ? Object.assign({}, ...style) : style),\n      ...props,\n    };\n    const {\n      color,\n      width,\n      height,\n\n      // Inherited G properties\n      font,\n      transform,\n      fill,\n      fillOpacity,\n      fillRule,\n      stroke,\n      strokeWidth,\n      strokeOpacity,\n      strokeDasharray,\n      strokeDashoffset,\n      strokeLinecap,\n      strokeLinejoin,\n      strokeMiterlimit,\n    } = stylesAndProps;\n\n    const w = parseInt(width, 10);\n    const h = parseInt(height, 10);\n    const doNotParseWidth = isNaN(w) || width[width.length - 1] === '%';\n    const doNotParseHeight = isNaN(h) || height[height.length - 1] === '%';\n    const dimensions =\n      width && height\n        ? {\n            width: doNotParseWidth ? width : w,\n            height: doNotParseHeight ? height : h,\n            flex: 0,\n          }\n        : null;\n\n    const o = +opacity;\n    const opacityStyle = !isNaN(o)\n      ? {\n          opacity: o,\n        }\n      : null;\n\n    return (\n      <RNSVGSvg\n        {...props}\n        bbWidth={width}\n        bbHeight={height}\n        tintColor={color}\n        onLayout={onLayout}\n        ref={this.refMethod}\n        style={[styles.svg, style, opacityStyle, dimensions]}\n        {...extractResponder(props, this as ResponderInstanceProps)}\n        {...extractViewBox({ viewBox, preserveAspectRatio })}\n      >\n        <G\n          {...{\n            children,\n            style,\n            font,\n            transform,\n            fill,\n            fillOpacity,\n            fillRule,\n            stroke,\n            strokeWidth,\n            strokeOpacity,\n            strokeDasharray,\n            strokeDashoffset,\n            strokeLinecap,\n            strokeLinejoin,\n            strokeMiterlimit,\n          }}\n        />\n      </RNSVGSvg>\n    );\n  }\n}\n\nexport const RNSVGSvg = requireNativeComponent('RNSVGSvgView');\n"]}