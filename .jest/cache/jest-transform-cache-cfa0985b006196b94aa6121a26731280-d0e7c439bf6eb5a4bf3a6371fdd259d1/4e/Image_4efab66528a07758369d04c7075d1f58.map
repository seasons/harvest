{"version":3,"sources":["Image.tsx"],"names":["spacesRegExp","SvgImage","Shape","displayName","defaultProps","x","y","width","height","preserveAspectRatio","props","xlinkHref","href","modes","align","meetOrSlice","meetOrSliceTypes","alignEnum","Image","uri","RNSVGImage"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAKA,IAAA,eAAA,GAAA,OAAA,iCAAA;;AACA,IAAA,aAAA,GAAA,uBAAA,CAAA,OAAA,+BAAA,CAAA;;AAEA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,WAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAAA,IAAMA,YAAY,GAAlB,KAAA;;AAEqBC,IAAAA,Q;;;;;;;;;;6BAmBV;AAAA,UACCS,KADD,GAAA,KAAA,KAAA;AAAA,UAGLD,mBAHK,GAUHC,KAVG,CAAA,mBAAA;AAAA,UAILL,CAJK,GAUHK,KAVG,CAAA,CAAA;AAAA,UAKLJ,CALK,GAUHI,KAVG,CAAA,CAAA;AAAA,UAMLH,KANK,GAUHG,KAVG,CAAA,KAAA;AAAA,UAOLF,MAPK,GAUHE,KAVG,CAAA,MAAA;AAAA,UAQLC,SARK,GAUHD,KAVG,CAAA,SAAA;AAAA,UAAA,WAAA,GAUHA,KAVG,CAAA,IAAA;AAAA,UASLE,IATK,GAAA,WAAA,KAAA,KAAA,CAAA,GAAA,SAAA,GAAA,WAAA;AAWP,UAAMC,KAAK,GAAGJ,mBAAmB,GAC7BA,mBAAmB,CAAnBA,IAAAA,GAAAA,KAAAA,CAD6B,YAC7BA,CAD6B,GAAjC,EAAA;AAGA,UAAMK,KAAK,GAAGD,KAAK,CAAnB,CAAmB,CAAnB;AACA,UAAME,WAA2D,GAC/DF,KAAK,CADP,CACO,CADP;AAEA,aACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,UAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA;AACE,QAAA,GAAG,EAAE,KADP;AAAA,OAAA,EAEM,CAAA,GAAA,aAAA,CAAA,OAAA,EAAA,aAAA,CAAA,EAAA,EAAkB,CAAA,GAAA,aAAA,CAAA,cAAA,EAAlB,KAAkB,CAAlB,EAAA;AAAyCR,QAAAA,CAAC,EAA1C,IAAA;AAAkDC,QAAAA,CAAC,EAAnD;AAAA,OAAA,CAAA,EAFN,IAEM,CAFN,EAAA;AAGE,QAAA,CAAC,EAHH,CAAA;AAIE,QAAA,CAAC,EAJH,CAAA;AAKE,QAAA,KAAK,EALP,KAAA;AAME,QAAA,MAAM,EANR,MAAA;AAOE,QAAA,WAAW,EAAEU,eAAAA,CAAAA,gBAAAA,CAAAA,WAAAA,KAPf,CAAA;AAQE,QAAA,KAAK,EAAEC,eAAAA,CAAAA,SAAAA,CAAAA,KAAAA,KART,UAAA;AASE,QAAA,GAAG,EACD,CAAA,IAAA,GAAA,IAAA,GAEIC,YAAAA,CAAAA,KAAAA,CAAAA,kBAAAA,CACE,OAAA,IAAA,KAAA,QAAA,GAA2B;AAAEC,UAAAA,GAAG,EAAhC;AAA2B,SAA3B,GAbV,IAYQD,CAZR;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EADF;AACE;AAAA,OAAA,CAAA,CADF;;;;EApCkChB,OAAAA,CAAAA,O,CAAjBD;;;AAAAA,Q,CASZE,WATYF,GASE,OATFA;AAAAA,Q,CAWZG,YAXYH,GAWG;AACpBI,EAAAA,CAAC,EADmB,CAAA;AAEpBC,EAAAA,CAAC,EAFmB,CAAA;AAGpBC,EAAAA,KAAK,EAHe,CAAA;AAIpBC,EAAAA,MAAM,EAJc,CAAA;AAKpBC,EAAAA,mBAAmB,EALC;AAAA,CAXHR;AA0Dd,IAAMmB,UAAU,GAAG,CAAA,GAAA,YAAA,CAAA,sBAAA,EAAnB,YAAmB,CAAnB","sourcesContent":["import React from 'react';\nimport {\n  Image,\n  ImageSourcePropType,\n  requireNativeComponent,\n} from 'react-native';\nimport { meetOrSliceTypes, alignEnum } from '../lib/extract/extractViewBox';\nimport extractProps, { propsAndStyles } from '../lib/extract/extractProps';\nimport { NumberProp } from '../lib/extract/types';\nimport Shape from './Shape';\n\nconst spacesRegExp = /\\s+/;\n\nexport default class SvgImage extends Shape<{\n  preserveAspectRatio?: string;\n  x?: NumberProp;\n  y?: NumberProp;\n  width?: NumberProp;\n  height?: NumberProp;\n  xlinkHref?: string | number | ImageSourcePropType;\n  href?: string | number | ImageSourcePropType;\n}> {\n  static displayName = 'Image';\n\n  static defaultProps = {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n    preserveAspectRatio: 'xMidYMid meet',\n  };\n\n  render() {\n    const { props } = this;\n    const {\n      preserveAspectRatio,\n      x,\n      y,\n      width,\n      height,\n      xlinkHref,\n      href = xlinkHref,\n    } = props;\n    const modes = preserveAspectRatio\n      ? preserveAspectRatio.trim().split(spacesRegExp)\n      : [];\n    const align = modes[0];\n    const meetOrSlice: 'meet' | 'slice' | 'none' | string | undefined =\n      modes[1];\n    return (\n      <RNSVGImage\n        ref={this.refMethod}\n        {...extractProps({ ...propsAndStyles(props), x: null, y: null }, this)}\n        x={x}\n        y={y}\n        width={width}\n        height={height}\n        meetOrSlice={meetOrSliceTypes[meetOrSlice] || 0}\n        align={alignEnum[align] || 'xMidYMid'}\n        src={\n          !href\n            ? null\n            : Image.resolveAssetSource(\n                typeof href === 'string' ? { uri: href } : href,\n              )\n        }\n      />\n    );\n  }\n}\n\nexport const RNSVGImage = requireNativeComponent('RNSVGImage');\n"]}