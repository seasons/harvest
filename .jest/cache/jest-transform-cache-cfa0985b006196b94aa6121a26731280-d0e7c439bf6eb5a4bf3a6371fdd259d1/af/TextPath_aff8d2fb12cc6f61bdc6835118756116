b3423da377e9ba8af4ed785c071b5362
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RNSVGTextPath = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _extractTransform = _interopRequireDefault(require("../lib/extract/extractTransform"));

var _extractProps = _interopRequireWildcard(require("../lib/extract/extractProps"));

var _extractText = _interopRequireDefault(require("../lib/extract/extractText"));

var _util = require("../lib/util");

var _Shape2 = _interopRequireDefault(require("./Shape"));

var _TSpan = _interopRequireDefault(require("./TSpan"));

var _jsxFileName = "/Users/jannegylling/IdeaProjects/react-native-svg/src/elements/TextPath.tsx";

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

var TextPath = function (_Shape) {
  (0, _inherits2.default)(TextPath, _Shape);

  function TextPath() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, TextPath);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TextPath)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.setNativeProps = function (props) {
      var matrix = !props.matrix && (0, _extractTransform.default)(props);

      if (matrix) {
        props.matrix = matrix;
      }

      (0, _extends2.default)(props, (0, _util.pickNotNil)((0, _extractText.default)(props, true)));
      _this.root && _this.root.setNativeProps(props);
    };

    return _this;
  }

  (0, _createClass2.default)(TextPath, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          xlinkHref = _this$props.xlinkHref,
          _this$props$href = _this$props.href,
          href = _this$props$href === void 0 ? xlinkHref : _this$props$href,
          _this$props$startOffs = _this$props.startOffset,
          startOffset = _this$props$startOffs === void 0 ? 0 : _this$props$startOffs,
          method = _this$props.method,
          spacing = _this$props.spacing,
          side = _this$props.side,
          alignmentBaseline = _this$props.alignmentBaseline,
          midLine = _this$props.midLine,
          prop = (0, _objectWithoutProperties2.default)(_this$props, ["children", "xlinkHref", "href", "startOffset", "method", "spacing", "side", "alignmentBaseline", "midLine"]);
      var matched = href && href.match(_util.idPattern);
      var match = matched && matched[1];

      if (match) {
        var props = (0, _extractProps.default)(_objectSpread({}, (0, _extractProps.propsAndStyles)(prop), {
          x: null,
          y: null
        }), this);
        (0, _extends2.default)(props, (0, _extractText.default)({
          children: children
        }, true), {
          href: match,
          startOffset: startOffset,
          method: method,
          spacing: spacing,
          side: side,
          alignmentBaseline: alignmentBaseline,
          midLine: midLine
        });
        props.ref = this.refMethod;
        return _react.default.createElement(RNSVGTextPath, (0, _extends2.default)({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 81
          }
        }));
      }

      console.warn('Invalid `href` prop for `TextPath` element, expected a href like "#id", but got: "' + href + '"');
      return _react.default.createElement(_TSpan.default, {
        ref: this.refMethod,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 90
        }
      }, children);
    }
  }]);
  return TextPath;
}(_Shape2.default);

exports.default = TextPath;
TextPath.displayName = 'TextPath';
var RNSVGTextPath = (0, _reactNative.requireNativeComponent)('RNSVGTextPath');
exports.RNSVGTextPath = RNSVGTextPath;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRQYXRoLnRzeCJdLCJuYW1lcyI6WyJUZXh0UGF0aCIsIlNoYXBlIiwiZGlzcGxheU5hbWUiLCJzZXROYXRpdmVQcm9wcyIsIm1hdHJpeCIsInByb3BzIiwiY2hpbGRyZW4iLCJ4bGlua0hyZWYiLCJocmVmIiwic3RhcnRPZmZzZXQiLCJtZXRob2QiLCJzcGFjaW5nIiwic2lkZSIsImFsaWdubWVudEJhc2VsaW5lIiwibWlkTGluZSIsInByb3AiLCJtYXRjaGVkIiwiaWRQYXR0ZXJuIiwibWF0Y2giLCJ4IiwieSIsImNvbnNvbGUiLCJSTlNWR1RleHRQYXRoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxNQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxZQUFBLEdBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQTs7QUFDQSxJQUFBLGlCQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLG1DQUFBLENBQUE7O0FBQ0EsSUFBQSxhQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBLCtCQUFBLENBQUE7O0FBRUEsSUFBQSxZQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLDhCQUFBLENBQUE7O0FBQ0EsSUFBQSxLQUFBLEdBQUEsT0FBQSxlQUFBOztBQUNBLElBQUEsT0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxXQUFBLENBQUE7O0FBQ0EsSUFBQSxNQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLFdBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRXFCQTs7QUFBQUEsSUFBQUEsUTs7Ozs7Ozs7Ozs7Ozs7OztVQWFuQkcsYyxHQUFpQixVQUFBLEtBQUEsRUFLWjtBQUNILFVBQU1DLE1BQU0sR0FBRyxDQUFDQyxLQUFLLENBQU4sTUFBQSxJQUFpQixDQUFBLEdBQUEsaUJBQUEsQ0FBQSxPQUFBLEVBQWhDLEtBQWdDLENBQWhDOztBQUNBLFVBQUEsTUFB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LEVBQVA7QUFBTztBQUFBLFNBQUEsQ0FBQSxDQUFQO0FBR0ZnQjs7QUFBQUEsTUFBQUEsT0FBTyxDQUFQQSxJQUFBQSxDQUNFLHVGQUFBLElBQUEsR0FERkEsR0FBQUE7QUFLQSxhQUNFLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLE1BQUEsQ0FBRCxPQUFBLEVBQUE7QUFBTyxRQUFBLEdBQUcsRUFBRSxLQUFaLFNBQUE7QUFBQSxRQUFBLFFBQUEsRUFBQTtBQUFBLFVBQUEsUUFBQSxFQUFBLFlBQUE7QUFBQSxVQUFBLFVBQUEsRUFBQTtBQUFBO0FBQUEsT0FBQSxFQURGLFFBQ0UsQ0FERjs7OztFQTlFa0NwQixPQUFBQSxDQUFBQSxPLENBQWpCRDs7O0FBQUFBLFEsQ0FXWkUsV0FYWUYsR0FXRSxVQVhGQTtBQXNGZCxJQUFNc0IsYUFBYSxHQUFHLENBQUEsR0FBQSxZQUFBLENBQUEsc0JBQUEsRUFBdEIsZUFBc0IsQ0FBdEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgZXh0cmFjdFRyYW5zZm9ybSBmcm9tICcuLi9saWIvZXh0cmFjdC9leHRyYWN0VHJhbnNmb3JtJztcbmltcG9ydCBleHRyYWN0UHJvcHMsIHsgcHJvcHNBbmRTdHlsZXMgfSBmcm9tICcuLi9saWIvZXh0cmFjdC9leHRyYWN0UHJvcHMnO1xuaW1wb3J0IHsgTnVtYmVyUHJvcCwgVHJhbnNmb3JtUHJvcHMgfSBmcm9tICcuLi9saWIvZXh0cmFjdC90eXBlcyc7XG5pbXBvcnQgZXh0cmFjdFRleHQgZnJvbSAnLi4vbGliL2V4dHJhY3QvZXh0cmFjdFRleHQnO1xuaW1wb3J0IHsgaWRQYXR0ZXJuLCBwaWNrTm90TmlsIH0gZnJvbSAnLi4vbGliL3V0aWwnO1xuaW1wb3J0IFNoYXBlIGZyb20gJy4vU2hhcGUnO1xuaW1wb3J0IFRTcGFuIGZyb20gJy4vVFNwYW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0UGF0aCBleHRlbmRzIFNoYXBlPHtcbiAgY2hpbGRyZW4/OiBOdW1iZXJQcm9wIHwgW051bWJlclByb3AgfCBSZWFjdC5Db21wb25lbnRUeXBlXTtcbiAgYWxpZ25tZW50QmFzZWxpbmU/OiBzdHJpbmc7XG4gIHN0YXJ0T2Zmc2V0PzogTnVtYmVyUHJvcDtcbiAgeGxpbmtIcmVmPzogc3RyaW5nO1xuICBtaWRMaW5lPzogc3RyaW5nO1xuICBzcGFjaW5nPzogc3RyaW5nO1xuICBtZXRob2Q/OiBzdHJpbmc7XG4gIGhyZWY/OiBzdHJpbmc7XG4gIHNpZGU/OiBzdHJpbmc7XG59PiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdUZXh0UGF0aCc7XG5cbiAgc2V0TmF0aXZlUHJvcHMgPSAoXG4gICAgcHJvcHM6IE9iamVjdCAmIHtcbiAgICAgIG1hdHJpeD86IG51bWJlcltdO1xuICAgICAgc3R5bGU/OiBbXSB8IHt9O1xuICAgIH0gJiBUcmFuc2Zvcm1Qcm9wcyxcbiAgKSA9PiB7XG4gICAgY29uc3QgbWF0cml4ID0gIXByb3BzLm1hdHJpeCAmJiBleHRyYWN0VHJhbnNmb3JtKHByb3BzKTtcbiAgICBpZiAobWF0cml4KSB7XG4gICAgICBwcm9wcy5tYXRyaXggPSBtYXRyaXg7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24ocHJvcHMsIHBpY2tOb3ROaWwoZXh0cmFjdFRleHQocHJvcHMsIHRydWUpKSk7XG4gICAgdGhpcy5yb290ICYmIHRoaXMucm9vdC5zZXROYXRpdmVQcm9wcyhwcm9wcyk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgeGxpbmtIcmVmLFxuICAgICAgaHJlZiA9IHhsaW5rSHJlZixcbiAgICAgIHN0YXJ0T2Zmc2V0ID0gMCxcbiAgICAgIG1ldGhvZCxcbiAgICAgIHNwYWNpbmcsXG4gICAgICBzaWRlLFxuICAgICAgYWxpZ25tZW50QmFzZWxpbmUsXG4gICAgICBtaWRMaW5lLFxuICAgICAgLi4ucHJvcFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG1hdGNoZWQgPSBocmVmICYmIGhyZWYubWF0Y2goaWRQYXR0ZXJuKTtcbiAgICBjb25zdCBtYXRjaCA9IG1hdGNoZWQgJiYgbWF0Y2hlZFsxXTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIGNvbnN0IHByb3BzID0gZXh0cmFjdFByb3BzKFxuICAgICAgICB7XG4gICAgICAgICAgLi4ucHJvcHNBbmRTdHlsZXMocHJvcCksXG4gICAgICAgICAgeDogbnVsbCxcbiAgICAgICAgICB5OiBudWxsLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLFxuICAgICAgKTtcbiAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgIHByb3BzLFxuICAgICAgICBleHRyYWN0VGV4dChcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRydWUsXG4gICAgICAgICksXG4gICAgICAgIHtcbiAgICAgICAgICBocmVmOiBtYXRjaCxcbiAgICAgICAgICBzdGFydE9mZnNldCxcbiAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgc3BhY2luZyxcbiAgICAgICAgICBzaWRlLFxuICAgICAgICAgIGFsaWdubWVudEJhc2VsaW5lLFxuICAgICAgICAgIG1pZExpbmUsXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgICAgcHJvcHMucmVmID0gdGhpcy5yZWZNZXRob2QgYXMgKGluc3RhbmNlOiBDb21wb25lbnQgfCBudWxsKSA9PiB2b2lkO1xuICAgICAgcmV0dXJuIDxSTlNWR1RleHRQYXRoIHsuLi5wcm9wc30gLz47XG4gICAgfVxuXG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ0ludmFsaWQgYGhyZWZgIHByb3AgZm9yIGBUZXh0UGF0aGAgZWxlbWVudCwgZXhwZWN0ZWQgYSBocmVmIGxpa2UgXCIjaWRcIiwgYnV0IGdvdDogXCInICtcbiAgICAgICAgaHJlZiArXG4gICAgICAgICdcIicsXG4gICAgKTtcbiAgICByZXR1cm4gKFxuICAgICAgPFRTcGFuIHJlZj17dGhpcy5yZWZNZXRob2QgYXMgKGluc3RhbmNlOiBDb21wb25lbnQgfCBudWxsKSA9PiB2b2lkfT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9UU3Bhbj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBSTlNWR1RleHRQYXRoID0gcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCgnUk5TVkdUZXh0UGF0aCcpO1xuIl19