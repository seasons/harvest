43fe49b5f0890f75ef88bda31d352520
jest.mock("react-native", function () {
  return {
    AsyncStorage: {
      setItem: jest.fn(function () {
        return new Promise(function (resolve, reject) {
          resolve(null);
        });
      }),
      multiSet: jest.fn(function () {
        return new Promise(function (resolve, reject) {
          resolve(null);
        });
      }),
      getItem: jest.fn(function () {
        return new Promise(function (resolve, reject) {
          resolve({
            bag: {
              items: []
            }
          });
        });
      }),
      multiGet: jest.fn(function () {
        return new Promise(function (resolve, reject) {
          resolve(null);
        });
      }),
      removeItem: jest.fn(function () {
        return new Promise(function (resolve, reject) {
          resolve(null);
        });
      }),
      getAllKeys: jest.fn(function () {
        return new Promise(function (resolve) {
          resolve(["one", "two", "three"]);
        });
      })
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNldHVwSmVzdC50cyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsIkFzeW5jU3RvcmFnZSIsInNldEl0ZW0iLCJmbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwibXVsdGlTZXQiLCJnZXRJdGVtIiwiYmFnIiwiaXRlbXMiLCJtdWx0aUdldCIsInJlbW92ZUl0ZW0iLCJnZXRBbGxLZXlzIl0sIm1hcHBpbmdzIjoiQUF5RkFBLElBQUksQ0FBQ0MsSUFBTCxDQUFVLGNBQVYsRUFBMEI7QUFBQSxTQUFPO0FBQy9CQyxJQUFBQSxZQUFZLEVBQUU7QUFDWkMsTUFBQUEsT0FBTyxFQUFFSCxJQUFJLENBQUNJLEVBQUwsQ0FBUSxZQUFNO0FBQ3JCLGVBQU8sSUFBSUMsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0Q0QsVUFBQUEsT0FBTyxDQUFDLElBQUQsQ0FBUDtBQUNELFNBRk0sQ0FBUDtBQUdELE9BSlEsQ0FERztBQU1aRSxNQUFBQSxRQUFRLEVBQUVSLElBQUksQ0FBQ0ksRUFBTCxDQUFRLFlBQU07QUFDdEIsZUFBTyxJQUFJQyxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3RDRCxVQUFBQSxPQUFPLENBQUMsSUFBRCxDQUFQO0FBQ0QsU0FGTSxDQUFQO0FBR0QsT0FKUyxDQU5FO0FBV1pHLE1BQUFBLE9BQU8sRUFBRVQsSUFBSSxDQUFDSSxFQUFMLENBQVEsWUFBTTtBQUNyQixlQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdENELFVBQUFBLE9BQU8sQ0FBQztBQUFFSSxZQUFBQSxHQUFHLEVBQUU7QUFBRUMsY0FBQUEsS0FBSyxFQUFFO0FBQVQ7QUFBUCxXQUFELENBQVA7QUFDRCxTQUZNLENBQVA7QUFHRCxPQUpRLENBWEc7QUFnQlpDLE1BQUFBLFFBQVEsRUFBRVosSUFBSSxDQUFDSSxFQUFMLENBQVEsWUFBTTtBQUN0QixlQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdENELFVBQUFBLE9BQU8sQ0FBQyxJQUFELENBQVA7QUFDRCxTQUZNLENBQVA7QUFHRCxPQUpTLENBaEJFO0FBcUJaTyxNQUFBQSxVQUFVLEVBQUViLElBQUksQ0FBQ0ksRUFBTCxDQUFRLFlBQU07QUFDeEIsZUFBTyxJQUFJQyxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3RDRCxVQUFBQSxPQUFPLENBQUMsSUFBRCxDQUFQO0FBQ0QsU0FGTSxDQUFQO0FBR0QsT0FKVyxDQXJCQTtBQTBCWlEsTUFBQUEsVUFBVSxFQUFFZCxJQUFJLENBQUNJLEVBQUwsQ0FBUSxZQUFNO0FBQ3hCLGVBQU8sSUFBSUMsT0FBSixDQUFZLFVBQUFDLE9BQU8sRUFBSTtBQUM1QkEsVUFBQUEsT0FBTyxDQUFDLENBQUMsS0FBRCxFQUFRLEtBQVIsRUFBZSxPQUFmLENBQUQsQ0FBUDtBQUNELFNBRk0sQ0FBUDtBQUdELE9BSlc7QUExQkE7QUFEaUIsR0FBUDtBQUFBLENBQTFCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gLy8gcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvaXNzdWVzLzE5OTU1XG4vLyAvLyBhbmQgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL21ldHJvL3B1bGwvMTk4XG4vLyAvL1xuLy8gLy8gaW1wb3J0IGFwcGx5RGVjb3JhdGVkRGVzY3JpcHRvciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcHBseURlY29yYXRlZERlc2NyaXB0b3JcIlxuLy8gLy8gaW1wb3J0IGluaXRpYWxpemVyRGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eVwiXG4vLyAvLyBkZWNsYXJlIHZhciBiYWJlbEhlbHBlcnM6IGFueVxuLy8gLy8gT2JqZWN0LmFzc2lnbihiYWJlbEhlbHBlcnMsIHsgYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yLCBpbml0aWFsaXplckRlZmluZVByb3BlcnR5IH0pXG4vLyAvLyBpbXBvcnQgXCJAYmFiZWwvcnVudGltZVwiXG5cbi8vIGltcG9ydCBjaGFsayBmcm9tIFwiY2hhbGtcIlxuLy8gaW1wb3J0IEVuenltZSBmcm9tIFwiZW56eW1lXCJcbi8vIGltcG9ydCBBZGFwdGVyIGZyb20gXCJlbnp5bWUtYWRhcHRlci1yZWFjdC0xNlwiXG4vLyBpbXBvcnQgZXhwZWN0IGZyb20gXCJleHBlY3RcIlxuLy8gaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSBcInV0aWxcIlxuXG4vLyBFbnp5bWUuY29uZmlndXJlKHsgYWRhcHRlcjogbmV3IEFkYXB0ZXIoKSB9KVxuXG4vLyAvLyBXYWl0aW5nIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS90aHltaWtlZS9zbmFwc2hvdC1kaWZmL3B1bGwvMTdcbi8vIGltcG9ydCBkaWZmIGZyb20gXCJzbmFwc2hvdC1kaWZmXCJcbi8vIGV4cGVjdC5leHRlbmQoeyB0b01hdGNoRGlmZlNuYXBzaG90OiAoZGlmZiBhcyBhbnkpLnRvTWF0Y2hEaWZmU25hcHNob3QgfSlcblxuLy8gY29uc3Qgb3JpZ2luYWxDb25zb2xlRXJyb3IgPSBjb25zb2xlLmVycm9yXG5cbi8vIC8vIFRPRE86IFJlbW92ZSBvbmNlIHdlJ3JlIG5vIGxvbmdlciB1c2luZyBKU0RPTSBmb3IgZW56eW1lIHN0YXRpYyByZW5kZXJpbmcuXG4vLyBjb25zb2xlLmVycm9yID0gKG1lc3NhZ2U/OiBhbnkpID0+IHtcbi8vICAgaWYgKFxuLy8gICAgIHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiICYmXG4vLyAgICAgKG1lc3NhZ2UuaW5jbHVkZXMoXCJpcyB1c2luZyB1cHBlcmNhc2UgSFRNTC4gQWx3YXlzIHVzZSBsb3dlcmNhc2UgSFRNTCB0YWdzIGluIFJlYWN0LlwiKSB8fFxuLy8gICAgICAgL1dhcm5pbmc6IFJlYWN0IGRvZXMgbm90IHJlY29nbml6ZSB0aGUgYFxcdytgIHByb3Agb24gYSBET00gZWxlbWVudFxcLi8udGVzdChtZXNzYWdlKSB8fFxuLy8gICAgICAgL1dhcm5pbmc6IFRoZSB0YWcgPFxcdys+IGlzIHVucmVjb2duaXplZCBpbiB0aGlzIGJyb3dzZXJcXC4vLnRlc3QobWVzc2FnZSkgfHxcbi8vICAgICAgIC9XYXJuaW5nOiBVbmtub3duIGV2ZW50IGhhbmRsZXIgcHJvcGVydHkgYFxcdytgXFwuLy50ZXN0KG1lc3NhZ2UpIHx8XG4vLyAgICAgICAvV2FybmluZzogUmVjZWl2ZWQgYFxcdytgIGZvciBhIG5vbi1ib29sZWFuIGF0dHJpYnV0ZSBgXFx3K2BcXC4vLnRlc3QobWVzc2FnZSkgfHxcbi8vICAgICAgIC9XYXJuaW5nOiBbXFx3XFxzXSsgaGFzIGJlZW4gZXh0cmFjdGVkIGZyb20gcmVhY3QtbmF0aXZlIGNvcmUvLnRlc3QobWVzc2FnZSkpXG4vLyAgICkge1xuLy8gICAgIC8vIE5PT1Bcbi8vICAgfSBlbHNlIHtcbi8vICAgICBvcmlnaW5hbENvbnNvbGVFcnJvcihtZXNzYWdlKVxuLy8gICB9XG4vLyB9XG5cbi8vIGRlY2xhcmUgY29uc3QgcHJvY2VzczogYW55XG5cbi8vIGlmIChwcm9jZXNzLmVudi5BTExPV19DT05TT0xFX0xPR1MgIT09IFwidHJ1ZVwiKSB7XG4vLyAgIGNvbnN0IG9yaWdpbmFsTG9nZ2VycyA9IHtcbi8vICAgICBlcnJvcjogY29uc29sZS5lcnJvcixcbi8vICAgICB3YXJuOiBjb25zb2xlLndhcm4sXG4vLyAgIH1cblxuLy8gICBmdW5jdGlvbiBsb2dUb0Vycm9yKHR5cGUsIGFyZ3MsIGNvbnN0cnVjdG9yT3B0OiAoKSA9PiB2b2lkKSB7XG4vLyAgICAgY29uc3QgZXhwbGFuYXRpb24gPVxuLy8gICAgICAgY2hhbGsud2hpdGUoYFRlc3QgZmFpbGVkIGR1ZSB0byBcXGBjb25zb2xlLiR7dHlwZX0o4oCmKVxcYCBjYWxsLlxcbmApICtcbi8vICAgICAgIGNoYWxrLmdyYXkoXCIoRGlzYWJsZSB3aXRoIEFMTE9XX0NPTlNPTEVfTE9HUz10cnVlIGVudiB2YXJpYWJsZS4pXFxuXFxuXCIpXG4vLyAgICAgaWYgKGFyZ3NbMF0gaW5zdGFuY2VvZiBFcnJvcikge1xuLy8gICAgICAgY29uc3QgbXNnID0gZXhwbGFuYXRpb24gKyBjaGFsay5yZWQoYXJnc1swXS5tZXNzYWdlKVxuLy8gICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKG1zZylcbi8vICAgICAgIGVyci5zdGFjayA9IGFyZ3NbMF0uc3RhY2sucmVwbGFjZShgRXJyb3I6ICR7YXJnc1swXS5tZXNzYWdlfWAsIG1zZylcbi8vICAgICAgIHJldHVybiBlcnJcbi8vICAgICB9IGVsc2UgaWYgKFxuLy8gICAgICAgLy8gQmVjYXVzZSB3ZSB1c2UgcmVhY3QtZG9tIGluIHRlc3RzIHRvIHJlbmRlciByZWFjdC1uYXRpdmUgY29tcG9uZW50cywgYSBmZXcgd2FybmluZ3MgYXJlIGJlaW5nIGxvZ2dlZCB0aGF0IHdlIGRvXG4vLyAgICAgICAvLyBub3QgY2FyZSBmb3IsIHNvIGlnbm9yZSB0aGVzZS5cbi8vICAgICAgICFhcmdzWzBdLmluY2x1ZGVzKFwiaXMgdXNpbmcgaW5jb3JyZWN0IGNhc2luZ1wiKSAmJlxuLy8gICAgICAgIWFyZ3NbMF0uaW5jbHVkZXMoXCJpcyB1bnJlY29nbml6ZWQgaW4gdGhpcyBicm93c2VyXCIpICYmXG4vLyAgICAgICAhW2FyZ3NbMF0uaW5jbHVkZXMoXCJSZWFjdCBkb2VzIG5vdCByZWNvZ25pemUgdGhlIGB0ZXN0SURgIHByb3Agb24gYSBET00gZWxlbWVudC5cIildXG4vLyAgICAgKSB7XG4vLyAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoZXhwbGFuYXRpb24gKyBjaGFsay5yZWQoZm9ybWF0KGFyZ3NbMF0sIC4uLmFyZ3Muc2xpY2UoMSkpKSlcbi8vICAgICAgIDsoRXJyb3IgYXMgYW55KS5jYXB0dXJlU3RhY2tUcmFjZShlcnIsIGNvbnN0cnVjdG9yT3B0KVxuLy8gICAgICAgcmV0dXJuIGVyclxuLy8gICAgIH1cbi8vICAgICByZXR1cm4gbnVsbFxuLy8gICB9XG5cbi8vICAgYmVmb3JlRWFjaChkb25lID0+IHtcbi8vICAgICBjb25zdCB0eXBlczogQXJyYXk8XCJlcnJvclwiIHwgXCJ3YXJuXCI+ID0gW1wiZXJyb3JcIiwgXCJ3YXJuXCJdXG4vLyAgICAgdHlwZXMuZm9yRWFjaCh0eXBlID0+IHtcbi8vICAgICAgIC8vIERvbid0IHNweSBvbiBsb2dnZXJzIHRoYXQgaGF2ZSBiZWVuIG1vZGlmaWVkIGJ5IHRoZSBjdXJyZW50IHRlc3QuXG4vLyAgICAgICBpZiAoY29uc29sZVt0eXBlXSA9PT0gb3JpZ2luYWxMb2dnZXJzW3R5cGVdKSB7XG4vLyAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSAoLi4uYXJncykgPT4ge1xuLy8gICAgICAgICAgIGNvbnN0IGVycm9yID0gbG9nVG9FcnJvcih0eXBlLCBhcmdzLCBoYW5kbGVyKVxuLy8gICAgICAgICAgIGlmIChlcnJvcikge1xuLy8gICAgICAgICAgICAgZG9uZS5mYWlsKGVycm9yKVxuLy8gICAgICAgICAgIH1cbi8vICAgICAgICAgfVxuLy8gICAgICAgICBqZXN0LnNweU9uKGNvbnNvbGUsIHR5cGUpLm1vY2tJbXBsZW1lbnRhdGlvbihoYW5kbGVyKVxuLy8gICAgICAgfVxuLy8gICAgIH0pXG4vLyAgICAgZG9uZSgpIC8vIGl0IGlzIGltcG9ydGFudCB0byBjYWxsIHRoaXMgaGVyZSBvciBldmVyeSB0ZXN0IHdpbGwgdGltZW91dFxuLy8gICB9KVxuLy8gfVxuXG5qZXN0Lm1vY2soXCJyZWFjdC1uYXRpdmVcIiwgKCkgPT4gKHtcbiAgQXN5bmNTdG9yYWdlOiB7XG4gICAgc2V0SXRlbTogamVzdC5mbigoKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICByZXNvbHZlKG51bGwpXG4gICAgICB9KVxuICAgIH0pLFxuICAgIG11bHRpU2V0OiBqZXN0LmZuKCgpID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHJlc29sdmUobnVsbClcbiAgICAgIH0pXG4gICAgfSksXG4gICAgZ2V0SXRlbTogamVzdC5mbigoKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICByZXNvbHZlKHsgYmFnOiB7IGl0ZW1zOiBbXSB9IH0pXG4gICAgICB9KVxuICAgIH0pLFxuICAgIG11bHRpR2V0OiBqZXN0LmZuKCgpID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHJlc29sdmUobnVsbClcbiAgICAgIH0pXG4gICAgfSksXG4gICAgcmVtb3ZlSXRlbTogamVzdC5mbigoKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICByZXNvbHZlKG51bGwpXG4gICAgICB9KVxuICAgIH0pLFxuICAgIGdldEFsbEtleXM6IGplc3QuZm4oKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICByZXNvbHZlKFtcIm9uZVwiLCBcInR3b1wiLCBcInRocmVlXCJdKVxuICAgICAgfSlcbiAgICB9KSxcbiAgfSxcbn0pKVxuIl19