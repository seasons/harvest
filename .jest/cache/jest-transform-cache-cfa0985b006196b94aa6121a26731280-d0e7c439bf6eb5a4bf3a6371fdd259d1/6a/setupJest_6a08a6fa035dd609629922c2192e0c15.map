{"version":3,"sources":["setupJest.ts"],"names":["jest","mock","AsyncStorage","setItem","fn","Promise","resolve","reject","multiSet","getItem","bag","items","multiGet","removeItem","getAllKeys"],"mappings":"AAyFAA,IAAI,CAACC,IAAL,CAAU,cAAV,EAA0B;AAAA,SAAO;AAC/BC,IAAAA,YAAY,EAAE;AACZC,MAAAA,OAAO,EAAEH,IAAI,CAACI,EAAL,CAAQ,YAAM;AACrB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCD,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD,SAFM,CAAP;AAGD,OAJQ,CADG;AAMZE,MAAAA,QAAQ,EAAER,IAAI,CAACI,EAAL,CAAQ,YAAM;AACtB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCD,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD,SAFM,CAAP;AAGD,OAJS,CANE;AAWZG,MAAAA,OAAO,EAAET,IAAI,CAACI,EAAL,CAAQ,YAAM;AACrB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCD,UAAAA,OAAO,CAAC;AAAEI,YAAAA,GAAG,EAAE;AAAEC,cAAAA,KAAK,EAAE;AAAT;AAAP,WAAD,CAAP;AACD,SAFM,CAAP;AAGD,OAJQ,CAXG;AAgBZC,MAAAA,QAAQ,EAAEZ,IAAI,CAACI,EAAL,CAAQ,YAAM;AACtB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCD,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD,SAFM,CAAP;AAGD,OAJS,CAhBE;AAqBZO,MAAAA,UAAU,EAAEb,IAAI,CAACI,EAAL,CAAQ,YAAM;AACxB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCD,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD,SAFM,CAAP;AAGD,OAJW,CArBA;AA0BZQ,MAAAA,UAAU,EAAEd,IAAI,CAACI,EAAL,CAAQ,YAAM;AACxB,eAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5BA,UAAAA,OAAO,CAAC,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,CAAD,CAAP;AACD,SAFM,CAAP;AAGD,OAJW;AA1BA;AADiB,GAAP;AAAA,CAA1B","sourcesContent":["// // re: https://github.com/facebook/react-native/issues/19955\n// // and https://github.com/facebook/metro/pull/198\n// //\n// // import applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\"\n// // import initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\"\n// // declare var babelHelpers: any\n// // Object.assign(babelHelpers, { applyDecoratedDescriptor, initializerDefineProperty })\n// // import \"@babel/runtime\"\n\n// import chalk from \"chalk\"\n// import Enzyme from \"enzyme\"\n// import Adapter from \"enzyme-adapter-react-16\"\n// import expect from \"expect\"\n// import { format } from \"util\"\n\n// Enzyme.configure({ adapter: new Adapter() })\n\n// // Waiting on https://github.com/thymikee/snapshot-diff/pull/17\n// import diff from \"snapshot-diff\"\n// expect.extend({ toMatchDiffSnapshot: (diff as any).toMatchDiffSnapshot })\n\n// const originalConsoleError = console.error\n\n// // TODO: Remove once we're no longer using JSDOM for enzyme static rendering.\n// console.error = (message?: any) => {\n//   if (\n//     typeof message === \"string\" &&\n//     (message.includes(\"is using uppercase HTML. Always use lowercase HTML tags in React.\") ||\n//       /Warning: React does not recognize the `\\w+` prop on a DOM element\\./.test(message) ||\n//       /Warning: The tag <\\w+> is unrecognized in this browser\\./.test(message) ||\n//       /Warning: Unknown event handler property `\\w+`\\./.test(message) ||\n//       /Warning: Received `\\w+` for a non-boolean attribute `\\w+`\\./.test(message) ||\n//       /Warning: [\\w\\s]+ has been extracted from react-native core/.test(message))\n//   ) {\n//     // NOOP\n//   } else {\n//     originalConsoleError(message)\n//   }\n// }\n\n// declare const process: any\n\n// if (process.env.ALLOW_CONSOLE_LOGS !== \"true\") {\n//   const originalLoggers = {\n//     error: console.error,\n//     warn: console.warn,\n//   }\n\n//   function logToError(type, args, constructorOpt: () => void) {\n//     const explanation =\n//       chalk.white(`Test failed due to \\`console.${type}(â€¦)\\` call.\\n`) +\n//       chalk.gray(\"(Disable with ALLOW_CONSOLE_LOGS=true env variable.)\\n\\n\")\n//     if (args[0] instanceof Error) {\n//       const msg = explanation + chalk.red(args[0].message)\n//       const err = new Error(msg)\n//       err.stack = args[0].stack.replace(`Error: ${args[0].message}`, msg)\n//       return err\n//     } else if (\n//       // Because we use react-dom in tests to render react-native components, a few warnings are being logged that we do\n//       // not care for, so ignore these.\n//       !args[0].includes(\"is using incorrect casing\") &&\n//       !args[0].includes(\"is unrecognized in this browser\") &&\n//       ![args[0].includes(\"React does not recognize the `testID` prop on a DOM element.\")]\n//     ) {\n//       const err = new Error(explanation + chalk.red(format(args[0], ...args.slice(1))))\n//       ;(Error as any).captureStackTrace(err, constructorOpt)\n//       return err\n//     }\n//     return null\n//   }\n\n//   beforeEach(done => {\n//     const types: Array<\"error\" | \"warn\"> = [\"error\", \"warn\"]\n//     types.forEach(type => {\n//       // Don't spy on loggers that have been modified by the current test.\n//       if (console[type] === originalLoggers[type]) {\n//         const handler = (...args) => {\n//           const error = logToError(type, args, handler)\n//           if (error) {\n//             done.fail(error)\n//           }\n//         }\n//         jest.spyOn(console, type).mockImplementation(handler)\n//       }\n//     })\n//     done() // it is important to call this here or every test will timeout\n//   })\n// }\n\njest.mock(\"react-native\", () => ({\n  AsyncStorage: {\n    setItem: jest.fn(() => {\n      return new Promise((resolve, reject) => {\n        resolve(null)\n      })\n    }),\n    multiSet: jest.fn(() => {\n      return new Promise((resolve, reject) => {\n        resolve(null)\n      })\n    }),\n    getItem: jest.fn(() => {\n      return new Promise((resolve, reject) => {\n        resolve({ bag: { items: [] } })\n      })\n    }),\n    multiGet: jest.fn(() => {\n      return new Promise((resolve, reject) => {\n        resolve(null)\n      })\n    }),\n    removeItem: jest.fn(() => {\n      return new Promise((resolve, reject) => {\n        resolve(null)\n      })\n    }),\n    getAllKeys: jest.fn(() => {\n      return new Promise(resolve => {\n        resolve([\"one\", \"two\", \"three\"])\n      })\n    }),\n  },\n}))\n"]}