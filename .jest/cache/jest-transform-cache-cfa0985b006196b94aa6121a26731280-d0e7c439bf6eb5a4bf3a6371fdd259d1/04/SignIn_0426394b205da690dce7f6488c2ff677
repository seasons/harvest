f47cd6b66bbe4082b66df2e4102f46da
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SignIn = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _Components = require("../../Components");

var _Typography = require("../../Components/Typography");

var _reactNative = require("react-native");

var _asyncStorage = _interopRequireDefault(require("@react-native-community/async-storage"));

var _Utils = require("../../Utils");

var _reactNativeAuth = _interopRequireDefault(require("react-native-auth0"));

var _Navigation = require("../../Navigation");

var credentials = {
  domain: "seasons.auth0.com",
  clientId: "ovWzqnt8Qv5lQ4dhzpxdFb2u4zjOg3Cm"
};
var auth0 = new _reactNativeAuth.default(credentials);

var SignIn = function (_React$Component) {
  (0, _inherits2.default)(SignIn, _React$Component);

  function SignIn() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, SignIn);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(SignIn)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      email: "",
      password: "",
      emailComplete: false,
      showError: false
    };

    _this.onChangeText = function (key, val) {
      _this.setState((0, _defineProperty2.default)({}, key, val));

      if (key === "email") {
        var emailValidationRegex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;

        _this.setState({
          emailComplete: emailValidationRegex.test(val)
        });
      }
    };

    _this.handleSignIn = function () {
      var _this$state = _this.state,
          email = _this$state.email,
          password = _this$state.password,
          emailComplete = _this$state.emailComplete;

      if (emailComplete && password.length) {
        _this.login(email, password);
      }
    };

    _this.handleResetPassword = function () {};

    _this.handleApply = function () {};

    return _this;
  }

  (0, _createClass2.default)(SignIn, [{
    key: "onSuccess",
    value: function onSuccess(credentials) {
      var _this2 = this;

      auth0.auth.userInfo({
        token: credentials.accessToken
      }).then(function (profile) {
        _this2.props.onAuth(credentials, profile);
      }).catch(function (error) {
        return _this2.alert("Error", error.json.error_description);
      });
    }
  }, {
    key: "login",
    value: function login(username, password) {
      var _this3 = this;

      auth0.auth.passwordRealm({
        username: username,
        password: password,
        realm: "Username-Password-Authentication"
      }).then(function (success) {
        _asyncStorage.default.setItem("userSession", JSON.stringify(success));

        (0, _Navigation.goHome)();
      }).catch(function (error) {
        _this3.alert("Error", error.json.description);
      });
    }
  }, {
    key: "createUser",
    value: function createUser(username, password) {
      var _this4 = this;

      auth0.auth.createUser({
        email: username,
        password: password,
        connection: "Username-Password-Authentication"
      }).then(function (success) {
        console.log(success);

        _this4.alert("Success", "New user created");
      }).catch(function (error) {
        _this4.alert("Error", error.json.description);
      });
    }
  }, {
    key: "webAuth",
    value: function webAuth(connection) {
      var _this5 = this;

      auth0.webAuth.authorize({
        scope: "openid profile email",
        connection: connection,
        audience: "https://" + credentials.domain + "/userinfo"
      }).then(function (credentials) {
        _this5.onSuccess(credentials);
      }).catch(function (error) {
        return _this5.alert("Error", error.error_description);
      });
    }
  }, {
    key: "alert",
    value: function alert(title, message) {
      this.setState({
        showError: true
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this6 = this;

      var _this$state2 = this.state,
          emailComplete = _this$state2.emailComplete,
          password = _this$state2.password;
      var disabled = !(emailComplete && password.length);
      return _react.default.createElement(_reactNative.SafeAreaView, {
        style: {
          flex: 1,
          backgroundColor: (0, _Utils.color)("black")
        }
      }, _react.default.createElement(_Components.Theme, null, _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_Components.Flex, {
        flexDirection: "column",
        justifyContent: "space-between",
        style: {
          flex: 1
        }
      }, _react.default.createElement(_Components.Box, {
        p: 2,
        mt: 6
      }, _react.default.createElement(_Components.Sans, {
        color: "white",
        size: "3"
      }, "Welcome"), _react.default.createElement(_Components.Spacer, {
        mb: 2
      }), _react.default.createElement(_Components.TextInput, {
        placeholder: "Email",
        variant: "dark",
        textContentType: "Email",
        inputKey: "email",
        onChangeText: this.onChangeText
      }), _react.default.createElement(_Components.Spacer, {
        mb: 2
      }), _react.default.createElement(_Components.TextInput, {
        secureTextEntry: true,
        placeholder: "Password",
        variant: "dark",
        inputKey: "password",
        textContentType: "Password",
        onChangeText: this.onChangeText
      }), _react.default.createElement(_Components.Spacer, {
        mb: 2
      }), _react.default.createElement(_Typography.Text, null, _react.default.createElement(_Components.Sans, {
        size: "2",
        color: "gray"
      }, "Forget password?"), " ", _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
        onPress: this.handleResetPassword
      }, _react.default.createElement(_Components.Sans, {
        style: {
          textDecorationLine: "underline"
        },
        size: "2",
        color: "white"
      }, "Reset"))), _react.default.createElement(_Components.Spacer, {
        mb: 4
      }), _react.default.createElement(_Components.Button, {
        onPress: function onPress() {
          return _this6.handleSignIn();
        },
        variant: emailComplete && password.length ? "primaryLight" : "secondaryLight"
      }, "Sign in")), _react.default.createElement(_Components.Box, {
        p: 2
      }, _react.default.createElement(_Typography.Text, {
        style: {
          textAlign: "center"
        }
      }, _react.default.createElement(_Components.Sans, {
        size: "2",
        color: "gray"
      }, "Not a member?"), " ", _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
        onPress: this.handleApply
      }, _react.default.createElement(_Components.Sans, {
        style: {
          textDecorationLine: "underline"
        },
        size: "2",
        color: "white"
      }, "Apply"))))), _react.default.createElement(_Components.ErrorPopUp, {
        buttonText: "Got it",
        note: "Your email or password may be incorrect. Not a member? Apply for the waitlist.",
        title: "Oops! Try again",
        show: this.state.showError,
        onClose: function onClose() {
          return _this6.setState({
            showError: false
          });
        }
      }))));
    }
  }]);
  return SignIn;
}(_react.default.Component);

exports.SignIn = SignIn;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,