c368b9fb4b967b83c1ccce0b3ffb20a3
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var PixelRatio = require('PixelRatio');

var Platform = require('Platform');

var assetPathUtils = require("./assetPathUtils");

var invariant = require('invariant');

function getScaledAssetPath(asset) {
  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
  var assetDir = assetPathUtils.getBasePath(asset);
  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}

function getAssetPathInDrawableFolder(asset) {
  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
  var drawbleFolder = assetPathUtils.getAndroidResourceFolderName(asset, scale);
  var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);
  return drawbleFolder + '/' + fileName + '.' + asset.type;
}

var AssetSourceResolver = function () {
  function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
    (0, _classCallCheck2.default)(this, AssetSourceResolver);
    this.serverUrl = serverUrl;
    this.jsbundleUrl = jsbundleUrl;
    this.asset = asset;
  }

  (0, _createClass2.default)(AssetSourceResolver, [{
    key: "isLoadedFromServer",
    value: function isLoadedFromServer() {
      return !!this.serverUrl;
    }
  }, {
    key: "isLoadedFromFileSystem",
    value: function isLoadedFromFileSystem() {
      return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
    }
  }, {
    key: "defaultAsset",
    value: function defaultAsset() {
      if (this.isLoadedFromServer()) {
        return this.assetServerURL();
      }

      if (Platform.OS === 'android') {
        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
      } else {
        return this.scaledAssetURLNearBundle();
      }
    }
  }, {
    key: "assetServerURL",
    value: function assetServerURL() {
      invariant(!!this.serverUrl, 'need server to load from');
      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
    }
  }, {
    key: "scaledAssetPath",
    value: function scaledAssetPath() {
      return this.fromSource(getScaledAssetPath(this.asset));
    }
  }, {
    key: "scaledAssetURLNearBundle",
    value: function scaledAssetURLNearBundle() {
      var path = this.jsbundleUrl || 'file://';
      return this.fromSource(path + getScaledAssetPath(this.asset));
    }
  }, {
    key: "resourceIdentifierWithoutScale",
    value: function resourceIdentifierWithoutScale() {
      invariant(Platform.OS === 'android', 'resource identifiers work on Android');
      return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));
    }
  }, {
    key: "drawableFolderInBundle",
    value: function drawableFolderInBundle() {
      var path = this.jsbundleUrl || 'file://';
      return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
    }
  }, {
    key: "fromSource",
    value: function fromSource(source) {
      return {
        __packager_asset: true,
        width: this.asset.width,
        height: this.asset.height,
        uri: source,
        scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())
      };
    }
  }], [{
    key: "pickScale",
    value: function pickScale(scales, deviceScale) {
      for (var i = 0; i < scales.length; i++) {
        if (scales[i] >= deviceScale) {
          return scales[i];
        }
      }

      return scales[scales.length - 1] || 1;
    }
  }]);
  return AssetSourceResolver;
}();

module.exports = AssetSourceResolver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFzc2V0U291cmNlUmVzb2x2ZXIuanMiXSwibmFtZXMiOlsiUGl4ZWxSYXRpbyIsInJlcXVpcmUiLCJQbGF0Zm9ybSIsImFzc2V0UGF0aFV0aWxzIiwiaW52YXJpYW50IiwiZ2V0U2NhbGVkQXNzZXRQYXRoIiwiYXNzZXQiLCJzY2FsZSIsIkFzc2V0U291cmNlUmVzb2x2ZXIiLCJwaWNrU2NhbGUiLCJzY2FsZXMiLCJnZXQiLCJzY2FsZVN1ZmZpeCIsImFzc2V0RGlyIiwiZ2V0QmFzZVBhdGgiLCJuYW1lIiwidHlwZSIsImdldEFzc2V0UGF0aEluRHJhd2FibGVGb2xkZXIiLCJkcmF3YmxlRm9sZGVyIiwiZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZSIsImZpbGVOYW1lIiwiZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllciIsInNlcnZlclVybCIsImpzYnVuZGxlVXJsIiwic3RhcnRzV2l0aCIsImlzTG9hZGVkRnJvbVNlcnZlciIsImFzc2V0U2VydmVyVVJMIiwiT1MiLCJpc0xvYWRlZEZyb21GaWxlU3lzdGVtIiwiZHJhd2FibGVGb2xkZXJJbkJ1bmRsZSIsInJlc291cmNlSWRlbnRpZmllcldpdGhvdXRTY2FsZSIsInNjYWxlZEFzc2V0VVJMTmVhckJ1bmRsZSIsImZyb21Tb3VyY2UiLCJoYXNoIiwicGF0aCIsInNvdXJjZSIsIl9fcGFja2FnZXJfYXNzZXQiLCJ3aWR0aCIsImhlaWdodCIsInVyaSIsImRldmljZVNjYWxlIiwiaSIsImxlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVNBOzs7Ozs7OztBQVlBLElBQU1BLFVBQVUsR0FBR0MsT0FBTyxDQUFDLFlBQUQsQ0FBMUI7O0FBQ0EsSUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsVUFBRCxDQUF4Qjs7QUFFQSxJQUFNRSxjQUFjLEdBQUdGLE9BQU8sb0JBQTlCOztBQUNBLElBQU1HLFNBQVMsR0FBR0gsT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0FBS0EsU0FBU0ksa0JBQVQsQ0FBNEJDLEtBQTVCLEVBQTJDO0FBQ3pDLE1BQU1DLEtBQUssR0FBR0MsbUJBQW1CLENBQUNDLFNBQXBCLENBQThCSCxLQUFLLENBQUNJLE1BQXBDLEVBQTRDVixVQUFVLENBQUNXLEdBQVgsRUFBNUMsQ0FBZDtBQUNBLE1BQU1DLFdBQVcsR0FBR0wsS0FBSyxLQUFLLENBQVYsR0FBYyxFQUFkLEdBQW1CLE1BQU1BLEtBQU4sR0FBYyxHQUFyRDtBQUNBLE1BQU1NLFFBQVEsR0FBR1YsY0FBYyxDQUFDVyxXQUFmLENBQTJCUixLQUEzQixDQUFqQjtBQUNBLFNBQU9PLFFBQVEsR0FBRyxHQUFYLEdBQWlCUCxLQUFLLENBQUNTLElBQXZCLEdBQThCSCxXQUE5QixHQUE0QyxHQUE1QyxHQUFrRE4sS0FBSyxDQUFDVSxJQUEvRDtBQUNEOztBQUtELFNBQVNDLDRCQUFULENBQXNDWCxLQUF0QyxFQUFxRDtBQUNuRCxNQUFNQyxLQUFLLEdBQUdDLG1CQUFtQixDQUFDQyxTQUFwQixDQUE4QkgsS0FBSyxDQUFDSSxNQUFwQyxFQUE0Q1YsVUFBVSxDQUFDVyxHQUFYLEVBQTVDLENBQWQ7QUFDQSxNQUFNTyxhQUFhLEdBQUdmLGNBQWMsQ0FBQ2dCLDRCQUFmLENBQ3BCYixLQURvQixFQUVwQkMsS0FGb0IsQ0FBdEI7QUFJQSxNQUFNYSxRQUFRLEdBQUdqQixjQUFjLENBQUNrQiw0QkFBZixDQUE0Q2YsS0FBNUMsQ0FBakI7QUFDQSxTQUFPWSxhQUFhLEdBQUcsR0FBaEIsR0FBc0JFLFFBQXRCLEdBQWlDLEdBQWpDLEdBQXVDZCxLQUFLLENBQUNVLElBQXBEO0FBQ0Q7O0lBRUtSLG1CO0FBT0osK0JBQVljLFNBQVosRUFBZ0NDLFdBQWhDLEVBQXNEakIsS0FBdEQsRUFBNEU7QUFBQTtBQUMxRSxTQUFLZ0IsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxTQUFLQyxXQUFMLEdBQW1CQSxXQUFuQjtBQUNBLFNBQUtqQixLQUFMLEdBQWFBLEtBQWI7QUFDRDs7Ozt5Q0FFNkI7QUFDNUIsYUFBTyxDQUFDLENBQUMsS0FBS2dCLFNBQWQ7QUFDRDs7OzZDQUVpQztBQUNoQyxhQUFPLENBQUMsRUFBRSxLQUFLQyxXQUFMLElBQW9CLEtBQUtBLFdBQUwsQ0FBaUJDLFVBQWpCLENBQTRCLFNBQTVCLENBQXRCLENBQVI7QUFDRDs7O21DQUVtQztBQUNsQyxVQUFJLEtBQUtDLGtCQUFMLEVBQUosRUFBK0I7QUFDN0IsZUFBTyxLQUFLQyxjQUFMLEVBQVA7QUFDRDs7QUFFRCxVQUFJeEIsUUFBUSxDQUFDeUIsRUFBVCxLQUFnQixTQUFwQixFQUErQjtBQUM3QixlQUFPLEtBQUtDLHNCQUFMLEtBQ0gsS0FBS0Msc0JBQUwsRUFERyxHQUVILEtBQUtDLDhCQUFMLEVBRko7QUFHRCxPQUpELE1BSU87QUFDTCxlQUFPLEtBQUtDLHdCQUFMLEVBQVA7QUFDRDtBQUNGOzs7cUNBTXFDO0FBQ3BDM0IsTUFBQUEsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLa0IsU0FBUixFQUFtQiwwQkFBbkIsQ0FBVDtBQUNBLGFBQU8sS0FBS1UsVUFBTCxDQUNMLEtBQUtWLFNBQUwsR0FDRWpCLGtCQUFrQixDQUFDLEtBQUtDLEtBQU4sQ0FEcEIsR0FFRSxZQUZGLEdBR0VKLFFBQVEsQ0FBQ3lCLEVBSFgsR0FJRSxRQUpGLEdBS0UsS0FBS3JCLEtBQUwsQ0FBVzJCLElBTlIsQ0FBUDtBQVFEOzs7c0NBTXNDO0FBQ3JDLGFBQU8sS0FBS0QsVUFBTCxDQUFnQjNCLGtCQUFrQixDQUFDLEtBQUtDLEtBQU4sQ0FBbEMsQ0FBUDtBQUNEOzs7K0NBTStDO0FBQzlDLFVBQU00QixJQUFJLEdBQUcsS0FBS1gsV0FBTCxJQUFvQixTQUFqQztBQUNBLGFBQU8sS0FBS1MsVUFBTCxDQUFnQkUsSUFBSSxHQUFHN0Isa0JBQWtCLENBQUMsS0FBS0MsS0FBTixDQUF6QyxDQUFQO0FBQ0Q7OztxREFRcUQ7QUFDcERGLE1BQUFBLFNBQVMsQ0FDUEYsUUFBUSxDQUFDeUIsRUFBVCxLQUFnQixTQURULEVBRVAsc0NBRk8sQ0FBVDtBQUlBLGFBQU8sS0FBS0ssVUFBTCxDQUNMN0IsY0FBYyxDQUFDa0IsNEJBQWYsQ0FBNEMsS0FBS2YsS0FBakQsQ0FESyxDQUFQO0FBR0Q7Ozs2Q0FPNkM7QUFDNUMsVUFBTTRCLElBQUksR0FBRyxLQUFLWCxXQUFMLElBQW9CLFNBQWpDO0FBQ0EsYUFBTyxLQUFLUyxVQUFMLENBQWdCRSxJQUFJLEdBQUdqQiw0QkFBNEIsQ0FBQyxLQUFLWCxLQUFOLENBQW5ELENBQVA7QUFDRDs7OytCQUVVNkIsTSxFQUFxQztBQUM5QyxhQUFPO0FBQ0xDLFFBQUFBLGdCQUFnQixFQUFFLElBRGI7QUFFTEMsUUFBQUEsS0FBSyxFQUFFLEtBQUsvQixLQUFMLENBQVcrQixLQUZiO0FBR0xDLFFBQUFBLE1BQU0sRUFBRSxLQUFLaEMsS0FBTCxDQUFXZ0MsTUFIZDtBQUlMQyxRQUFBQSxHQUFHLEVBQUVKLE1BSkE7QUFLTDVCLFFBQUFBLEtBQUssRUFBRUMsbUJBQW1CLENBQUNDLFNBQXBCLENBQThCLEtBQUtILEtBQUwsQ0FBV0ksTUFBekMsRUFBaURWLFVBQVUsQ0FBQ1csR0FBWCxFQUFqRDtBQUxGLE9BQVA7QUFPRDs7OzhCQUVnQkQsTSxFQUF1QjhCLFcsRUFBNkI7QUFFbkUsV0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHL0IsTUFBTSxDQUFDZ0MsTUFBM0IsRUFBbUNELENBQUMsRUFBcEMsRUFBd0M7QUFDdEMsWUFBSS9CLE1BQU0sQ0FBQytCLENBQUQsQ0FBTixJQUFhRCxXQUFqQixFQUE4QjtBQUM1QixpQkFBTzlCLE1BQU0sQ0FBQytCLENBQUQsQ0FBYjtBQUNEO0FBQ0Y7O0FBS0QsYUFBTy9CLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDZ0MsTUFBUCxHQUFnQixDQUFqQixDQUFOLElBQTZCLENBQXBDO0FBQ0Q7Ozs7O0FBR0hDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnBDLG1CQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgdHlwZSBSZXNvbHZlZEFzc2V0U291cmNlID0ge3xcbiAgK19fcGFja2FnZXJfYXNzZXQ6IGJvb2xlYW4sXG4gICt3aWR0aDogP251bWJlcixcbiAgK2hlaWdodDogP251bWJlcixcbiAgK3VyaTogc3RyaW5nLFxuICArc2NhbGU6IG51bWJlcixcbnx9O1xuXG5pbXBvcnQgdHlwZSB7UGFja2FnZXJBc3NldH0gZnJvbSAnQXNzZXRSZWdpc3RyeSc7XG5cbmNvbnN0IFBpeGVsUmF0aW8gPSByZXF1aXJlKCdQaXhlbFJhdGlvJyk7XG5jb25zdCBQbGF0Zm9ybSA9IHJlcXVpcmUoJ1BsYXRmb3JtJyk7XG5cbmNvbnN0IGFzc2V0UGF0aFV0aWxzID0gcmVxdWlyZSgnLi9hc3NldFBhdGhVdGlscycpO1xuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbi8qKlxuICogUmV0dXJucyBhIHBhdGggbGlrZSAnYXNzZXRzL0F3ZXNvbWVNb2R1bGUvaWNvbkAyeC5wbmcnXG4gKi9cbmZ1bmN0aW9uIGdldFNjYWxlZEFzc2V0UGF0aChhc3NldCk6IHN0cmluZyB7XG4gIGNvbnN0IHNjYWxlID0gQXNzZXRTb3VyY2VSZXNvbHZlci5waWNrU2NhbGUoYXNzZXQuc2NhbGVzLCBQaXhlbFJhdGlvLmdldCgpKTtcbiAgY29uc3Qgc2NhbGVTdWZmaXggPSBzY2FsZSA9PT0gMSA/ICcnIDogJ0AnICsgc2NhbGUgKyAneCc7XG4gIGNvbnN0IGFzc2V0RGlyID0gYXNzZXRQYXRoVXRpbHMuZ2V0QmFzZVBhdGgoYXNzZXQpO1xuICByZXR1cm4gYXNzZXREaXIgKyAnLycgKyBhc3NldC5uYW1lICsgc2NhbGVTdWZmaXggKyAnLicgKyBhc3NldC50eXBlO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBwYXRoIGxpa2UgJ2RyYXdhYmxlLW1kcGkvaWNvbi5wbmcnXG4gKi9cbmZ1bmN0aW9uIGdldEFzc2V0UGF0aEluRHJhd2FibGVGb2xkZXIoYXNzZXQpOiBzdHJpbmcge1xuICBjb25zdCBzY2FsZSA9IEFzc2V0U291cmNlUmVzb2x2ZXIucGlja1NjYWxlKGFzc2V0LnNjYWxlcywgUGl4ZWxSYXRpby5nZXQoKSk7XG4gIGNvbnN0IGRyYXdibGVGb2xkZXIgPSBhc3NldFBhdGhVdGlscy5nZXRBbmRyb2lkUmVzb3VyY2VGb2xkZXJOYW1lKFxuICAgIGFzc2V0LFxuICAgIHNjYWxlLFxuICApO1xuICBjb25zdCBmaWxlTmFtZSA9IGFzc2V0UGF0aFV0aWxzLmdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIoYXNzZXQpO1xuICByZXR1cm4gZHJhd2JsZUZvbGRlciArICcvJyArIGZpbGVOYW1lICsgJy4nICsgYXNzZXQudHlwZTtcbn1cblxuY2xhc3MgQXNzZXRTb3VyY2VSZXNvbHZlciB7XG4gIHNlcnZlclVybDogP3N0cmluZztcbiAgLy8gd2hlcmUgdGhlIGpzYnVuZGxlIGlzIGJlaW5nIHJ1biBmcm9tXG4gIGpzYnVuZGxlVXJsOiA/c3RyaW5nO1xuICAvLyB0aGUgYXNzZXQgdG8gcmVzb2x2ZVxuICBhc3NldDogUGFja2FnZXJBc3NldDtcblxuICBjb25zdHJ1Y3RvcihzZXJ2ZXJVcmw6ID9zdHJpbmcsIGpzYnVuZGxlVXJsOiA/c3RyaW5nLCBhc3NldDogUGFja2FnZXJBc3NldCkge1xuICAgIHRoaXMuc2VydmVyVXJsID0gc2VydmVyVXJsO1xuICAgIHRoaXMuanNidW5kbGVVcmwgPSBqc2J1bmRsZVVybDtcbiAgICB0aGlzLmFzc2V0ID0gYXNzZXQ7XG4gIH1cblxuICBpc0xvYWRlZEZyb21TZXJ2ZXIoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5zZXJ2ZXJVcmw7XG4gIH1cblxuICBpc0xvYWRlZEZyb21GaWxlU3lzdGVtKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhISh0aGlzLmpzYnVuZGxlVXJsICYmIHRoaXMuanNidW5kbGVVcmwuc3RhcnRzV2l0aCgnZmlsZTovLycpKTtcbiAgfVxuXG4gIGRlZmF1bHRBc3NldCgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICBpZiAodGhpcy5pc0xvYWRlZEZyb21TZXJ2ZXIoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXNzZXRTZXJ2ZXJVUkwoKTtcbiAgICB9XG5cbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgcmV0dXJuIHRoaXMuaXNMb2FkZWRGcm9tRmlsZVN5c3RlbSgpXG4gICAgICAgID8gdGhpcy5kcmF3YWJsZUZvbGRlckluQnVuZGxlKClcbiAgICAgICAgOiB0aGlzLnJlc291cmNlSWRlbnRpZmllcldpdGhvdXRTY2FsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zY2FsZWRBc3NldFVSTE5lYXJCdW5kbGUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhYnNvbHV0ZSBVUkwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZmV0Y2ggdGhlIGFzc2V0XG4gICAqIGZyb20gdGhlIGRldnNlcnZlclxuICAgKi9cbiAgYXNzZXRTZXJ2ZXJVUkwoKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgaW52YXJpYW50KCEhdGhpcy5zZXJ2ZXJVcmwsICduZWVkIHNlcnZlciB0byBsb2FkIGZyb20nKTtcbiAgICByZXR1cm4gdGhpcy5mcm9tU291cmNlKFxuICAgICAgdGhpcy5zZXJ2ZXJVcmwgK1xuICAgICAgICBnZXRTY2FsZWRBc3NldFBhdGgodGhpcy5hc3NldCkgK1xuICAgICAgICAnP3BsYXRmb3JtPScgK1xuICAgICAgICBQbGF0Zm9ybS5PUyArXG4gICAgICAgICcmaGFzaD0nICtcbiAgICAgICAgdGhpcy5hc3NldC5oYXNoLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZXMgdG8ganVzdCB0aGUgc2NhbGVkIGFzc2V0IGZpbGVuYW1lXG4gICAqIEUuZy4gJ2Fzc2V0cy9Bd2Vzb21lTW9kdWxlL2ljb25AMngucG5nJ1xuICAgKi9cbiAgc2NhbGVkQXNzZXRQYXRoKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIHJldHVybiB0aGlzLmZyb21Tb3VyY2UoZ2V0U2NhbGVkQXNzZXRQYXRoKHRoaXMuYXNzZXQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyB0byB3aGVyZSB0aGUgYnVuZGxlIGlzIHJ1bm5pbmcgZnJvbSwgd2l0aCBhIHNjYWxlZCBhc3NldCBmaWxlbmFtZVxuICAgKiBFLmcuICdmaWxlOi8vL3NkY2FyZC9idW5kbGUvYXNzZXRzL0F3ZXNvbWVNb2R1bGUvaWNvbkAyeC5wbmcnXG4gICAqL1xuICBzY2FsZWRBc3NldFVSTE5lYXJCdW5kbGUoKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuanNidW5kbGVVcmwgfHwgJ2ZpbGU6Ly8nO1xuICAgIHJldHVybiB0aGlzLmZyb21Tb3VyY2UocGF0aCArIGdldFNjYWxlZEFzc2V0UGF0aCh0aGlzLmFzc2V0KSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgbG9jYXRpb24gb2YgYXNzZXRzIGJ1bmRsZWQgd2l0aCB0aGUgYXBwLCBsb2NhdGVkIGJ5XG4gICAqIHJlc291cmNlIGlkZW50aWZpZXJcbiAgICogVGhlIEFuZHJvaWQgcmVzb3VyY2Ugc3lzdGVtIHBpY2tzIHRoZSBjb3JyZWN0IHNjYWxlLlxuICAgKiBFLmcuICdhc3NldHNfYXdlc29tZW1vZHVsZV9pY29uJ1xuICAgKi9cbiAgcmVzb3VyY2VJZGVudGlmaWVyV2l0aG91dFNjYWxlKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIGludmFyaWFudChcbiAgICAgIFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcsXG4gICAgICAncmVzb3VyY2UgaWRlbnRpZmllcnMgd29yayBvbiBBbmRyb2lkJyxcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmZyb21Tb3VyY2UoXG4gICAgICBhc3NldFBhdGhVdGlscy5nZXRBbmRyb2lkUmVzb3VyY2VJZGVudGlmaWVyKHRoaXMuYXNzZXQpLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogSWYgdGhlIGpzYnVuZGxlIGlzIHJ1bm5pbmcgZnJvbSBhIHNpZGVsb2FkIGxvY2F0aW9uLCB0aGlzIHJlc29sdmVzIGFzc2V0c1xuICAgKiByZWxhdGl2ZSB0byBpdHMgbG9jYXRpb25cbiAgICogRS5nLiAnZmlsZTovLy9zZGNhcmQvQXdlc29tZU1vZHVsZS9kcmF3YWJsZS1tZHBpL2ljb24ucG5nJ1xuICAgKi9cbiAgZHJhd2FibGVGb2xkZXJJbkJ1bmRsZSgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5qc2J1bmRsZVVybCB8fCAnZmlsZTovLyc7XG4gICAgcmV0dXJuIHRoaXMuZnJvbVNvdXJjZShwYXRoICsgZ2V0QXNzZXRQYXRoSW5EcmF3YWJsZUZvbGRlcih0aGlzLmFzc2V0KSk7XG4gIH1cblxuICBmcm9tU291cmNlKHNvdXJjZTogc3RyaW5nKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9fcGFja2FnZXJfYXNzZXQ6IHRydWUsXG4gICAgICB3aWR0aDogdGhpcy5hc3NldC53aWR0aCxcbiAgICAgIGhlaWdodDogdGhpcy5hc3NldC5oZWlnaHQsXG4gICAgICB1cmk6IHNvdXJjZSxcbiAgICAgIHNjYWxlOiBBc3NldFNvdXJjZVJlc29sdmVyLnBpY2tTY2FsZSh0aGlzLmFzc2V0LnNjYWxlcywgUGl4ZWxSYXRpby5nZXQoKSksXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBwaWNrU2NhbGUoc2NhbGVzOiBBcnJheTxudW1iZXI+LCBkZXZpY2VTY2FsZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAvLyBQYWNrYWdlciBndWFyYW50ZWVzIHRoYXQgYHNjYWxlc2AgYXJyYXkgaXMgc29ydGVkXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY2FsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChzY2FsZXNbaV0gPj0gZGV2aWNlU2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIHNjYWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBub3RoaW5nIG1hdGNoZXMsIGRldmljZSBzY2FsZSBpcyBsYXJnZXIgdGhhbiBhbnkgYXZhaWxhYmxlXG4gICAgLy8gc2NhbGVzLCBzbyB3ZSByZXR1cm4gdGhlIGJpZ2dlc3Qgb25lLiBVbmxlc3MgdGhlIGFycmF5IGlzIGVtcHR5LFxuICAgIC8vIGluIHdoaWNoIGNhc2Ugd2UgZGVmYXVsdCB0byAxXG4gICAgcmV0dXJuIHNjYWxlc1tzY2FsZXMubGVuZ3RoIC0gMV0gfHwgMTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFzc2V0U291cmNlUmVzb2x2ZXI7XG4iXX0=