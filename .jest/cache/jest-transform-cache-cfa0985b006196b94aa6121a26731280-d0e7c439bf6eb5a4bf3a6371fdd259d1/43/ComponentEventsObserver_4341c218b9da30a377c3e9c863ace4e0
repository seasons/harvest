901edb4413b19ae3afafe8934b20201c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ = require("lodash");

var ComponentEventsObserver = function () {
  function ComponentEventsObserver(nativeEventsReceiver, store) {
    (0, _classCallCheck2.default)(this, ComponentEventsObserver);
    this.nativeEventsReceiver = nativeEventsReceiver;
    this.store = store;
    this.listeners = {};
    this.alreadyRegistered = false;
    this.notifyComponentDidAppear = this.notifyComponentDidAppear.bind(this);
    this.notifyComponentDidDisappear = this.notifyComponentDidDisappear.bind(this);
    this.notifyNavigationButtonPressed = this.notifyNavigationButtonPressed.bind(this);
    this.notifyModalDismissed = this.notifyModalDismissed.bind(this);
    this.notifySearchBarUpdated = this.notifySearchBarUpdated.bind(this);
    this.notifySearchBarCancelPressed = this.notifySearchBarCancelPressed.bind(this);
    this.notifyPreviewCompleted = this.notifyPreviewCompleted.bind(this);
  }

  (0, _createClass2.default)(ComponentEventsObserver, [{
    key: "registerOnceForAllComponentEvents",
    value: function registerOnceForAllComponentEvents() {
      if (this.alreadyRegistered) {
        return;
      }

      this.alreadyRegistered = true;
      this.nativeEventsReceiver.registerComponentDidAppearListener(this.notifyComponentDidAppear);
      this.nativeEventsReceiver.registerComponentDidDisappearListener(this.notifyComponentDidDisappear);
      this.nativeEventsReceiver.registerNavigationButtonPressedListener(this.notifyNavigationButtonPressed);
      this.nativeEventsReceiver.registerModalDismissedListener(this.notifyModalDismissed);
      this.nativeEventsReceiver.registerSearchBarUpdatedListener(this.notifySearchBarUpdated);
      this.nativeEventsReceiver.registerSearchBarCancelPressedListener(this.notifySearchBarCancelPressed);
      this.nativeEventsReceiver.registerPreviewCompletedListener(this.notifyPreviewCompleted);
    }
  }, {
    key: "bindComponent",
    value: function bindComponent(component, componentId) {
      var _this = this;

      var computedComponentId = componentId || component.props.componentId;

      if (!_.isString(computedComponentId)) {
        throw new Error("bindComponent expects a component with a componentId in props or a componentId as the second argument");
      }

      if (_.isNil(this.listeners[computedComponentId])) {
        this.listeners[computedComponentId] = {};
      }

      var key = _.uniqueId();

      this.listeners[computedComponentId][key] = component;
      return {
        remove: function remove() {
          return _.unset(_this.listeners[computedComponentId], key);
        }
      };
    }
  }, {
    key: "unmounted",
    value: function unmounted(componentId) {
      _.unset(this.listeners, componentId);
    }
  }, {
    key: "notifyComponentDidAppear",
    value: function notifyComponentDidAppear(event) {
      event.passProps = this.store.getPropsForId(event.componentId);
      this.triggerOnAllListenersByComponentId(event, 'componentDidAppear');
    }
  }, {
    key: "notifyComponentDidDisappear",
    value: function notifyComponentDidDisappear(event) {
      this.triggerOnAllListenersByComponentId(event, 'componentDidDisappear');
    }
  }, {
    key: "notifyNavigationButtonPressed",
    value: function notifyNavigationButtonPressed(event) {
      this.triggerOnAllListenersByComponentId(event, 'navigationButtonPressed');
    }
  }, {
    key: "notifyModalDismissed",
    value: function notifyModalDismissed(event) {
      this.triggerOnAllListenersByComponentId(event, 'modalDismissed');
    }
  }, {
    key: "notifySearchBarUpdated",
    value: function notifySearchBarUpdated(event) {
      this.triggerOnAllListenersByComponentId(event, 'searchBarUpdated');
    }
  }, {
    key: "notifySearchBarCancelPressed",
    value: function notifySearchBarCancelPressed(event) {
      this.triggerOnAllListenersByComponentId(event, 'searchBarCancelPressed');
    }
  }, {
    key: "notifyPreviewCompleted",
    value: function notifyPreviewCompleted(event) {
      this.triggerOnAllListenersByComponentId(event, 'previewCompleted');
    }
  }, {
    key: "triggerOnAllListenersByComponentId",
    value: function triggerOnAllListenersByComponentId(event, method) {
      _.forEach(this.listeners[event.componentId], function (component) {
        if (component && component[method]) {
          component[method](event);
        }
      });
    }
  }]);
  return ComponentEventsObserver;
}();

exports.ComponentEventsObserver = ComponentEventsObserver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,