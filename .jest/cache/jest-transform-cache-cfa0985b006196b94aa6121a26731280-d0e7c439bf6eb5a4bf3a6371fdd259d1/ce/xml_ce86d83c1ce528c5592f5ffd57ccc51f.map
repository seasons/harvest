{"version":3,"sources":["xml.tsx"],"names":["tags","svg","Svg","circle","Circle","ellipse","Ellipse","g","G","text","Text","tspan","TSpan","textPath","TextPath","path","Path","polygon","Polygon","polyline","Polyline","line","Line","rect","Rect","use","Use","image","Image","symbol","Symbol","defs","Defs","linearGradient","LinearGradient","radialGradient","RadialGradient","stop","Stop","clipPath","ClipPath","pattern","Pattern","mask","Mask","ast","override","props","children","xml","parse","response","fetch","err","console","uri","setXml","fetchText","SvgFromXml","Component","state","prevProps","SvgFromUri","setState","upperCase","letter","camelCase","phrase","style","declarations","string","length","i","declaration","split","property","value","Tag","result","toSpaces","repeat","tabs","lines","source","nLines","column","before","beforeExec","beforeLine","after","afterExec","afterLine","pad","snippet","validNameCharacters","whitespace","quotemarks","currentElement","root","stack","locate","message","neutral","char","start","end","tag","getName","element","getAttributes","getStyle","selfClosing","error","index","name","allowSpaces","getAttributeValue","isNaN","getQuotedAttributeValue","getUnquotedAttributeValue","quotemark","escaped","r"],"mappings":"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","sourcesContent":["import React, {\n  Component,\n  useState,\n  useEffect,\n  useMemo,\n  ComponentType,\n} from 'react';\nimport Rect from './elements/Rect';\nimport Circle from './elements/Circle';\nimport Ellipse from './elements/Ellipse';\nimport Polygon from './elements/Polygon';\nimport Polyline from './elements/Polyline';\nimport Line from './elements/Line';\nimport Svg from './elements/Svg';\nimport Path from './elements/Path';\nimport G from './elements/G';\nimport Text from './elements/Text';\nimport TSpan from './elements/TSpan';\nimport TextPath from './elements/TextPath';\nimport Use from './elements/Use';\nimport Image from './elements/Image';\nimport Symbol from './elements/Symbol';\nimport Defs from './elements/Defs';\nimport LinearGradient from './elements/LinearGradient';\nimport RadialGradient from './elements/RadialGradient';\nimport Stop from './elements/Stop';\nimport ClipPath from './elements/ClipPath';\nimport Pattern from './elements/Pattern';\nimport Mask from './elements/Mask';\n\nexport const tags: { [tag: string]: ComponentType } = {\n  svg: Svg,\n  circle: Circle,\n  ellipse: Ellipse,\n  g: G,\n  text: Text,\n  tspan: TSpan,\n  textPath: TextPath,\n  path: Path,\n  polygon: Polygon,\n  polyline: Polyline,\n  line: Line,\n  rect: Rect,\n  use: Use,\n  image: Image,\n  symbol: Symbol,\n  defs: Defs,\n  linearGradient: LinearGradient,\n  radialGradient: RadialGradient,\n  stop: Stop,\n  clipPath: ClipPath,\n  pattern: Pattern,\n  mask: Mask,\n};\n\nfunction missingTag() {\n  return null;\n}\n\nexport interface AST {\n  tag: string;\n  children: (AST | string)[] | (JSX.Element | string)[];\n  props: {};\n  Tag: ComponentType;\n}\n\nexport type UriProps = { uri: string | null; override?: Object };\nexport type UriState = { xml: string | null };\n\nexport type XmlProps = { xml: string | null; override?: Object };\nexport type XmlState = { ast: AST | null };\n\nexport type AstProps = { ast: AST | null; override?: Object };\n\nexport function SvgAst({ ast, override }: AstProps) {\n  if (!ast) {\n    return null;\n  }\n  const { props, children } = ast;\n  return (\n    <Svg {...props} {...override}>\n      {children}\n    </Svg>\n  );\n}\n\nexport function SvgXml(props: XmlProps) {\n  const { xml, override } = props;\n  const ast = useMemo<AST | null>(() => (xml !== null ? parse(xml) : null), [\n    xml,\n  ]);\n  return <SvgAst ast={ast} override={override || props} />;\n}\n\nasync function fetchText(uri: string) {\n  const response = await fetch(uri);\n  return await response.text();\n}\n\nconst err = console.error.bind(console);\n\nexport function SvgUri(props: UriProps) {\n  const { uri } = props;\n  const [xml, setXml] = useState<string | null>(null);\n  useEffect(() => {\n    uri\n      ? fetchText(uri)\n          .then(setXml)\n          .catch(err)\n      : setXml(null);\n  }, [uri]);\n  return <SvgXml xml={xml} override={props} />;\n}\n\n// Extending Component is required for Animated support.\n\nexport class SvgFromXml extends Component<XmlProps, XmlState> {\n  state = { ast: null };\n  componentDidMount() {\n    this.parse(this.props.xml);\n  }\n  componentDidUpdate(prevProps: { xml: string | null }) {\n    const { xml } = this.props;\n    if (xml !== prevProps.xml) {\n      this.parse(xml);\n    }\n  }\n  parse(xml: string | null) {\n    try {\n      this.setState({ ast: xml ? parse(xml) : null });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  render() {\n    const {\n      props,\n      state: { ast },\n    } = this;\n    return <SvgAst ast={ast} override={props.override || props} />;\n  }\n}\n\nexport class SvgFromUri extends Component<UriProps, UriState> {\n  state = { xml: null };\n  componentDidMount() {\n    this.fetch(this.props.uri);\n  }\n  componentDidUpdate(prevProps: { uri: string | null }) {\n    const { uri } = this.props;\n    if (uri !== prevProps.uri) {\n      this.fetch(uri);\n    }\n  }\n  async fetch(uri: string | null) {\n    try {\n      this.setState({ xml: uri ? await fetchText(uri) : null });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  render() {\n    const {\n      props,\n      state: { xml },\n    } = this;\n    return <SvgFromXml xml={xml} override={props} />;\n  }\n}\n\nconst upperCase = (_match: string, letter: string) => letter.toUpperCase();\n\nconst camelCase = (phrase: string) =>\n  phrase.replace(/[:\\-]([a-z])/g, upperCase);\n\ntype Styles = { [property: string]: string };\n\nexport function getStyle(string: string): Styles {\n  const style: Styles = {};\n  const declarations = string.split(';');\n  const { length } = declarations;\n  for (let i = 0; i < length; i++) {\n    const declaration = declarations[i];\n    if (declaration.length !== 0) {\n      const split = declaration.split(':');\n      const property = split[0];\n      const value = split[1];\n      style[camelCase(property.trim())] = value.trim();\n    }\n  }\n  return style;\n}\n\nexport function astToReact(\n  value: AST | string,\n  index: number,\n): JSX.Element | string {\n  if (typeof value === 'object') {\n    const { Tag, props, children } = value;\n    return (\n      <Tag key={index} {...props}>\n        {(children as (AST | string)[]).map(astToReact)}\n      </Tag>\n    );\n  }\n  return value;\n}\n\n// slimmed down parser based on https://github.com/Rich-Harris/svg-parser\n\nfunction repeat(str: string, i: number) {\n  let result = '';\n  while (i--) {\n    result += str;\n  }\n  return result;\n}\n\nconst toSpaces = (tabs: string) => repeat('  ', tabs.length);\n\nfunction locate(source: string, i: number) {\n  const lines = source.split('\\n');\n  const nLines = lines.length;\n  let column = i;\n  let line = 0;\n  for (; line < nLines; line++) {\n    const { length } = lines[line];\n    if (column >= length) {\n      column -= length;\n    } else {\n      break;\n    }\n  }\n  const before = source.slice(0, i).replace(/^\\t+/, toSpaces);\n  const beforeExec = /(^|\\n).*$/.exec(before);\n  const beforeLine = (beforeExec && beforeExec[0]) || '';\n  const after = source.slice(i);\n  const afterExec = /.*(\\n|$)/.exec(after);\n  const afterLine = afterExec && afterExec[0];\n  const pad = repeat(' ', beforeLine.length);\n  const snippet = `${beforeLine}${afterLine}\\n${pad}^`;\n  return { line, column, snippet };\n}\n\nconst validNameCharacters = /[a-zA-Z0-9:_-]/;\nconst whitespace = /[\\s\\t\\r\\n]/;\nconst quotemarks = /['\"]/;\n\nexport function parse(source: string): AST | null {\n  const length = source.length;\n  let currentElement: AST | null = null;\n  let state = metadata;\n  let children = null;\n  let root: AST | null = null;\n  let stack: AST[] = [];\n\n  function error(message: string) {\n    const { line, column, snippet } = locate(source, i);\n    throw new Error(\n      `${message} (${line}:${column}). If this is valid SVG, it's probably a bug. Please raise an issue\\n\\n${snippet}`,\n    );\n  }\n\n  function metadata() {\n    while (\n      i + 1 < length &&\n      (source[i] !== '<' || !validNameCharacters.test(source[i + 1]))\n    ) {\n      i++;\n    }\n\n    return neutral();\n  }\n\n  function neutral() {\n    let text = '';\n    let char;\n    while (i < length && (char = source[i]) !== '<') {\n      text += char;\n      i += 1;\n    }\n\n    if (/\\S/.test(text)) {\n      children.push(text);\n    }\n\n    if (source[i] === '<') {\n      return openingTag;\n    }\n\n    return neutral;\n  }\n\n  function openingTag() {\n    const char = source[i];\n\n    if (char === '?') {\n      return neutral;\n    } // <?xml...\n\n    if (char === '!') {\n      const start = i + 1;\n      if (source.slice(start, i + 3) === '--') {\n        return comment;\n      }\n      const end = i + 8;\n      if (source.slice(start, end) === '[CDATA[') {\n        return cdata;\n      }\n      if (/doctype/i.test(source.slice(start, end))) {\n        return neutral;\n      }\n    }\n\n    if (char === '/') {\n      return closingTag;\n    }\n\n    const tag = getName();\n    const props: { style?: Styles | string } = {};\n    const element: AST = {\n      tag,\n      props,\n      children: [],\n      Tag: tags[tag] || missingTag,\n    };\n\n    if (currentElement) {\n      children.push(element);\n    } else {\n      root = element;\n    }\n\n    getAttributes(props);\n\n    const { style } = props;\n    if (typeof style === 'string') {\n      props.style = getStyle(style);\n    }\n\n    let selfClosing = false;\n\n    if (source[i] === '/') {\n      i += 1;\n      selfClosing = true;\n    }\n\n    if (source[i] !== '>') {\n      error('Expected >');\n    }\n\n    if (!selfClosing) {\n      currentElement = element;\n      ({ children } = element);\n      stack.push(element);\n    }\n\n    return neutral;\n  }\n\n  function comment() {\n    const index = source.indexOf('-->', i);\n    if (!~index) {\n      error('expected -->');\n    }\n\n    i = index + 2;\n    return neutral;\n  }\n\n  function cdata() {\n    const index = source.indexOf(']]>', i);\n    if (!~index) {\n      error('expected ]]>');\n    }\n\n    i = index + 2;\n    return neutral;\n  }\n\n  function closingTag() {\n    const tag = getName();\n\n    if (!tag) {\n      error('Expected tag name');\n    }\n\n    if (currentElement && tag !== currentElement.tag) {\n      error(\n        `Expected closing tag </${tag}> to match opening tag <${currentElement.tag}>`,\n      );\n    }\n\n    if (source[i] !== '>') {\n      error('Expected >');\n    }\n\n    stack.pop();\n    currentElement = stack[stack.length - 1];\n    if (currentElement) {\n      ({ children } = currentElement);\n    }\n\n    return neutral;\n  }\n\n  function getName() {\n    let name = '';\n    let char;\n    while (i < length && validNameCharacters.test((char = source[i]))) {\n      name += char;\n      i += 1;\n    }\n\n    return name;\n  }\n\n  function getAttributes(props: {\n    [x: string]: Styles | string | number | boolean | undefined;\n    style?: string | Styles | undefined;\n  }) {\n    while (i < length) {\n      if (!whitespace.test(source[i])) {\n        return;\n      }\n      allowSpaces();\n\n      const name = getName();\n      if (!name) {\n        return;\n      }\n\n      let value: boolean | number | string = true;\n\n      allowSpaces();\n      if (source[i] === '=') {\n        i += 1;\n        allowSpaces();\n\n        value = getAttributeValue();\n        if (!isNaN(+value) && value.trim() !== '') {\n          value = +value;\n        }\n      }\n\n      props[camelCase(name)] = value;\n    }\n  }\n\n  function getAttributeValue(): string {\n    return quotemarks.test(source[i])\n      ? getQuotedAttributeValue()\n      : getUnquotedAttributeValue();\n  }\n\n  function getUnquotedAttributeValue() {\n    let value = '';\n    do {\n      const char = source[i];\n      if (char === ' ' || char === '>' || char === '/') {\n        return value;\n      }\n\n      value += char;\n      i += 1;\n    } while (i < length);\n\n    return value;\n  }\n\n  function getQuotedAttributeValue() {\n    const quotemark = source[i++];\n\n    let value = '';\n    let escaped = false;\n\n    while (i < length) {\n      const char = source[i++];\n      if (char === quotemark && !escaped) {\n        return value;\n      }\n\n      if (char === '\\\\' && !escaped) {\n        escaped = true;\n      }\n\n      value += escaped ? `\\\\${char}` : char;\n      escaped = false;\n    }\n\n    return value;\n  }\n\n  function allowSpaces() {\n    while (i < length && whitespace.test(source[i])) {\n      i += 1;\n    }\n  }\n\n  let i = 0;\n  while (i < length) {\n    if (!state) {\n      error('Unexpected character');\n    }\n    state = state();\n    i += 1;\n  }\n\n  if (state !== neutral) {\n    error('Unexpected end of input');\n  }\n\n  if (root && typeof root === 'object') {\n    const r: AST = root;\n    const ast: (AST | string)[] = r.children as (AST | string)[];\n    r.children = ast.map(astToReact);\n  }\n\n  return root;\n}\n"]}