ae8b1ad33ef816a91dbe900f257b119d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ = require("lodash");

var LayoutType_1 = require("./LayoutType");

var LayoutTreeCrawler = function () {
  function LayoutTreeCrawler(store, optionsProcessor) {
    (0, _classCallCheck2.default)(this, LayoutTreeCrawler);
    this.store = store;
    this.optionsProcessor = optionsProcessor;
    this.crawl = this.crawl.bind(this);
  }

  (0, _createClass2.default)(LayoutTreeCrawler, [{
    key: "crawl",
    value: function crawl(node) {
      if (node.type === LayoutType_1.LayoutType.Component) {
        this.handleComponent(node);
      }

      this.optionsProcessor.processOptions(node.data.options);
      node.children.forEach(this.crawl);
    }
  }, {
    key: "handleComponent",
    value: function handleComponent(node) {
      this.assertComponentDataName(node);
      this.savePropsToStore(node);
      this.applyStaticOptions(node);
      node.data.passProps = undefined;
    }
  }, {
    key: "savePropsToStore",
    value: function savePropsToStore(node) {
      this.store.setPropsForId(node.id, node.data.passProps);
    }
  }, {
    key: "isComponentWithOptions",
    value: function isComponentWithOptions(component) {
      return component.options !== undefined;
    }
  }, {
    key: "applyStaticOptions",
    value: function applyStaticOptions(node) {
      node.data.options = _.merge({}, this.staticOptionsIfPossible(node), node.data.options);
    }
  }, {
    key: "staticOptionsIfPossible",
    value: function staticOptionsIfPossible(node) {
      var foundReactGenerator = this.store.getComponentClassForName(node.data.name);
      var reactComponent = foundReactGenerator ? foundReactGenerator() : undefined;

      if (reactComponent && this.isComponentWithOptions(reactComponent)) {
        return _.isFunction(reactComponent.options) ? reactComponent.options(node.data.passProps || {}) : reactComponent.options;
      }

      return {};
    }
  }, {
    key: "assertComponentDataName",
    value: function assertComponentDataName(component) {
      if (!component.data.name) {
        throw new Error('Missing component data.name');
      }
    }
  }]);
  return LayoutTreeCrawler;
}();

exports.LayoutTreeCrawler = LayoutTreeCrawler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxheW91dFRyZWVDcmF3bGVyLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiXyIsInJlcXVpcmUiLCJMYXlvdXRUeXBlXzEiLCJMYXlvdXRUcmVlQ3Jhd2xlciIsInN0b3JlIiwib3B0aW9uc1Byb2Nlc3NvciIsImNyYXdsIiwiYmluZCIsIm5vZGUiLCJ0eXBlIiwiTGF5b3V0VHlwZSIsIkNvbXBvbmVudCIsImhhbmRsZUNvbXBvbmVudCIsInByb2Nlc3NPcHRpb25zIiwiZGF0YSIsIm9wdGlvbnMiLCJjaGlsZHJlbiIsImZvckVhY2giLCJhc3NlcnRDb21wb25lbnREYXRhTmFtZSIsInNhdmVQcm9wc1RvU3RvcmUiLCJhcHBseVN0YXRpY09wdGlvbnMiLCJwYXNzUHJvcHMiLCJ1bmRlZmluZWQiLCJzZXRQcm9wc0ZvcklkIiwiaWQiLCJjb21wb25lbnQiLCJtZXJnZSIsInN0YXRpY09wdGlvbnNJZlBvc3NpYmxlIiwiZm91bmRSZWFjdEdlbmVyYXRvciIsImdldENvbXBvbmVudENsYXNzRm9yTmFtZSIsIm5hbWUiLCJyZWFjdENvbXBvbmVudCIsImlzQ29tcG9uZW50V2l0aE9wdGlvbnMiLCJpc0Z1bmN0aW9uIiwiRXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLElBQU1DLENBQUMsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBakI7O0FBQ0EsSUFBTUMsWUFBWSxHQUFHRCxPQUFPLGdCQUE1Qjs7SUFDTUUsaUI7QUFDRiw2QkFBWUMsS0FBWixFQUFtQkMsZ0JBQW5CLEVBQXFDO0FBQUE7QUFDakMsU0FBS0QsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsU0FBS0MsZ0JBQUwsR0FBd0JBLGdCQUF4QjtBQUNBLFNBQUtDLEtBQUwsR0FBYSxLQUFLQSxLQUFMLENBQVdDLElBQVgsQ0FBZ0IsSUFBaEIsQ0FBYjtBQUNIOzs7OzBCQUNLQyxJLEVBQU07QUFDUixVQUFJQSxJQUFJLENBQUNDLElBQUwsS0FBY1AsWUFBWSxDQUFDUSxVQUFiLENBQXdCQyxTQUExQyxFQUFxRDtBQUNqRCxhQUFLQyxlQUFMLENBQXFCSixJQUFyQjtBQUNIOztBQUNELFdBQUtILGdCQUFMLENBQXNCUSxjQUF0QixDQUFxQ0wsSUFBSSxDQUFDTSxJQUFMLENBQVVDLE9BQS9DO0FBQ0FQLE1BQUFBLElBQUksQ0FBQ1EsUUFBTCxDQUFjQyxPQUFkLENBQXNCLEtBQUtYLEtBQTNCO0FBQ0g7OztvQ0FDZUUsSSxFQUFNO0FBQ2xCLFdBQUtVLHVCQUFMLENBQTZCVixJQUE3QjtBQUNBLFdBQUtXLGdCQUFMLENBQXNCWCxJQUF0QjtBQUNBLFdBQUtZLGtCQUFMLENBQXdCWixJQUF4QjtBQUNBQSxNQUFBQSxJQUFJLENBQUNNLElBQUwsQ0FBVU8sU0FBVixHQUFzQkMsU0FBdEI7QUFDSDs7O3FDQUNnQmQsSSxFQUFNO0FBQ25CLFdBQUtKLEtBQUwsQ0FBV21CLGFBQVgsQ0FBeUJmLElBQUksQ0FBQ2dCLEVBQTlCLEVBQWtDaEIsSUFBSSxDQUFDTSxJQUFMLENBQVVPLFNBQTVDO0FBQ0g7OzsyQ0FDc0JJLFMsRUFBVztBQUM5QixhQUFPQSxTQUFTLENBQUNWLE9BQVYsS0FBc0JPLFNBQTdCO0FBQ0g7Ozt1Q0FDa0JkLEksRUFBTTtBQUNyQkEsTUFBQUEsSUFBSSxDQUFDTSxJQUFMLENBQVVDLE9BQVYsR0FBb0JmLENBQUMsQ0FBQzBCLEtBQUYsQ0FBUSxFQUFSLEVBQVksS0FBS0MsdUJBQUwsQ0FBNkJuQixJQUE3QixDQUFaLEVBQWdEQSxJQUFJLENBQUNNLElBQUwsQ0FBVUMsT0FBMUQsQ0FBcEI7QUFDSDs7OzRDQUN1QlAsSSxFQUFNO0FBQzFCLFVBQU1vQixtQkFBbUIsR0FBRyxLQUFLeEIsS0FBTCxDQUFXeUIsd0JBQVgsQ0FBb0NyQixJQUFJLENBQUNNLElBQUwsQ0FBVWdCLElBQTlDLENBQTVCO0FBQ0EsVUFBTUMsY0FBYyxHQUFHSCxtQkFBbUIsR0FBR0EsbUJBQW1CLEVBQXRCLEdBQTJCTixTQUFyRTs7QUFDQSxVQUFJUyxjQUFjLElBQUksS0FBS0Msc0JBQUwsQ0FBNEJELGNBQTVCLENBQXRCLEVBQW1FO0FBQy9ELGVBQU8vQixDQUFDLENBQUNpQyxVQUFGLENBQWFGLGNBQWMsQ0FBQ2hCLE9BQTVCLElBQXVDZ0IsY0FBYyxDQUFDaEIsT0FBZixDQUF1QlAsSUFBSSxDQUFDTSxJQUFMLENBQVVPLFNBQVYsSUFBdUIsRUFBOUMsQ0FBdkMsR0FBMkZVLGNBQWMsQ0FBQ2hCLE9BQWpIO0FBQ0g7O0FBQ0QsYUFBTyxFQUFQO0FBQ0g7Ozs0Q0FDdUJVLFMsRUFBVztBQUMvQixVQUFJLENBQUNBLFNBQVMsQ0FBQ1gsSUFBVixDQUFlZ0IsSUFBcEIsRUFBMEI7QUFDdEIsY0FBTSxJQUFJSSxLQUFKLENBQVUsNkJBQVYsQ0FBTjtBQUNIO0FBQ0o7Ozs7O0FBRUxwQyxPQUFPLENBQUNLLGlCQUFSLEdBQTRCQSxpQkFBNUIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xuY29uc3QgTGF5b3V0VHlwZV8xID0gcmVxdWlyZShcIi4vTGF5b3V0VHlwZVwiKTtcbmNsYXNzIExheW91dFRyZWVDcmF3bGVyIHtcbiAgICBjb25zdHJ1Y3RvcihzdG9yZSwgb3B0aW9uc1Byb2Nlc3Nvcikge1xuICAgICAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgICAgIHRoaXMub3B0aW9uc1Byb2Nlc3NvciA9IG9wdGlvbnNQcm9jZXNzb3I7XG4gICAgICAgIHRoaXMuY3Jhd2wgPSB0aGlzLmNyYXdsLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIGNyYXdsKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gTGF5b3V0VHlwZV8xLkxheW91dFR5cGUuQ29tcG9uZW50KSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUNvbXBvbmVudChub2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNQcm9jZXNzb3IucHJvY2Vzc09wdGlvbnMobm9kZS5kYXRhLm9wdGlvbnMpO1xuICAgICAgICBub2RlLmNoaWxkcmVuLmZvckVhY2godGhpcy5jcmF3bCk7XG4gICAgfVxuICAgIGhhbmRsZUNvbXBvbmVudChub2RlKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0Q29tcG9uZW50RGF0YU5hbWUobm9kZSk7XG4gICAgICAgIHRoaXMuc2F2ZVByb3BzVG9TdG9yZShub2RlKTtcbiAgICAgICAgdGhpcy5hcHBseVN0YXRpY09wdGlvbnMobm9kZSk7XG4gICAgICAgIG5vZGUuZGF0YS5wYXNzUHJvcHMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHNhdmVQcm9wc1RvU3RvcmUobm9kZSkge1xuICAgICAgICB0aGlzLnN0b3JlLnNldFByb3BzRm9ySWQobm9kZS5pZCwgbm9kZS5kYXRhLnBhc3NQcm9wcyk7XG4gICAgfVxuICAgIGlzQ29tcG9uZW50V2l0aE9wdGlvbnMoY29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnQub3B0aW9ucyAhPT0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBhcHBseVN0YXRpY09wdGlvbnMobm9kZSkge1xuICAgICAgICBub2RlLmRhdGEub3B0aW9ucyA9IF8ubWVyZ2Uoe30sIHRoaXMuc3RhdGljT3B0aW9uc0lmUG9zc2libGUobm9kZSksIG5vZGUuZGF0YS5vcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljT3B0aW9uc0lmUG9zc2libGUobm9kZSkge1xuICAgICAgICBjb25zdCBmb3VuZFJlYWN0R2VuZXJhdG9yID0gdGhpcy5zdG9yZS5nZXRDb21wb25lbnRDbGFzc0Zvck5hbWUobm9kZS5kYXRhLm5hbWUpO1xuICAgICAgICBjb25zdCByZWFjdENvbXBvbmVudCA9IGZvdW5kUmVhY3RHZW5lcmF0b3IgPyBmb3VuZFJlYWN0R2VuZXJhdG9yKCkgOiB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChyZWFjdENvbXBvbmVudCAmJiB0aGlzLmlzQ29tcG9uZW50V2l0aE9wdGlvbnMocmVhY3RDb21wb25lbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKHJlYWN0Q29tcG9uZW50Lm9wdGlvbnMpID8gcmVhY3RDb21wb25lbnQub3B0aW9ucyhub2RlLmRhdGEucGFzc1Byb3BzIHx8IHt9KSA6IHJlYWN0Q29tcG9uZW50Lm9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBhc3NlcnRDb21wb25lbnREYXRhTmFtZShjb21wb25lbnQpIHtcbiAgICAgICAgaWYgKCFjb21wb25lbnQuZGF0YS5uYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgY29tcG9uZW50IGRhdGEubmFtZScpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5MYXlvdXRUcmVlQ3Jhd2xlciA9IExheW91dFRyZWVDcmF3bGVyO1xuIl19