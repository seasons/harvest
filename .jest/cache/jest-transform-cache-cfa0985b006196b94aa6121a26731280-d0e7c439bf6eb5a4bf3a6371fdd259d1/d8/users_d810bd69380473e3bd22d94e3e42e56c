5766ab6987749161fa7d194e360a791b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _networking = _interopRequireDefault(require("../networking"));

var _whitelist = require("../utils/whitelist");

var _camel = require("../utils/camel");

var _error = _interopRequireDefault(require("./error"));

function responseHandler(response) {
  var exceptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (response.ok && response.json) {
    return (0, _camel.toCamelCase)(response.json, exceptions);
  }

  throw new _error.default(response);
}

var attributes = ['name', 'nickname', 'picture', 'user_id', 'user_metadata', 'app_metadata', 'email', 'email_verified', 'given_name', 'family_name'];

var Users = function () {
  function Users() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, Users);
    this.client = new _networking.default(options);

    if (!options.token) {
      throw new Error('Missing token in parameters');
    }
  }

  (0, _createClass2.default)(Users, [{
    key: "getUser",
    value: function getUser() {
      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var payload = (0, _whitelist.apply)({
        parameters: {
          id: {
            required: true
          }
        }
      }, parameters);
      return this.client.get("/api/v2/users/" + encodeURIComponent(payload.id)).then(function (response) {
        return responseHandler(response, {
          attributes: attributes,
          whitelist: true,
          rootOnly: true
        });
      });
    }
  }, {
    key: "patchUser",
    value: function patchUser() {
      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var payload = (0, _whitelist.apply)({
        parameters: {
          id: {
            required: true
          },
          metadata: {
            required: true
          }
        }
      }, parameters);
      return this.client.patch("/api/v2/users/" + encodeURIComponent(payload.id), {
        user_metadata: payload.metadata
      }).then(function (response) {
        return responseHandler(response, {
          attributes: attributes,
          whitelist: true,
          rootOnly: true
        });
      });
    }
  }]);
  return Users;
}();

exports.default = Users;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJzLmpzIl0sIm5hbWVzIjpbInJlc3BvbnNlSGFuZGxlciIsInJlc3BvbnNlIiwiZXhjZXB0aW9ucyIsIm9rIiwianNvbiIsIkF1dGgwRXJyb3IiLCJhdHRyaWJ1dGVzIiwiVXNlcnMiLCJvcHRpb25zIiwiY2xpZW50IiwiQ2xpZW50IiwidG9rZW4iLCJFcnJvciIsInBhcmFtZXRlcnMiLCJwYXlsb2FkIiwiaWQiLCJyZXF1aXJlZCIsImdldCIsImVuY29kZVVSSUNvbXBvbmVudCIsInRoZW4iLCJ3aGl0ZWxpc3QiLCJyb290T25seSIsIm1ldGFkYXRhIiwicGF0Y2giLCJ1c2VyX21ldGFkYXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLFNBQVNBLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW9EO0FBQUEsTUFBakJDLFVBQWlCLHVFQUFKLEVBQUk7O0FBQ2xELE1BQUlELFFBQVEsQ0FBQ0UsRUFBVCxJQUFlRixRQUFRLENBQUNHLElBQTVCLEVBQWtDO0FBQ2hDLFdBQU8sd0JBQVlILFFBQVEsQ0FBQ0csSUFBckIsRUFBMkJGLFVBQTNCLENBQVA7QUFDRDs7QUFDRCxRQUFNLElBQUlHLGNBQUosQ0FBZUosUUFBZixDQUFOO0FBQ0Q7O0FBRUQsSUFBTUssVUFBVSxHQUFHLENBQ2pCLE1BRGlCLEVBRWpCLFVBRmlCLEVBR2pCLFNBSGlCLEVBSWpCLFNBSmlCLEVBS2pCLGVBTGlCLEVBTWpCLGNBTmlCLEVBT2pCLE9BUGlCLEVBUWpCLGdCQVJpQixFQVNqQixZQVRpQixFQVVqQixhQVZpQixDQUFuQjs7SUFvQnFCQyxLO0FBQ25CLG1CQUEwQjtBQUFBLFFBQWRDLE9BQWMsdUVBQUosRUFBSTtBQUFBO0FBQ3hCLFNBQUtDLE1BQUwsR0FBYyxJQUFJQyxtQkFBSixDQUFXRixPQUFYLENBQWQ7O0FBQ0EsUUFBSSxDQUFDQSxPQUFPLENBQUNHLEtBQWIsRUFBb0I7QUFDbEIsWUFBTSxJQUFJQyxLQUFKLENBQVUsNkJBQVYsQ0FBTjtBQUNEO0FBQ0Y7Ozs7OEJBWXdCO0FBQUEsVUFBakJDLFVBQWlCLHVFQUFKLEVBQUk7QUFDdkIsVUFBTUMsT0FBTyxHQUFHLHNCQUNkO0FBQ0VELFFBQUFBLFVBQVUsRUFBRTtBQUNWRSxVQUFBQSxFQUFFLEVBQUU7QUFBRUMsWUFBQUEsUUFBUSxFQUFFO0FBQVo7QUFETTtBQURkLE9BRGMsRUFNZEgsVUFOYyxDQUFoQjtBQVFBLGFBQU8sS0FBS0osTUFBTCxDQUNKUSxHQURJLG9CQUNpQkMsa0JBQWtCLENBQUNKLE9BQU8sQ0FBQ0MsRUFBVCxDQURuQyxFQUVKSSxJQUZJLENBRUMsVUFBQWxCLFFBQVE7QUFBQSxlQUNaRCxlQUFlLENBQUNDLFFBQUQsRUFBVztBQUN4QkssVUFBQUEsVUFBVSxFQUFWQSxVQUR3QjtBQUV4QmMsVUFBQUEsU0FBUyxFQUFFLElBRmE7QUFHeEJDLFVBQUFBLFFBQVEsRUFBRTtBQUhjLFNBQVgsQ0FESDtBQUFBLE9BRlQsQ0FBUDtBQVNEOzs7Z0NBYTBCO0FBQUEsVUFBakJSLFVBQWlCLHVFQUFKLEVBQUk7QUFDekIsVUFBTUMsT0FBTyxHQUFHLHNCQUNkO0FBQ0VELFFBQUFBLFVBQVUsRUFBRTtBQUNWRSxVQUFBQSxFQUFFLEVBQUU7QUFBRUMsWUFBQUEsUUFBUSxFQUFFO0FBQVosV0FETTtBQUVWTSxVQUFBQSxRQUFRLEVBQUU7QUFBRU4sWUFBQUEsUUFBUSxFQUFFO0FBQVo7QUFGQTtBQURkLE9BRGMsRUFPZEgsVUFQYyxDQUFoQjtBQVNBLGFBQU8sS0FBS0osTUFBTCxDQUNKYyxLQURJLG9CQUNtQkwsa0JBQWtCLENBQUNKLE9BQU8sQ0FBQ0MsRUFBVCxDQURyQyxFQUNxRDtBQUN4RFMsUUFBQUEsYUFBYSxFQUFFVixPQUFPLENBQUNRO0FBRGlDLE9BRHJELEVBSUpILElBSkksQ0FJQyxVQUFBbEIsUUFBUTtBQUFBLGVBQ1pELGVBQWUsQ0FBQ0MsUUFBRCxFQUFXO0FBQ3hCSyxVQUFBQSxVQUFVLEVBQVZBLFVBRHdCO0FBRXhCYyxVQUFBQSxTQUFTLEVBQUUsSUFGYTtBQUd4QkMsVUFBQUEsUUFBUSxFQUFFO0FBSGMsU0FBWCxDQURIO0FBQUEsT0FKVCxDQUFQO0FBV0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2xpZW50IGZyb20gJy4uL25ldHdvcmtpbmcnO1xuaW1wb3J0IHsgYXBwbHkgfSBmcm9tICcuLi91dGlscy93aGl0ZWxpc3QnO1xuaW1wb3J0IHsgdG9DYW1lbENhc2UgfSBmcm9tICcuLi91dGlscy9jYW1lbCc7XG5pbXBvcnQgQXV0aDBFcnJvciBmcm9tICcuL2Vycm9yJztcblxuZnVuY3Rpb24gcmVzcG9uc2VIYW5kbGVyKHJlc3BvbnNlLCBleGNlcHRpb25zID0ge30pIHtcbiAgaWYgKHJlc3BvbnNlLm9rICYmIHJlc3BvbnNlLmpzb24pIHtcbiAgICByZXR1cm4gdG9DYW1lbENhc2UocmVzcG9uc2UuanNvbiwgZXhjZXB0aW9ucyk7XG4gIH1cbiAgdGhyb3cgbmV3IEF1dGgwRXJyb3IocmVzcG9uc2UpO1xufVxuXG5jb25zdCBhdHRyaWJ1dGVzID0gW1xuICAnbmFtZScsXG4gICduaWNrbmFtZScsXG4gICdwaWN0dXJlJyxcbiAgJ3VzZXJfaWQnLFxuICAndXNlcl9tZXRhZGF0YScsXG4gICdhcHBfbWV0YWRhdGEnLFxuICAnZW1haWwnLFxuICAnZW1haWxfdmVyaWZpZWQnLFxuICAnZ2l2ZW5fbmFtZScsXG4gICdmYW1pbHlfbmFtZSdcbl07XG5cbi8qKlxuICogQXV0aDAgTWFuYWdlbWVudCBBUEkgVXNlciBlbmRwb2ludHNcbiAqXG4gKiBAZXhwb3J0XG4gKiBAc2VlIGh0dHBzOi8vYXV0aDAuY29tL2RvY3MvYXBpL21hbmFnZW1lbnQvdjIjIS9Vc2Vycy9cbiAqIEBjbGFzcyBVc2Vyc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VycyB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuY2xpZW50ID0gbmV3IENsaWVudChvcHRpb25zKTtcbiAgICBpZiAoIW9wdGlvbnMudG9rZW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyB0b2tlbiBpbiBwYXJhbWV0ZXJzJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHVzZXIgYnkgaWRlbnRpZmllclxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1ldGVycyBnZXQgdXNlciBieSBpZGVudGlmaWVyIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmFtZXRlcnMuaWQgaWRlbnRpZmllciBvZiB0aGUgdXNlciB0byBvYnRhaW5cbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqIEBzZWUgaHR0cHM6Ly9hdXRoMC5jb20vZG9jcy9hcGkvbWFuYWdlbWVudC92MiMhL1VzZXJzL2dldF91c2Vyc19ieV9pZFxuICAgKlxuICAgKiBAbWVtYmVyb2YgVXNlcnNcbiAgICovXG4gIGdldFVzZXIocGFyYW1ldGVycyA9IHt9KSB7XG4gICAgY29uc3QgcGF5bG9hZCA9IGFwcGx5KFxuICAgICAge1xuICAgICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgICAgaWQ6IHsgcmVxdWlyZWQ6IHRydWUgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcGFyYW1ldGVyc1xuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50XG4gICAgICAuZ2V0KGAvYXBpL3YyL3VzZXJzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBheWxvYWQuaWQpfWApXG4gICAgICAudGhlbihyZXNwb25zZSA9PlxuICAgICAgICByZXNwb25zZUhhbmRsZXIocmVzcG9uc2UsIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzLFxuICAgICAgICAgIHdoaXRlbGlzdDogdHJ1ZSxcbiAgICAgICAgICByb290T25seTogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXRjaCBhIHVzZXIncyBgdXNlcl9tZXRhZGF0YWBcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtZXRlcnMgcGF0Y2ggdXNlciBtZXRhZGF0YSBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXJhbWV0ZXJzLmlkIGlkZW50aWZpZXIgb2YgdGhlIHVzZXIgdG8gcGF0Y2hcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtZXRlcnMubWV0YWRhdGEgb2JqZWN0IHdpdGggYXR0cmlidXRlcyB0byBzdG9yZSBpbiB1c2VyX21ldGFkYXRhLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICogQHNlZSBodHRwczovL2F1dGgwLmNvbS9kb2NzL2FwaS9tYW5hZ2VtZW50L3YyIyEvVXNlcnMvcGF0Y2hfdXNlcnNfYnlfaWRcbiAgICpcbiAgICogQG1lbWJlcm9mIFVzZXJzXG4gICAqL1xuICBwYXRjaFVzZXIocGFyYW1ldGVycyA9IHt9KSB7XG4gICAgY29uc3QgcGF5bG9hZCA9IGFwcGx5KFxuICAgICAge1xuICAgICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgICAgaWQ6IHsgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICAgICAgICBtZXRhZGF0YTogeyByZXF1aXJlZDogdHJ1ZSB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwYXJhbWV0ZXJzXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnRcbiAgICAgIC5wYXRjaChgL2FwaS92Mi91c2Vycy8ke2VuY29kZVVSSUNvbXBvbmVudChwYXlsb2FkLmlkKX1gLCB7XG4gICAgICAgIHVzZXJfbWV0YWRhdGE6IHBheWxvYWQubWV0YWRhdGFcbiAgICAgIH0pXG4gICAgICAudGhlbihyZXNwb25zZSA9PlxuICAgICAgICByZXNwb25zZUhhbmRsZXIocmVzcG9uc2UsIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzLFxuICAgICAgICAgIHdoaXRlbGlzdDogdHJ1ZSxcbiAgICAgICAgICByb290T25seTogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxufVxuIl19