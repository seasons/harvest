{"version":3,"sources":["Text.js"],"names":["DeprecatedTextPropTypes","require","React","ReactNativeViewAttributes","TextAncestor","Touchable","UIManager","createReactNativeComponentClass","nullthrows","processColor","PRESS_RECT_OFFSET","top","left","right","bottom","viewConfig","validAttributes","UIView","isHighlighted","numberOfLines","ellipsizeMode","allowFontScaling","maxFontSizeMultiplier","disabled","selectable","selectionColor","adjustsFontSizeToFit","minimumFontScale","textBreakStrategy","onTextLayout","directEventTypes","topTextLayout","registrationName","uiViewClassName","TouchableText","state","Mixin","touchableGetInitialState","createResponderHandlers","_createResponseHandlers","bind","responseHandlers","props","isTouchable","__DEV__","TOUCH_TARGET_DEBUG","onPress","style","color","hasTextAncestor","forwardedRef","onStartShouldSetResponder","shouldSetResponder","_attachTouchHandlers","onResponderGrant","event","dispatchID","touchableHandleResponderGrant","call","onResponderMove","touchableHandleResponderMove","onResponderRelease","touchableHandleResponderRelease","onResponderTerminate","touchableHandleResponderTerminate","onResponderTerminationRequest","touchableHandleResponderTerminationRequest","touchableGetPressRectOffset","key","touchableHandleActivePressIn","suppressHighlighting","setState","touchableHandleActivePressOut","touchableHandlePress","touchableHandleLongPress","onLongPress","pressRetentionOffset","nextProps","prevState","Component","defaultProps","accessible","RCTText","RCTVirtualText","getViewManagerConfig","Text","TextToExport","forwardRef","displayName","propTypes","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst DeprecatedTextPropTypes = require('DeprecatedTextPropTypes');\nconst React = require('React');\nconst ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nconst TextAncestor = require('TextAncestor');\nconst Touchable = require('Touchable');\nconst UIManager = require('UIManager');\n\nconst createReactNativeComponentClass = require('createReactNativeComponentClass');\nconst nullthrows = require('nullthrows');\nconst processColor = require('processColor');\n\nimport type {PressEvent} from 'CoreEventTypes';\nimport type {NativeComponent} from 'ReactNative';\nimport type {PressRetentionOffset, TextProps} from 'TextProps';\n\ntype ResponseHandlers = $ReadOnly<{|\n  onStartShouldSetResponder: () => boolean,\n  onResponderGrant: (event: PressEvent, dispatchID: string) => void,\n  onResponderMove: (event: PressEvent) => void,\n  onResponderRelease: (event: PressEvent) => void,\n  onResponderTerminate: (event: PressEvent) => void,\n  onResponderTerminationRequest: () => boolean,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...TextProps,\n  forwardedRef: ?React.Ref<'RCTText' | 'RCTVirtualText'>,\n|}>;\n\ntype State = {|\n  touchable: {|\n    touchState: ?string,\n    responderID: ?number,\n  |},\n  isHighlighted: boolean,\n  createResponderHandlers: () => ResponseHandlers,\n  responseHandlers: ?ResponseHandlers,\n|};\n\nconst PRESS_RECT_OFFSET = {top: 20, left: 20, right: 20, bottom: 30};\n\nconst viewConfig = {\n  validAttributes: {\n    ...ReactNativeViewAttributes.UIView,\n    isHighlighted: true,\n    numberOfLines: true,\n    ellipsizeMode: true,\n    allowFontScaling: true,\n    maxFontSizeMultiplier: true,\n    disabled: true,\n    selectable: true,\n    selectionColor: true,\n    adjustsFontSizeToFit: true,\n    minimumFontScale: true,\n    textBreakStrategy: true,\n    onTextLayout: true,\n  },\n  directEventTypes: {\n    topTextLayout: {\n      registrationName: 'onTextLayout',\n    },\n  },\n  uiViewClassName: 'RCTText',\n};\n\n/**\n * A React component for displaying text.\n *\n * See https://facebook.github.io/react-native/docs/text.html\n */\nclass TouchableText extends React.Component<Props, State> {\n  static defaultProps = {\n    accessible: true,\n    allowFontScaling: true,\n    ellipsizeMode: 'tail',\n  };\n\n  touchableGetPressRectOffset: ?() => PressRetentionOffset;\n  touchableHandleActivePressIn: ?() => void;\n  touchableHandleActivePressOut: ?() => void;\n  touchableHandleLongPress: ?(event: PressEvent) => void;\n  touchableHandlePress: ?(event: PressEvent) => void;\n  touchableHandleResponderGrant: ?(\n    event: PressEvent,\n    dispatchID: string,\n  ) => void;\n  touchableHandleResponderMove: ?(event: PressEvent) => void;\n  touchableHandleResponderRelease: ?(event: PressEvent) => void;\n  touchableHandleResponderTerminate: ?(event: PressEvent) => void;\n  touchableHandleResponderTerminationRequest: ?() => boolean;\n\n  state = {\n    ...Touchable.Mixin.touchableGetInitialState(),\n    isHighlighted: false,\n    createResponderHandlers: this._createResponseHandlers.bind(this),\n    responseHandlers: null,\n  };\n\n  static getDerivedStateFromProps(\n    nextProps: Props,\n    prevState: State,\n  ): $Shape<State> | null {\n    return prevState.responseHandlers == null && isTouchable(nextProps)\n      ? {\n          responseHandlers: prevState.createResponderHandlers(),\n        }\n      : null;\n  }\n\n  static viewConfig = viewConfig;\n\n  render(): React.Node {\n    let props = this.props;\n    if (isTouchable(props)) {\n      props = {\n        ...props,\n        ...this.state.responseHandlers,\n        isHighlighted: this.state.isHighlighted,\n      };\n    }\n    if (props.selectionColor != null) {\n      props = {\n        ...props,\n        selectionColor: processColor(props.selectionColor),\n      };\n    }\n    if (__DEV__) {\n      if (Touchable.TOUCH_TARGET_DEBUG && props.onPress != null) {\n        props = {\n          ...props,\n          style: [props.style, {color: 'magenta'}],\n        };\n      }\n    }\n    return (\n      <TextAncestor.Consumer>\n        {hasTextAncestor =>\n          hasTextAncestor ? (\n            <RCTVirtualText {...props} ref={props.forwardedRef} />\n          ) : (\n            <TextAncestor.Provider value={true}>\n              <RCTText {...props} ref={props.forwardedRef} />\n            </TextAncestor.Provider>\n          )\n        }\n      </TextAncestor.Consumer>\n    );\n  }\n\n  _createResponseHandlers(): ResponseHandlers {\n    return {\n      onStartShouldSetResponder: (): boolean => {\n        const {onStartShouldSetResponder} = this.props;\n        const shouldSetResponder =\n          (onStartShouldSetResponder == null\n            ? false\n            : onStartShouldSetResponder()) || isTouchable(this.props);\n\n        if (shouldSetResponder) {\n          this._attachTouchHandlers();\n        }\n        return shouldSetResponder;\n      },\n      onResponderGrant: (event: PressEvent, dispatchID: string): void => {\n        nullthrows(this.touchableHandleResponderGrant)(event, dispatchID);\n        if (this.props.onResponderGrant != null) {\n          this.props.onResponderGrant.call(this, event, dispatchID);\n        }\n      },\n      onResponderMove: (event: PressEvent): void => {\n        nullthrows(this.touchableHandleResponderMove)(event);\n        if (this.props.onResponderMove != null) {\n          this.props.onResponderMove.call(this, event);\n        }\n      },\n      onResponderRelease: (event: PressEvent): void => {\n        nullthrows(this.touchableHandleResponderRelease)(event);\n        if (this.props.onResponderRelease != null) {\n          this.props.onResponderRelease.call(this, event);\n        }\n      },\n      onResponderTerminate: (event: PressEvent): void => {\n        nullthrows(this.touchableHandleResponderTerminate)(event);\n        if (this.props.onResponderTerminate != null) {\n          this.props.onResponderTerminate.call(this, event);\n        }\n      },\n      onResponderTerminationRequest: (): boolean => {\n        const {onResponderTerminationRequest} = this.props;\n        if (!nullthrows(this.touchableHandleResponderTerminationRequest)()) {\n          return false;\n        }\n        if (onResponderTerminationRequest == null) {\n          return true;\n        }\n        return onResponderTerminationRequest();\n      },\n    };\n  }\n\n  /**\n   * Lazily attaches Touchable.Mixin handlers.\n   */\n  _attachTouchHandlers(): void {\n    if (this.touchableGetPressRectOffset != null) {\n      return;\n    }\n    for (const key in Touchable.Mixin) {\n      if (typeof Touchable.Mixin[key] === 'function') {\n        (this: any)[key] = Touchable.Mixin[key].bind(this);\n      }\n    }\n    this.touchableHandleActivePressIn = (): void => {\n      if (!this.props.suppressHighlighting && isTouchable(this.props)) {\n        this.setState({isHighlighted: true});\n      }\n    };\n    this.touchableHandleActivePressOut = (): void => {\n      if (!this.props.suppressHighlighting && isTouchable(this.props)) {\n        this.setState({isHighlighted: false});\n      }\n    };\n    this.touchableHandlePress = (event: PressEvent): void => {\n      if (this.props.onPress != null) {\n        this.props.onPress(event);\n      }\n    };\n    this.touchableHandleLongPress = (event: PressEvent): void => {\n      if (this.props.onLongPress != null) {\n        this.props.onLongPress(event);\n      }\n    };\n    this.touchableGetPressRectOffset = (): PressRetentionOffset =>\n      this.props.pressRetentionOffset == null\n        ? PRESS_RECT_OFFSET\n        : this.props.pressRetentionOffset;\n  }\n}\n\nconst isTouchable = (props: Props): boolean =>\n  props.onPress != null ||\n  props.onLongPress != null ||\n  props.onStartShouldSetResponder != null;\n\nconst RCTText = createReactNativeComponentClass(\n  viewConfig.uiViewClassName,\n  () => viewConfig,\n);\n\nconst RCTVirtualText =\n  UIManager.getViewManagerConfig('RCTVirtualText') == null\n    ? RCTText\n    : createReactNativeComponentClass('RCTVirtualText', () => ({\n        validAttributes: {\n          ...ReactNativeViewAttributes.UIView,\n          isHighlighted: true,\n          maxFontSizeMultiplier: true,\n        },\n        uiViewClassName: 'RCTVirtualText',\n      }));\n\nconst Text = (\n  props: TextProps,\n  forwardedRef: ?React.Ref<'RCTText' | 'RCTVirtualText'>,\n) => {\n  return <TouchableText {...props} forwardedRef={forwardedRef} />;\n};\nconst TextToExport = React.forwardRef(Text);\nTextToExport.displayName = 'Text';\n\n// TODO: Deprecate this.\n/* $FlowFixMe(>=0.89.0 site=react_native_fb) This comment suppresses an error\n * found when Flow v0.89 was deployed. To see the error, delete this comment\n * and run Flow. */\nTextToExport.propTypes = DeprecatedTextPropTypes;\n\nmodule.exports = ((TextToExport: $FlowFixMe): Class<\n  NativeComponent<TextProps>,\n>);\n"]}