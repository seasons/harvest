f5135908868290534479dfeb2e75f841
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DeprecatedTextPropTypes = require('DeprecatedTextPropTypes');

var React = require('React');

var ReactNativeViewAttributes = require('ReactNativeViewAttributes');

var TextAncestor = require('TextAncestor');

var Touchable = require('Touchable');

var UIManager = require('UIManager');

var createReactNativeComponentClass = require('createReactNativeComponentClass');

var nullthrows = require('nullthrows');

var processColor = require('processColor');

var PRESS_RECT_OFFSET = {
  top: 20,
  left: 20,
  right: 20,
  bottom: 30
};
var viewConfig = {
  validAttributes: _objectSpread({}, ReactNativeViewAttributes.UIView, {
    isHighlighted: true,
    numberOfLines: true,
    ellipsizeMode: true,
    allowFontScaling: true,
    maxFontSizeMultiplier: true,
    disabled: true,
    selectable: true,
    selectionColor: true,
    adjustsFontSizeToFit: true,
    minimumFontScale: true,
    textBreakStrategy: true,
    onTextLayout: true
  }),
  directEventTypes: {
    topTextLayout: {
      registrationName: 'onTextLayout'
    }
  },
  uiViewClassName: 'RCTText'
};

var TouchableText = function (_React$Component) {
  (0, _inherits2.default)(TouchableText, _React$Component);

  function TouchableText() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, TouchableText);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TouchableText)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = _objectSpread({}, Touchable.Mixin.touchableGetInitialState(), {
      isHighlighted: false,
      createResponderHandlers: _this._createResponseHandlers.bind((0, _assertThisInitialized2.default)(_this)),
      responseHandlers: null
    });
    return _this;
  }

  (0, _createClass2.default)(TouchableText, [{
    key: "render",
    value: function render() {
      var props = this.props;

      if (isTouchable(props)) {
        props = _objectSpread({}, props, {}, this.state.responseHandlers, {
          isHighlighted: this.state.isHighlighted
        });
      }

      if (props.selectionColor != null) {
        props = _objectSpread({}, props, {
          selectionColor: processColor(props.selectionColor)
        });
      }

      if (__DEV__) {
        if (Touchable.TOUCH_TARGET_DEBUG && props.onPress != null) {
          props = _objectSpread({}, props, {
            style: [props.style, {
              color: 'magenta'
            }]
          });
        }
      }

      return React.createElement(TextAncestor.Consumer, null, function (hasTextAncestor) {
        return hasTextAncestor ? React.createElement(RCTVirtualText, (0, _extends2.default)({}, props, {
          ref: props.forwardedRef
        })) : React.createElement(TextAncestor.Provider, {
          value: true
        }, React.createElement(RCTText, (0, _extends2.default)({}, props, {
          ref: props.forwardedRef
        })));
      });
    }
  }, {
    key: "_createResponseHandlers",
    value: function _createResponseHandlers() {
      var _this2 = this;

      return {
        onStartShouldSetResponder: function onStartShouldSetResponder() {
          var onStartShouldSetResponder = _this2.props.onStartShouldSetResponder;
          var shouldSetResponder = (onStartShouldSetResponder == null ? false : onStartShouldSetResponder()) || isTouchable(_this2.props);

          if (shouldSetResponder) {
            _this2._attachTouchHandlers();
          }

          return shouldSetResponder;
        },
        onResponderGrant: function onResponderGrant(event, dispatchID) {
          nullthrows(_this2.touchableHandleResponderGrant)(event, dispatchID);

          if (_this2.props.onResponderGrant != null) {
            _this2.props.onResponderGrant.call(_this2, event, dispatchID);
          }
        },
        onResponderMove: function onResponderMove(event) {
          nullthrows(_this2.touchableHandleResponderMove)(event);

          if (_this2.props.onResponderMove != null) {
            _this2.props.onResponderMove.call(_this2, event);
          }
        },
        onResponderRelease: function onResponderRelease(event) {
          nullthrows(_this2.touchableHandleResponderRelease)(event);

          if (_this2.props.onResponderRelease != null) {
            _this2.props.onResponderRelease.call(_this2, event);
          }
        },
        onResponderTerminate: function onResponderTerminate(event) {
          nullthrows(_this2.touchableHandleResponderTerminate)(event);

          if (_this2.props.onResponderTerminate != null) {
            _this2.props.onResponderTerminate.call(_this2, event);
          }
        },
        onResponderTerminationRequest: function onResponderTerminationRequest() {
          var onResponderTerminationRequest = _this2.props.onResponderTerminationRequest;

          if (!nullthrows(_this2.touchableHandleResponderTerminationRequest)()) {
            return false;
          }

          if (onResponderTerminationRequest == null) {
            return true;
          }

          return onResponderTerminationRequest();
        }
      };
    }
  }, {
    key: "_attachTouchHandlers",
    value: function _attachTouchHandlers() {
      var _this3 = this;

      if (this.touchableGetPressRectOffset != null) {
        return;
      }

      for (var key in Touchable.Mixin) {
        if (typeof Touchable.Mixin[key] === 'function') {
          this[key] = Touchable.Mixin[key].bind(this);
        }
      }

      this.touchableHandleActivePressIn = function () {
        if (!_this3.props.suppressHighlighting && isTouchable(_this3.props)) {
          _this3.setState({
            isHighlighted: true
          });
        }
      };

      this.touchableHandleActivePressOut = function () {
        if (!_this3.props.suppressHighlighting && isTouchable(_this3.props)) {
          _this3.setState({
            isHighlighted: false
          });
        }
      };

      this.touchableHandlePress = function (event) {
        if (_this3.props.onPress != null) {
          _this3.props.onPress(event);
        }
      };

      this.touchableHandleLongPress = function (event) {
        if (_this3.props.onLongPress != null) {
          _this3.props.onLongPress(event);
        }
      };

      this.touchableGetPressRectOffset = function () {
        return _this3.props.pressRetentionOffset == null ? PRESS_RECT_OFFSET : _this3.props.pressRetentionOffset;
      };
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      return prevState.responseHandlers == null && isTouchable(nextProps) ? {
        responseHandlers: prevState.createResponderHandlers()
      } : null;
    }
  }]);
  return TouchableText;
}(React.Component);

TouchableText.defaultProps = {
  accessible: true,
  allowFontScaling: true,
  ellipsizeMode: 'tail'
};
TouchableText.viewConfig = viewConfig;

var isTouchable = function isTouchable(props) {
  return props.onPress != null || props.onLongPress != null || props.onStartShouldSetResponder != null;
};

var RCTText = createReactNativeComponentClass(viewConfig.uiViewClassName, function () {
  return viewConfig;
});
var RCTVirtualText = UIManager.getViewManagerConfig('RCTVirtualText') == null ? RCTText : createReactNativeComponentClass('RCTVirtualText', function () {
  return {
    validAttributes: _objectSpread({}, ReactNativeViewAttributes.UIView, {
      isHighlighted: true,
      maxFontSizeMultiplier: true
    }),
    uiViewClassName: 'RCTVirtualText'
  };
});

var Text = function Text(props, forwardedRef) {
  return React.createElement(TouchableText, (0, _extends2.default)({}, props, {
    forwardedRef: forwardedRef
  }));
};

var TextToExport = React.forwardRef(Text);
TextToExport.displayName = 'Text';
TextToExport.propTypes = DeprecatedTextPropTypes;
module.exports = TextToExport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,