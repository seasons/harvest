{"version":3,"sources":["extractStroke.ts"],"names":["caps","butt","square","round","joins","miter","bevel","vectorEffects","none","default","nonScalingStroke","inherit","uri","stroke","strokeOpacity","strokeLinecap","strokeLinejoin","strokeDasharray","strokeWidth","strokeDashoffset","strokeMiterlimit","vectorEffect","props","styleProperties","strokeDash","parseFloat"],"mappings":"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","sourcesContent":["import extractBrush from './extractBrush';\nimport extractOpacity from './extractOpacity';\nimport extractLengthList from './extractLengthList';\nimport { StrokeProps } from './types';\n\nconst caps = {\n  butt: 0,\n  square: 2,\n  round: 1,\n};\n\nconst joins = {\n  miter: 0,\n  bevel: 2,\n  round: 1,\n};\n\nconst vectorEffects = {\n  none: 0,\n  default: 0,\n  nonScalingStroke: 1,\n  'non-scaling-stroke': 1,\n  inherit: 2,\n  uri: 3,\n};\n\nexport default function extractStroke(\n  props: StrokeProps,\n  styleProperties: string[],\n) {\n  const {\n    stroke,\n    strokeOpacity,\n    strokeLinecap,\n    strokeLinejoin,\n    strokeDasharray,\n    strokeWidth,\n    strokeDashoffset,\n    strokeMiterlimit,\n    vectorEffect,\n  } = props;\n\n  if (stroke != null) {\n    styleProperties.push('stroke');\n  }\n  if (strokeWidth != null) {\n    styleProperties.push('strokeWidth');\n  }\n  if (strokeOpacity != null) {\n    styleProperties.push('strokeOpacity');\n  }\n  if (strokeDasharray != null) {\n    styleProperties.push('strokeDasharray');\n  }\n  if (strokeDashoffset != null) {\n    styleProperties.push('strokeDashoffset');\n  }\n  if (strokeLinecap != null) {\n    styleProperties.push('strokeLinecap');\n  }\n  if (strokeLinejoin != null) {\n    styleProperties.push('strokeLinejoin');\n  }\n  if (strokeMiterlimit != null) {\n    styleProperties.push('strokeMiterlimit');\n  }\n\n  const strokeDash =\n    !strokeDasharray || strokeDasharray === 'none'\n      ? null\n      : extractLengthList(strokeDasharray);\n\n  return {\n    stroke: extractBrush(stroke),\n    strokeOpacity: extractOpacity(strokeOpacity),\n    strokeLinecap: (strokeLinecap && caps[strokeLinecap]) || 0,\n    strokeLinejoin: (strokeLinejoin && joins[strokeLinejoin]) || 0,\n    strokeDasharray:\n      strokeDash && strokeDash.length % 2 === 1\n        ? strokeDash.concat(strokeDash)\n        : strokeDash,\n    strokeWidth: strokeWidth != null ? strokeWidth : 1,\n    strokeDashoffset:\n      strokeDasharray && strokeDashoffset ? +strokeDashoffset || 0 : null,\n    strokeMiterlimit:\n      (strokeMiterlimit && typeof strokeMiterlimit !== 'number'\n        ? parseFloat(strokeMiterlimit)\n        : strokeMiterlimit) || 4,\n    vectorEffect: (vectorEffect && vectorEffects[vectorEffect]) || 0,\n  };\n}\n"]}