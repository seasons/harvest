3d474217e8b2a02469f53527f77432ea










'use strict';




function deprecatedCreateStrictShapeTypeChecker(shapeTypes)

{
  function checkType(
  isRequired,
  props,
  propName,
  componentName,
  location)

  {
    if (!props[propName]) {
      if (isRequired) {
        require('invariant')(
        false,
        "Required object `" + propName + "` was not specified in " + ("`" +
        componentName + "`."));

      }
      return;
    }
    var propValue = props[propName];
    var propType = typeof propValue;
    var locationName = location || '(unknown)';
    if (propType !== 'object') {
      require('invariant')(
      false,
      "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" +
      componentName + "`, expected `object`."));

    }


    var allKeys = require('merge')(props[propName], shapeTypes);for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {rest[_key - 5] = arguments[_key];}
    for (var _key2 in allKeys) {
      var checker = shapeTypes[_key2];
      if (!checker) {
        require('invariant')(
        false,
        "Invalid props." + propName + " key `" + _key2 + "` supplied to `" + componentName + "`." +
        '\nBad object: ' +
        JSON.stringify(props[propName], null, '  ') +
        '\nValid keys: ' +
        JSON.stringify(Object.keys(shapeTypes), null, '  '));

      }
      var error = checker.apply(void 0, [propValue, _key2, componentName, location].concat(rest));
      if (error) {
        require('invariant')(
        false,
        error.message +
        '\nBad object: ' +
        JSON.stringify(props[propName], null, '  '));

      }
    }
  }
  function chainedCheckType(
  props,
  propName,
  componentName,
  location)

  {for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key3 = 4; _key3 < _len2; _key3++) {rest[_key3 - 4] = arguments[_key3];}
    return checkType.apply(void 0, [false, props, propName, componentName, location].concat(rest));
  }
  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
}

module.exports = deprecatedCreateStrictShapeTypeChecker;