{"version":3,"sources":["extractTransform.ts"],"names":["x","y","originX","originY","scaleX","scaleY","rotation","skewX","skewY","props","coords","universal","Array","axisX","isNaN","axisY","translate","translateX","translateY","origin","scale","skew","console","tr","universal2axis","or","sc","sk","appendTransformProps","transform","t","props2transform","identity","transformToMatrix"],"mappings":"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","sourcesContent":["import { append, appendTransform, identity, reset, toArray } from '../Matrix2D';\n// @ts-ignore\nimport { parse } from './transform';\nimport { NumberProp, TransformedProps, TransformProps } from './types';\n\nfunction appendTransformProps(props: TransformedProps) {\n  const {\n    x,\n    y,\n    originX,\n    originY,\n    scaleX,\n    scaleY,\n    rotation,\n    skewX,\n    skewY,\n  } = props;\n  appendTransform(\n    x + originX,\n    y + originY,\n    scaleX,\n    scaleY,\n    rotation,\n    skewX,\n    skewY,\n    originX,\n    originY,\n  );\n}\n\nfunction universal2axis(\n  universal: NumberProp | (NumberProp)[] | undefined,\n  axisX: NumberProp | void,\n  axisY: NumberProp | void,\n  defaultValue?: number,\n): [number, number] {\n  let x;\n  let y;\n  if (typeof universal === 'number') {\n    x = y = universal;\n  } else if (typeof universal === 'string') {\n    const coords = universal.split(/\\s*,\\s*/);\n    if (coords.length === 2) {\n      x = +coords[0];\n      y = +coords[1];\n    } else if (coords.length === 1) {\n      x = y = +coords[0];\n    }\n  } else if (Array.isArray(universal)) {\n    if (universal.length === 2) {\n      x = +universal[0];\n      y = +universal[1];\n    } else if (universal.length === 1) {\n      x = y = +universal[0];\n    }\n  }\n\n  axisX = +axisX;\n  if (!isNaN(axisX)) {\n    x = axisX;\n  }\n\n  axisY = +axisY;\n  if (!isNaN(axisY)) {\n    y = axisY;\n  }\n\n  return [x || defaultValue || 0, y || defaultValue || 0];\n}\n\nexport function props2transform(props: TransformProps): TransformedProps {\n  const {\n    rotation = 0,\n    translate,\n    translateX,\n    translateY,\n    origin,\n    originX,\n    originY,\n    scale,\n    scaleX,\n    scaleY,\n    skew,\n    skewX,\n    skewY,\n    x,\n    y,\n  } = props;\n\n  if (Array.isArray(x) || Array.isArray(y)) {\n    console.warn(\n      'Passing SvgLengthList to x or y attribute where SvgLength expected',\n    );\n  }\n  const tr = universal2axis(\n    translate,\n    translateX || (Array.isArray(x) ? x[0] : x),\n    translateY || (Array.isArray(y) ? y[0] : y),\n  );\n  const or = universal2axis(origin, originX, originY);\n  const sc = universal2axis(scale, scaleX, scaleY, 1);\n  const sk = universal2axis(skew, skewX, skewY);\n\n  return {\n    rotation: +rotation || 0,\n    originX: or[0],\n    originY: or[1],\n    scaleX: sc[0],\n    scaleY: sc[1],\n    skewX: sk[0],\n    skewY: sk[1],\n    x: tr[0],\n    y: tr[1],\n  };\n}\n\nexport function transformToMatrix(\n  props: TransformedProps,\n  transform: number[] | string | TransformProps | void | undefined,\n): [number, number, number, number, number, number] {\n  reset();\n  appendTransformProps(props);\n\n  if (transform) {\n    if (Array.isArray(transform)) {\n      if (typeof transform[0] === 'number') {\n        append(\n          transform[0],\n          transform[1],\n          transform[2],\n          transform[3],\n          transform[4],\n          transform[5],\n        );\n      }\n      // noop for react-native transform arrays, let animated handle them\n    } else if (typeof transform === 'string') {\n      try {\n        const t = parse(transform);\n        append(t[0], t[3], t[1], t[4], t[2], t[5]);\n      } catch (e) {\n        console.error(e);\n      }\n    } else {\n      appendTransformProps(props2transform(transform));\n    }\n  }\n\n  return toArray();\n}\n\nexport default function extractTransform(\n  props: number[] | string | TransformProps,\n) {\n  if (Array.isArray(props)) {\n    return props;\n  }\n  if (typeof props === 'string') {\n    try {\n      const t = parse(props);\n      return [t[0], t[3], t[1], t[4], t[2], t[5]];\n    } catch (e) {\n      console.error(e);\n      return identity;\n    }\n  }\n  return transformToMatrix(props2transform(props), props.transform);\n}\n"]}