656cfddbf5f6b6ba6166d9279fa66529
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bag = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _Container = require("../../Components/Container");

var _Typography = require("../../Components/Typography");

var _Components = require("./Components.tsx");

var _Components2 = require("../../Components");

var _reactNative = require("react-native");

var _StateProvider = require("../../helpers/StateProvider");

var _Utils = require("../../Utils");

var _svgs = require("../../../assets/svgs");

var _Navigation = require("../../Navigation");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var SECTION_HEIGHT = 200;

var Bag = function Bag() {
  var _useStateValue = (0, _StateProvider.useStateValue)(),
      _useStateValue2 = (0, _slicedToArray2.default)(_useStateValue, 2),
      bag = _useStateValue2[0].bag,
      dispatch = _useStateValue2[1];

  var _useState = (0, _react.useState)([]),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      bagItems = _useState2[0],
      setBagItems = _useState2[1];

  (0, _react.useEffect)(function () {
    var bagArray = bag.items.forEach(function (item) {
      bagItems.push(_objectSpread({
        type: "item"
      }, item));
    });

    for (var i = 0; i < remainingPieces; i++) {
      bagItems.push({
        type: "empty"
      });
    }

    setBagItems(bagArray);
    console.log("bagitems????", bagItems);
  }, [bag]);

  if (!bag || !bag.items) {
    return null;
  }

  var bagIsEmpty = bag.items.length === 0;
  var remainingPieces = 3 - bag.items.length;

  var handleRemove = function handleRemove(id) {
    return id;
  };

  var handleBagPlusPress = function handleBagPlusPress() {
    return (0, _Navigation.goToBrowse)();
  };

  var emptyBagItem = function emptyBagItem(index) {
    return _react.default.createElement(_Components2.Box, {
      p: 2,
      style: {
        height: SECTION_HEIGHT
      }
    }, _react.default.createElement(_Components2.Flex, {
      style: {
        flex: 2
      },
      flexWrap: "nowrap",
      flexDirection: "column",
      justifyContent: "space-between"
    }, _react.default.createElement(_Components2.Box, null, _react.default.createElement(_Typography.Sans, {
      size: "3"
    }, index + 1, "."), _react.default.createElement(_Typography.Sans, {
      size: "2",
      color: "gray"
    }, "Add your item")), _react.default.createElement(_Components2.Flex, {
      style: {
        flex: 2
      },
      flexDirection: "row",
      justifyContent: "flex-end",
      alignItems: "center"
    }, _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
      onPress: function onPress() {
        return handleBagPlusPress();
      }
    }, _react.default.createElement(_svgs.BagPlus, null)), _react.default.createElement(_Components2.Spacer, {
      mr: 3
    }))));
  };

  var bagItem = function bagItem(item, index) {
    var imageURL = item.images && item.images.length && item.images[0].url;
    return _react.default.createElement(_Components2.Box, {
      p: 2,
      key: item.id,
      style: {
        height: SECTION_HEIGHT
      }
    }, _react.default.createElement(_Components2.Flex, {
      flexDirection: "row",
      style: {
        flex: 1
      }
    }, _react.default.createElement(_Components2.Flex, {
      style: {
        flex: 2
      },
      flexWrap: "nowrap",
      flexDirection: "column",
      justifyContent: "space-between"
    }, _react.default.createElement(_Components2.Box, null, _react.default.createElement(_Typography.Sans, {
      size: "3"
    }, index + 1, "."), _react.default.createElement(_Typography.Sans, {
      size: "2"
    }, item.brand.name, "."), _react.default.createElement(_Typography.Sans, {
      size: "2",
      color: "gray"
    }, item.name, ".")), _react.default.createElement(_Components2.Box, null, _react.default.createElement(_reactNative.Text, null, _react.default.createElement(_Typography.Sans, {
      size: "2",
      color: "gray"
    }, "Size ", item.modelSize, " |"), "  ", _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
      onPress: function onPress() {
        return dispatch({
          type: "removeItemFromBag",
          item: item
        });
      }
    }, _react.default.createElement(_Typography.Sans, {
      size: "2",
      color: "blue"
    }, "Remove"))))), _react.default.createElement(_Components2.Flex, {
      style: {
        flex: 2
      },
      flexDirection: "row",
      justifyContent: "flex-end",
      alignItems: "center"
    }, _react.default.createElement(_reactNative.Image, {
      style: {
        height: SECTION_HEIGHT,
        width: 160
      },
      resizeMode: "contain",
      source: {
        uri: imageURL
      }
    }))));
  };

  var _renderItem = function renderItem(_ref) {
    var item = _ref.item,
        index = _ref.index;
    return item.type === "item" ? bagItem(item, index) : emptyBagItem(index);
  };

  return _react.default.createElement(_Components2.Theme, null, _react.default.createElement(_Container.Container, null, _react.default.createElement(_Components2.Box, {
    style: {
      flex: 1
    }
  }, _react.default.createElement(_Components2.Spacer, {
    mb: 3
  }), bagIsEmpty ? _react.default.createElement(_Components2.Flex, {
    flex: 1,
    flexDirection: "column",
    justifyContent: "center",
    alignContent: "center"
  }, _react.default.createElement(_Components.EmptyState, {
    remainingPieces: remainingPieces
  })) : _react.default.createElement(_Components2.Box, null, _react.default.createElement(_Components2.Spacer, {
    mb: 3
  }), _react.default.createElement(_reactNative.FlatList, {
    data: bagItems,
    ListHeaderComponent: function ListHeaderComponent() {
      return _react.default.createElement(_Components2.Box, {
        p: 2
      }, _react.default.createElement(_Typography.Sans, {
        size: "3",
        color: "black"
      }, "My bag"), _react.default.createElement(_Typography.Sans, {
        size: "2",
        color: "gray"
      }, "You have ", remainingPieces, " pieces remaining"));
    },
    ItemSeparatorComponent: function ItemSeparatorComponent() {
      return _react.default.createElement(_Components2.Box, {
        px: 2
      }, _react.default.createElement(_Components2.Spacer, {
        mb: 2
      }), _react.default.createElement(_Components2.Separator, {
        color: (0, _Utils.color)("lightGray")
      }), _react.default.createElement(_Components2.Spacer, {
        mb: 2
      }));
    },
    keyExtractor: function keyExtractor(_item, index) {
      return String(index);
    },
    renderItem: function renderItem(item) {
      return _renderItem(item);
    },
    ListFooterComponent: function ListFooterComponent() {
      return _react.default.createElement(_Components2.Spacer, {
        mb: 200
      });
    }
  })))));
};

exports.Bag = Bag;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,