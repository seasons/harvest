{"version":3,"sources":["TextInput.tsx"],"names":["DisplayState","defaultVariant","getColorsForVariant","variant","themeProps","colors","black","white","gray","active","backgroundColor","borderColor","color","inactive","TextInput","placeholder","secureTextEntry","onChangeText","style","inputKey","React","useState","Inactive","previous","setPrevious","current","setCurrent","value","setValue","variantColors","from","to","handleOnChangeText","text","length","Active","height","props","StyledTextInput","RNTextInput","fontFamily","sans","medium","AnimatedTextInput"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components/native\"\nimport { themeProps } from \"./Theme\"\nimport { fontFamily } from \"./Typography\"\nimport { ViewStyle, TextInput as RNTextInput } from \"react-native\"\nimport { animated, Spring } from \"react-spring/renderprops-native.cjs\"\nimport { color } from \"App/utils\"\nimport { Box } from \"./\"\n\nexport interface TextInputProps {\n  /** The theme of the input */\n  style?: ViewStyle\n  variant?: TextInputVariant\n  placeholder?: string\n  secureTextEntry?: boolean\n  autoCompleteType?: string\n  textContentType?: string\n  inputKey: string\n  onChangeText?: (inputKey: string, text: string) => void\n}\n\nenum DisplayState {\n  Active = \"active\",\n  Inactive = \"inactive\",\n}\n\nexport type TextInputVariant = \"light\" | \"dark\"\nexport const defaultVariant: TextInputVariant = \"light\"\n\nexport function getColorsForVariant(variant: TextInputVariant) {\n  const {\n    colors: { black, white, gray },\n  } = themeProps\n\n  switch (variant) {\n    case \"light\":\n      return {\n        active: {\n          backgroundColor: white,\n          borderColor: black,\n          color: black,\n        },\n        inactive: {\n          backgroundColor: white,\n          borderColor: gray,\n          color: gray,\n        },\n      }\n    case \"dark\":\n      return {\n        active: {\n          backgroundColor: black,\n          borderColor: white,\n          color: white,\n        },\n        inactive: {\n          backgroundColor: black,\n          borderColor: gray,\n          color: white,\n        },\n      }\n    default:\n  }\n}\n\nexport const TextInput: React.SFC<TextInputProps> = ({\n  variant = defaultVariant,\n  placeholder,\n  secureTextEntry,\n  onChangeText,\n  style,\n  inputKey,\n}) => {\n  const [previous, setPrevious] = React.useState(DisplayState.Inactive)\n  const [current, setCurrent] = React.useState(DisplayState.Inactive)\n  const [value, setValue] = React.useState(\"\")\n  const variantColors = getColorsForVariant(variant)\n\n  const from = variantColors[previous]\n  const to = variantColors[current]\n\n  const handleOnChangeText = text => {\n    setValue(text)\n    if (text.length) {\n      setCurrent(DisplayState.Active)\n      setPrevious(DisplayState.Inactive)\n    } else {\n      setCurrent(DisplayState.Inactive)\n      setPrevious(DisplayState.Active)\n    }\n    if (onChangeText) {\n      onChangeText(inputKey, text)\n    }\n  }\n\n  return (\n    <Box style={{ height: 56 }}>\n      <Spring native from={from} to={to}>\n        {props => (\n          <AnimatedTextInput\n            secureTextEntry={secureTextEntry}\n            placeholder={placeholder}\n            style={{ ...style, ...props }}\n            autoCapitalize=\"none\"\n            placeholderTextColor={color(\"gray\")}\n            onChangeText={text => handleOnChangeText(text)}\n            value={value}\n          />\n        )}\n      </Spring>\n    </Box>\n  )\n}\n\nconst StyledTextInput = styled(RNTextInput)<TextInputProps>`\n  border-width: 1;\n  height: 56;\n  border-radius: 8;\n  font-size: 18;\n  line-height: 20;\n  padding-left: 15;\n  flex: 2;\n  padding-right: 15;\n  font-family: ${fontFamily.sans.medium};\n`\n\nconst AnimatedTextInput = animated(StyledTextInput)\n"]}