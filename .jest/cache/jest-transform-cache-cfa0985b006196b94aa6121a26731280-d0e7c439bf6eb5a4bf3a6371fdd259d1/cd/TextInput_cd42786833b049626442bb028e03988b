01d40a878ae3dbe3bd09cb898a2a7bac
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getColorsForVariant = getColorsForVariant;
exports.TextInput = exports.defaultVariant = void 0;

var _taggedTemplateLiteralLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteralLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireDefault(require("react"));

var _native = _interopRequireDefault(require("styled-components/native"));

var _Theme = require("./Theme");

var _Typography = require("./Typography");

var _reactNative = require("react-native");

var _renderpropsNative = require("react-spring/renderprops-native.cjs");

var _utils = require("../utils");

var _ = require("./");

function _templateObject() {
  var data = (0, _taggedTemplateLiteralLoose2.default)(["\n  border-width: 1;\n  height: 56;\n  border-radius: 8;\n  font-size: 18;\n  line-height: 20;\n  padding-left: 15;\n  flex: 2;\n  padding-right: 15;\n  font-family: ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DisplayState;

(function (DisplayState) {
  DisplayState["Active"] = "active";
  DisplayState["Inactive"] = "inactive";
})(DisplayState || (DisplayState = {}));

var defaultVariant = "light";
exports.defaultVariant = defaultVariant;

function getColorsForVariant(variant) {
  var _themeProps$colors = _Theme.themeProps.colors,
      black = _themeProps$colors.black,
      white = _themeProps$colors.white,
      gray = _themeProps$colors.gray;

  switch (variant) {
    case "light":
      return {
        active: {
          backgroundColor: white,
          borderColor: black,
          color: black
        },
        inactive: {
          backgroundColor: white,
          borderColor: gray,
          color: gray
        }
      };

    case "dark":
      return {
        active: {
          backgroundColor: black,
          borderColor: white,
          color: white
        },
        inactive: {
          backgroundColor: black,
          borderColor: gray,
          color: white
        }
      };

    default:
  }
}

var TextInput = function TextInput(_ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? defaultVariant : _ref$variant,
      placeholder = _ref.placeholder,
      secureTextEntry = _ref.secureTextEntry,
      onChangeText = _ref.onChangeText,
      style = _ref.style,
      inputKey = _ref.inputKey;

  var _React$useState = _react.default.useState(DisplayState.Inactive),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      previous = _React$useState2[0],
      setPrevious = _React$useState2[1];

  var _React$useState3 = _react.default.useState(DisplayState.Inactive),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      current = _React$useState4[0],
      setCurrent = _React$useState4[1];

  var _React$useState5 = _react.default.useState(""),
      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
      value = _React$useState6[0],
      setValue = _React$useState6[1];

  var variantColors = getColorsForVariant(variant);
  var from = variantColors[previous];
  var to = variantColors[current];

  var handleOnChangeText = function handleOnChangeText(text) {
    setValue(text);

    if (text.length) {
      setCurrent(DisplayState.Active);
      setPrevious(DisplayState.Inactive);
    } else {
      setCurrent(DisplayState.Inactive);
      setPrevious(DisplayState.Active);
    }

    if (onChangeText) {
      onChangeText(inputKey, text);
    }
  };

  return _react.default.createElement(_.Box, {
    style: {
      height: 56
    }
  }, _react.default.createElement(_renderpropsNative.Spring, {
    native: true,
    from: from,
    to: to
  }, function (props) {
    return _react.default.createElement(AnimatedTextInput, {
      secureTextEntry: secureTextEntry,
      placeholder: placeholder,
      style: _objectSpread({}, style, {}, props),
      autoCapitalize: "none",
      placeholderTextColor: (0, _utils.color)("gray"),
      onChangeText: function onChangeText(text) {
        return handleOnChangeText(text);
      },
      value: value
    });
  }));
};

exports.TextInput = TextInput;
var StyledTextInput = (0, _native.default)(_reactNative.TextInput)(_templateObject(), _Typography.fontFamily.sans.medium);
var AnimatedTextInput = (0, _renderpropsNative.animated)(StyledTextInput);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,