9f3fd551724c00e138034acf66888cba
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DeprecatedColorPropType = require('DeprecatedColorPropType');

var DeprecatedViewPropTypes = require('DeprecatedViewPropTypes');

var DocumentSelectionState = require('DocumentSelectionState');

var NativeMethodsMixin = require('NativeMethodsMixin');

var Platform = require('Platform');

var PropTypes = require('prop-types');

var React = require('React');

var ReactNative = require('ReactNative');

var StyleSheet = require('StyleSheet');

var Text = require('Text');

var TextAncestor = require('TextAncestor');

var TextInputState = require('TextInputState');

var TouchableWithoutFeedback = require('TouchableWithoutFeedback');

var UIManager = require('UIManager');

var createReactClass = require('create-react-class');

var invariant = require('invariant');

var requireNativeComponent = require('requireNativeComponent');

var warning = require('fbjs/lib/warning');

var AndroidTextInput;
var RCTMultilineTextInputView;
var RCTSinglelineTextInputView;

if (Platform.OS === 'android') {
  AndroidTextInput = requireNativeComponent('AndroidTextInput');
} else if (Platform.OS === 'ios') {
  RCTMultilineTextInputView = requireNativeComponent('RCTMultilineTextInputView');
  RCTSinglelineTextInputView = requireNativeComponent('RCTSinglelineTextInputView');
}

var onlyMultiline = {
  onTextInput: true,
  children: true
};
var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];

var emptyFunctionThatReturnsTrue = function emptyFunctionThatReturnsTrue() {
  return true;
};

var TextInput = createReactClass({
  displayName: 'TextInput',
  statics: {
    State: {
      currentlyFocusedField: TextInputState.currentlyFocusedField,
      focusTextInput: TextInputState.focusTextInput,
      blurTextInput: TextInputState.blurTextInput
    }
  },
  propTypes: _objectSpread({}, DeprecatedViewPropTypes, {
    autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),
    autoCompleteType: PropTypes.oneOf(['cc-csc', 'cc-exp', 'cc-exp-month', 'cc-exp-year', 'cc-number', 'email', 'name', 'password', 'postal-code', 'street-address', 'tel', 'username', 'off']),
    autoCorrect: PropTypes.bool,
    spellCheck: PropTypes.bool,
    autoFocus: PropTypes.bool,
    allowFontScaling: PropTypes.bool,
    maxFontSizeMultiplier: PropTypes.number,
    editable: PropTypes.bool,
    keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'number-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search', 'visible-password']),
    keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),
    returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),
    returnKeyLabel: PropTypes.string,
    maxLength: PropTypes.number,
    numberOfLines: PropTypes.number,
    disableFullscreenUI: PropTypes.bool,
    enablesReturnKeyAutomatically: PropTypes.bool,
    multiline: PropTypes.bool,
    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
    onBlur: PropTypes.func,
    onFocus: PropTypes.func,
    onChange: PropTypes.func,
    onChangeText: PropTypes.func,
    onContentSizeChange: PropTypes.func,
    onTextInput: PropTypes.func,
    onEndEditing: PropTypes.func,
    onSelectionChange: PropTypes.func,
    onSubmitEditing: PropTypes.func,
    onKeyPress: PropTypes.func,
    onLayout: PropTypes.func,
    onScroll: PropTypes.func,
    placeholder: PropTypes.string,
    placeholderTextColor: DeprecatedColorPropType,
    scrollEnabled: PropTypes.bool,
    secureTextEntry: PropTypes.bool,
    selectionColor: DeprecatedColorPropType,
    selectionState: PropTypes.instanceOf(DocumentSelectionState),
    selection: PropTypes.shape({
      start: PropTypes.number.isRequired,
      end: PropTypes.number
    }),
    value: PropTypes.string,
    defaultValue: PropTypes.string,
    clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),
    clearTextOnFocus: PropTypes.bool,
    selectTextOnFocus: PropTypes.bool,
    blurOnSubmit: PropTypes.bool,
    style: Text.propTypes.style,
    underlineColorAndroid: DeprecatedColorPropType,
    inlineImageLeft: PropTypes.string,
    inlineImagePadding: PropTypes.number,
    rejectResponderTermination: PropTypes.bool,
    dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),
    caretHidden: PropTypes.bool,
    contextMenuHidden: PropTypes.bool,
    inputAccessoryViewID: PropTypes.string,
    textContentType: PropTypes.oneOf(['none', 'URL', 'addressCity', 'addressCityAndState', 'addressState', 'countryName', 'creditCardNumber', 'emailAddress', 'familyName', 'fullStreetAddress', 'givenName', 'jobTitle', 'location', 'middleName', 'name', 'namePrefix', 'nameSuffix', 'nickname', 'organizationName', 'postalCode', 'streetAddressLine1', 'streetAddressLine2', 'sublocality', 'telephoneNumber', 'username', 'password', 'newPassword', 'oneTimeCode'])
  }),
  getDefaultProps: function getDefaultProps() {
    return {
      allowFontScaling: true,
      rejectResponderTermination: true,
      underlineColorAndroid: 'transparent'
    };
  },
  mixins: [NativeMethodsMixin],
  isFocused: function isFocused() {
    return TextInputState.currentlyFocusedField() === ReactNative.findNodeHandle(this._inputRef);
  },
  _inputRef: undefined,
  _focusSubscription: undefined,
  _lastNativeText: undefined,
  _lastNativeSelection: undefined,
  _rafId: null,
  componentDidMount: function componentDidMount() {
    this._lastNativeText = this.props.value;
    var tag = ReactNative.findNodeHandle(this._inputRef);

    if (tag != null) {
      TextInputState.registerInput(tag);
    }

    if (this.props.autoFocus) {
      this._rafId = requestAnimationFrame(this.focus);
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    this._focusSubscription && this._focusSubscription.remove();

    if (this.isFocused()) {
      this.blur();
    }

    var tag = ReactNative.findNodeHandle(this._inputRef);

    if (tag != null) {
      TextInputState.unregisterInput(tag);
    }

    if (this._rafId != null) {
      cancelAnimationFrame(this._rafId);
    }
  },
  clear: function clear() {
    this.setNativeProps({
      text: ''
    });
  },
  render: function render() {
    var textInput;

    if (Platform.OS === 'ios') {
      textInput = UIManager.getViewManagerConfig('RCTVirtualText') ? this._renderIOS() : this._renderIOSLegacy();
    } else if (Platform.OS === 'android') {
      textInput = this._renderAndroid();
    }

    return React.createElement(TextAncestor.Provider, {
      value: true
    }, textInput);
  },
  _getText: function _getText() {
    return typeof this.props.value === 'string' ? this.props.value : typeof this.props.defaultValue === 'string' ? this.props.defaultValue : '';
  },
  _setNativeRef: function _setNativeRef(ref) {
    this._inputRef = ref;
  },
  _renderIOSLegacy: function _renderIOSLegacy() {
    var textContainer;
    var props = (0, _extends2.default)({}, this.props);
    props.style = [this.props.style];

    if (props.selection && props.selection.end == null) {
      props.selection = {
        start: props.selection.start,
        end: props.selection.start
      };
    }

    if (!props.multiline) {
      if (__DEV__) {
        for (var propKey in onlyMultiline) {
          if (props[propKey]) {
            var error = new Error('TextInput prop `' + propKey + '` is only supported with multiline.');
            warning(false, '%s', error.stack);
          }
        }
      }

      textContainer = React.createElement(RCTSinglelineTextInputView, (0, _extends2.default)({
        ref: this._setNativeRef
      }, props, {
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onSelectionChange: this._onSelectionChange,
        onSelectionChangeShouldSetResponder: emptyFunctionThatReturnsTrue,
        text: this._getText()
      }));
    } else {
      var children = props.children;
      var childCount = 0;
      React.Children.forEach(children, function () {
        return ++childCount;
      });
      invariant(!(props.value && childCount), 'Cannot specify both value and children.');

      if (childCount >= 1) {
        children = React.createElement(Text, {
          style: props.style,
          allowFontScaling: props.allowFontScaling,
          maxFontSizeMultiplier: props.maxFontSizeMultiplier
        }, children);
      }

      if (props.inputView) {
        children = [children, props.inputView];
      }

      props.style.unshift(styles.multilineInput);
      textContainer = React.createElement(RCTMultilineTextInputView, (0, _extends2.default)({
        ref: this._setNativeRef
      }, props, {
        children: children,
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onContentSizeChange: this.props.onContentSizeChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        onSelectionChangeShouldSetResponder: emptyFunctionThatReturnsTrue,
        text: this._getText(),
        dataDetectorTypes: this.props.dataDetectorTypes,
        onScroll: this._onScroll
      }));
    }

    return React.createElement(TouchableWithoutFeedback, {
      onLayout: props.onLayout,
      onPress: this._onPress,
      rejectResponderTermination: true,
      accessible: props.accessible,
      accessibilityLabel: props.accessibilityLabel,
      accessibilityRole: props.accessibilityRole,
      accessibilityStates: props.accessibilityStates,
      nativeID: this.props.nativeID,
      testID: props.testID
    }, textContainer);
  },
  _renderIOS: function _renderIOS() {
    var props = (0, _extends2.default)({}, this.props);
    props.style = [this.props.style];

    if (props.selection && props.selection.end == null) {
      props.selection = {
        start: props.selection.start,
        end: props.selection.start
      };
    }

    var RCTTextInputView = props.multiline ? RCTMultilineTextInputView : RCTSinglelineTextInputView;

    if (props.multiline) {
      props.style.unshift(styles.multilineInput);
    }

    var textContainer = React.createElement(RCTTextInputView, (0, _extends2.default)({
      ref: this._setNativeRef
    }, props, {
      onFocus: this._onFocus,
      onBlur: this._onBlur,
      onChange: this._onChange,
      onContentSizeChange: this.props.onContentSizeChange,
      onSelectionChange: this._onSelectionChange,
      onTextInput: this._onTextInput,
      onSelectionChangeShouldSetResponder: emptyFunctionThatReturnsTrue,
      text: this._getText(),
      dataDetectorTypes: this.props.dataDetectorTypes,
      onScroll: this._onScroll
    }));
    return React.createElement(TouchableWithoutFeedback, {
      onLayout: props.onLayout,
      onPress: this._onPress,
      rejectResponderTermination: props.rejectResponderTermination,
      accessible: props.accessible,
      accessibilityLabel: props.accessibilityLabel,
      accessibilityRole: props.accessibilityRole,
      accessibilityStates: props.accessibilityStates,
      nativeID: this.props.nativeID,
      testID: props.testID
    }, textContainer);
  },
  _renderAndroid: function _renderAndroid() {
    var props = (0, _extends2.default)({}, this.props);
    props.style = [this.props.style];
    props.autoCapitalize = UIManager.getViewManagerConfig('AndroidTextInput').Constants.AutoCapitalizationType[props.autoCapitalize || 'sentences'];
    var children = this.props.children;
    var childCount = 0;
    React.Children.forEach(children, function () {
      return ++childCount;
    });
    invariant(!(this.props.value && childCount), 'Cannot specify both value and children.');

    if (childCount > 1) {
      children = React.createElement(Text, null, children);
    }

    if (props.selection && props.selection.end == null) {
      props.selection = {
        start: props.selection.start,
        end: props.selection.start
      };
    }

    var textContainer = React.createElement(AndroidTextInput, (0, _extends2.default)({
      ref: this._setNativeRef
    }, props, {
      mostRecentEventCount: 0,
      onFocus: this._onFocus,
      onBlur: this._onBlur,
      onChange: this._onChange,
      onSelectionChange: this._onSelectionChange,
      onTextInput: this._onTextInput,
      text: this._getText(),
      children: children,
      disableFullscreenUI: this.props.disableFullscreenUI,
      textBreakStrategy: this.props.textBreakStrategy,
      onScroll: this._onScroll
    }));
    return React.createElement(TouchableWithoutFeedback, {
      onLayout: props.onLayout,
      onPress: this._onPress,
      accessible: this.props.accessible,
      accessibilityLabel: this.props.accessibilityLabel,
      accessibilityRole: this.props.accessibilityRole,
      accessibilityStates: this.props.accessibilityStates,
      nativeID: this.props.nativeID,
      testID: this.props.testID
    }, textContainer);
  },
  _onFocus: function _onFocus(event) {
    if (this.props.onFocus) {
      this.props.onFocus(event);
    }

    if (this.props.selectionState) {
      this.props.selectionState.focus();
    }
  },
  _onPress: function _onPress(event) {
    if (this.props.editable || this.props.editable === undefined) {
      this.focus();
    }
  },
  _onChange: function _onChange(event) {
    if (this._inputRef && this._inputRef.setNativeProps) {
      this._inputRef.setNativeProps({
        mostRecentEventCount: event.nativeEvent.eventCount
      });
    }

    var text = event.nativeEvent.text;
    this.props.onChange && this.props.onChange(event);
    this.props.onChangeText && this.props.onChangeText(text);

    if (!this._inputRef) {
      return;
    }

    this._lastNativeText = text;
    this.forceUpdate();
  },
  _onSelectionChange: function _onSelectionChange(event) {
    this.props.onSelectionChange && this.props.onSelectionChange(event);

    if (!this._inputRef) {
      return;
    }

    this._lastNativeSelection = event.nativeEvent.selection;

    if (this.props.selection || this.props.selectionState) {
      this.forceUpdate();
    }
  },
  componentDidUpdate: function componentDidUpdate() {
    var nativeProps = {};

    if (this._lastNativeText !== this.props.value && typeof this.props.value === 'string') {
      nativeProps.text = this.props.value;
    }

    var selection = this.props.selection;

    if (this._lastNativeSelection && selection && (this._lastNativeSelection.start !== selection.start || this._lastNativeSelection.end !== selection.end)) {
      nativeProps.selection = this.props.selection;
    }

    if (Object.keys(nativeProps).length > 0 && this._inputRef && this._inputRef.setNativeProps) {
      this._inputRef.setNativeProps(nativeProps);
    }

    if (this.props.selectionState && selection) {
      this.props.selectionState.update(selection.start, selection.end);
    }
  },
  _onBlur: function _onBlur(event) {
    this.blur();

    if (this.props.onBlur) {
      this.props.onBlur(event);
    }

    if (this.props.selectionState) {
      this.props.selectionState.blur();
    }
  },
  _onTextInput: function _onTextInput(event) {
    this.props.onTextInput && this.props.onTextInput(event);
  },
  _onScroll: function _onScroll(event) {
    this.props.onScroll && this.props.onScroll(event);
  }
});

var InternalTextInputType = function (_ReactNative$NativeCo) {
  (0, _inherits2.default)(InternalTextInputType, _ReactNative$NativeCo);

  function InternalTextInputType() {
    (0, _classCallCheck2.default)(this, InternalTextInputType);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(InternalTextInputType).apply(this, arguments));
  }

  (0, _createClass2.default)(InternalTextInputType, [{
    key: "clear",
    value: function clear() {}
  }, {
    key: "isFocused",
    value: function isFocused() {}
  }]);
  return InternalTextInputType;
}(ReactNative.NativeComponent);

var TypedTextInput = TextInput;
var styles = StyleSheet.create({
  multilineInput: {
    paddingTop: 5
  }
});
module.exports = TypedTextInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,