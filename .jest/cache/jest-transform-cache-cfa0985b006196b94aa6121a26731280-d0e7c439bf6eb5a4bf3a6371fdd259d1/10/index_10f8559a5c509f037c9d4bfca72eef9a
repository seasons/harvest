0651a32880e4a2f179aa8b381626b9a1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _agent = _interopRequireDefault(require("./agent"));

var _reactNative = require("react-native");

var _url = _interopRequireDefault(require("url"));

var _authError = _interopRequireDefault(require("../auth/authError"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var A0Auth0 = _reactNative.NativeModules.A0Auth0;

var callbackUri = function callbackUri(domain) {
  var bundleIdentifier = A0Auth0.bundleIdentifier;
  return bundleIdentifier.toLowerCase() + "://" + domain + "/" + _reactNative.Platform.OS + "/" + bundleIdentifier + "/callback";
};

var WebAuth = function () {
  function WebAuth(auth) {
    (0, _classCallCheck2.default)(this, WebAuth);
    this.client = auth;
    var baseUrl = auth.baseUrl,
        clientId = auth.clientId,
        domain = auth.domain;
    this.domain = domain;
    this.clientId = clientId;
    this.agent = new _agent.default();
  }

  (0, _createClass2.default)(WebAuth, [{
    key: "authorize",
    value: function authorize() {
      var _this = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var clientId = this.clientId,
          domain = this.domain,
          client = this.client,
          agent = this.agent;
      return agent.newTransaction().then(function (_ref) {
        var state = _ref.state,
            verifier = _ref.verifier,
            defaults = (0, _objectWithoutProperties2.default)(_ref, ["state", "verifier"]);
        var redirectUri = callbackUri(domain);
        var expectedState = options.state || state;

        var query = _objectSpread({}, defaults, {
          clientId: clientId,
          responseType: 'code',
          redirectUri: redirectUri,
          state: expectedState
        }, options);

        var authorizeUrl = _this.client.authorizeUrl(query);

        return agent.show(authorizeUrl).then(function (redirectUrl) {
          if (!redirectUrl || !redirectUrl.startsWith(redirectUri)) {
            throw new _authError.default({
              json: {
                error: 'a0.redirect_uri.not_expected',
                error_description: "Expected " + redirectUri + " but got " + redirectUrl
              },
              status: 0
            });
          }

          var query = _url.default.parse(redirectUrl, true).query;

          var code = query.code,
              resultState = query.state,
              error = query.error;

          if (error) {
            throw new _authError.default({
              json: query,
              status: 0
            });
          }

          if (resultState !== expectedState) {
            throw new _authError.default({
              json: {
                error: 'a0.state.invalid',
                error_description: "Invalid state recieved in redirect url"
              },
              status: 0
            });
          }

          return client.exchange({
            code: code,
            verifier: verifier,
            redirectUri: redirectUri
          });
        });
      });
    }
  }, {
    key: "clearSession",
    value: function clearSession() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var client = this.client,
          agent = this.agent,
          domain = this.domain,
          clientId = this.clientId;
      options.clientId = clientId;
      options.returnTo = callbackUri(domain);
      options.federated = options.federated || false;
      var logoutUrl = client.logoutUrl(options);
      return agent.show(logoutUrl, true);
    }
  }]);
  return WebAuth;
}();

exports.default = WebAuth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,