{"version":3,"sources":["index.js"],"names":["A0Auth0","NativeModules","callbackUri","domain","bundleIdentifier","toLowerCase","Platform","OS","WebAuth","auth","client","baseUrl","clientId","agent","Agent","options","newTransaction","then","state","verifier","defaults","redirectUri","expectedState","query","responseType","authorizeUrl","show","redirectUrl","startsWith","AuthError","json","error","error_description","status","url","parse","code","resultState","exchange","returnTo","federated","logoutUrl"],"mappings":"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","sourcesContent":["import Agent from './agent';\nimport { NativeModules, Platform } from 'react-native';\n\nimport url from 'url';\nimport AuthError from '../auth/authError';\n\nconst { A0Auth0 } = NativeModules;\n\nconst callbackUri = domain => {\n  const bundleIdentifier = A0Auth0.bundleIdentifier;\n  return `${bundleIdentifier.toLowerCase()}://${domain}/${\n    Platform.OS\n  }/${bundleIdentifier}/callback`;\n};\n\n/**\n * Helper to perform Auth against Auth0 hosted login page\n *\n * It will use `/authorize` endpoint of the Authorization Server (AS)\n * with Code Grant and Proof Key for Challenge Exchange (PKCE).\n *\n * @export\n * @class WebAuth\n * @see https://auth0.com/docs/api-auth/grant/authorization-code-pkce\n */\nexport default class WebAuth {\n  constructor(auth) {\n    this.client = auth;\n    const { baseUrl, clientId, domain } = auth;\n    this.domain = domain;\n    this.clientId = clientId;\n    this.agent = new Agent();\n  }\n\n  /**\n   * Starts the AuthN/AuthZ transaction against the AS in the in-app browser.\n   *\n   * In iOS it will use `SFSafariViewController` and in Android Chrome Custom Tabs.\n   *\n   * To learn more about how to customize the authorize call, check the Universal Login Page\n   * article at https://auth0.com/docs/hosted-pages/login\n   *\n   * @param {Object} parameters parameters to send\n   * @param {String} [parameters.state] random string to prevent CSRF attacks and used to discard unexepcted results. By default its a cryptographically secure random.\n   * @param {String} [parameters.nonce] random string to prevent replay attacks of id_tokens.\n   * @param {String} [parameters.audience] identifier of Resource Server (RS) to be included as audience (aud claim) of the issued access token\n   * @param {String} [parameters.scope] scopes requested for the issued tokens. e.g. `openid profile`\n   * @param {String} [parameters.connection] The name of the identity provider to use, e.g. \"google-oauth2\" or \"facebook\". When not set, it will display Auth0's Universal Login Page.\n   * @returns {Promise}\n   * @see https://auth0.com/docs/api/authentication#authorize-client\n   *\n   * @memberof WebAuth\n   */\n  authorize(options = {}) {\n    const { clientId, domain, client, agent } = this;\n    return agent.newTransaction().then(({ state, verifier, ...defaults }) => {\n      const redirectUri = callbackUri(domain);\n      const expectedState = options.state || state;\n      let query = {\n        ...defaults,\n        clientId,\n        responseType: 'code',\n        redirectUri,\n        state: expectedState,\n        ...options\n      };\n      const authorizeUrl = this.client.authorizeUrl(query);\n      return agent.show(authorizeUrl).then(redirectUrl => {\n        if (!redirectUrl || !redirectUrl.startsWith(redirectUri)) {\n          throw new AuthError({\n            json: {\n              error: 'a0.redirect_uri.not_expected',\n              error_description: `Expected ${redirectUri} but got ${redirectUrl}`\n            },\n            status: 0\n          });\n        }\n        const query = url.parse(redirectUrl, true).query;\n        const { code, state: resultState, error } = query;\n        if (error) {\n          throw new AuthError({ json: query, status: 0 });\n        }\n        if (resultState !== expectedState) {\n          throw new AuthError({\n            json: {\n              error: 'a0.state.invalid',\n              error_description: `Invalid state recieved in redirect url`\n            },\n            status: 0\n          });\n        }\n        return client.exchange({ code, verifier, redirectUri });\n      });\n    });\n  }\n\n  /**\n   *  Removes Auth0 session and optionally remove the Identity Provider session.\n   *\n   *  In iOS it will use `SFSafariViewController` and in Android Chrome Custom Tabs.\n   *\n   * @param {Object} parameters parameters to send\n   * @param {Bool} [parameters.federated] Optionally remove the IdP session.\n   * @returns {Promise}\n   * @see https://auth0.com/docs/logout\n   *\n   * @memberof WebAuth\n   */\n  clearSession(options = {}) {\n    const { client, agent, domain, clientId } = this;\n    options.clientId = clientId;\n    options.returnTo = callbackUri(domain);\n    options.federated = options.federated || false;\n    const logoutUrl = client.logoutUrl(options);\n    return agent.show(logoutUrl, true);\n  }\n}\n"]}