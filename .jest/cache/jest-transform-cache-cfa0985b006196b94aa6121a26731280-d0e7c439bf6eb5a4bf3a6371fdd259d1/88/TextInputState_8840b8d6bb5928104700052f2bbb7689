f9bcfd3e5ae0759314ae0cad5dfaf292
'use strict';

var Platform = require('Platform');

var UIManager = require('UIManager');

var currentlyFocusedID = null;
var inputs = new Set();

function currentlyFocusedField() {
  return currentlyFocusedID;
}

function focusTextInput(textFieldID) {
  if (currentlyFocusedID !== textFieldID && textFieldID !== null) {
    currentlyFocusedID = textFieldID;

    if (Platform.OS === 'ios') {
      UIManager.focus(textFieldID);
    } else if (Platform.OS === 'android') {
      UIManager.dispatchViewManagerCommand(textFieldID, UIManager.getViewManagerConfig('AndroidTextInput').Commands.focusTextInput, null);
    }
  }
}

function blurTextInput(textFieldID) {
  if (currentlyFocusedID === textFieldID && textFieldID !== null) {
    currentlyFocusedID = null;

    if (Platform.OS === 'ios') {
      UIManager.blur(textFieldID);
    } else if (Platform.OS === 'android') {
      UIManager.dispatchViewManagerCommand(textFieldID, UIManager.getViewManagerConfig('AndroidTextInput').Commands.blurTextInput, null);
    }
  }
}

function registerInput(textFieldID) {
  inputs.add(textFieldID);
}

function unregisterInput(textFieldID) {
  inputs.delete(textFieldID);
}

function isTextInput(textFieldID) {
  return inputs.has(textFieldID);
}

module.exports = {
  currentlyFocusedField: currentlyFocusedField,
  focusTextInput: focusTextInput,
  blurTextInput: blurTextInput,
  registerInput: registerInput,
  unregisterInput: unregisterInput,
  isTextInput: isTextInput
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRJbnB1dFN0YXRlLmpzIl0sIm5hbWVzIjpbIlBsYXRmb3JtIiwicmVxdWlyZSIsIlVJTWFuYWdlciIsImN1cnJlbnRseUZvY3VzZWRJRCIsImlucHV0cyIsIlNldCIsImN1cnJlbnRseUZvY3VzZWRGaWVsZCIsImZvY3VzVGV4dElucHV0IiwidGV4dEZpZWxkSUQiLCJPUyIsImZvY3VzIiwiZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQiLCJnZXRWaWV3TWFuYWdlckNvbmZpZyIsIkNvbW1hbmRzIiwiYmx1clRleHRJbnB1dCIsImJsdXIiLCJyZWdpc3RlcklucHV0IiwiYWRkIiwidW5yZWdpc3RlcklucHV0IiwiZGVsZXRlIiwiaXNUZXh0SW5wdXQiLCJoYXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFlQTs7QUFFQSxJQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXhCOztBQUNBLElBQU1DLFNBQVMsR0FBR0QsT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0FBRUEsSUFBSUUsa0JBQTJCLEdBQUcsSUFBbEM7QUFDQSxJQUFNQyxNQUFNLEdBQUcsSUFBSUMsR0FBSixFQUFmOztBQU1BLFNBQVNDLHFCQUFULEdBQTBDO0FBQ3hDLFNBQU9ILGtCQUFQO0FBQ0Q7O0FBT0QsU0FBU0ksY0FBVCxDQUF3QkMsV0FBeEIsRUFBOEM7QUFDNUMsTUFBSUwsa0JBQWtCLEtBQUtLLFdBQXZCLElBQXNDQSxXQUFXLEtBQUssSUFBMUQsRUFBZ0U7QUFDOURMLElBQUFBLGtCQUFrQixHQUFHSyxXQUFyQjs7QUFDQSxRQUFJUixRQUFRLENBQUNTLEVBQVQsS0FBZ0IsS0FBcEIsRUFBMkI7QUFDekJQLE1BQUFBLFNBQVMsQ0FBQ1EsS0FBVixDQUFnQkYsV0FBaEI7QUFDRCxLQUZELE1BRU8sSUFBSVIsUUFBUSxDQUFDUyxFQUFULEtBQWdCLFNBQXBCLEVBQStCO0FBQ3BDUCxNQUFBQSxTQUFTLENBQUNTLDBCQUFWLENBQ0VILFdBREYsRUFFRU4sU0FBUyxDQUFDVSxvQkFBVixDQUErQixrQkFBL0IsRUFBbURDLFFBQW5ELENBQ0dOLGNBSEwsRUFJRSxJQUpGO0FBTUQ7QUFDRjtBQUNGOztBQU9ELFNBQVNPLGFBQVQsQ0FBdUJOLFdBQXZCLEVBQTZDO0FBQzNDLE1BQUlMLGtCQUFrQixLQUFLSyxXQUF2QixJQUFzQ0EsV0FBVyxLQUFLLElBQTFELEVBQWdFO0FBQzlETCxJQUFBQSxrQkFBa0IsR0FBRyxJQUFyQjs7QUFDQSxRQUFJSCxRQUFRLENBQUNTLEVBQVQsS0FBZ0IsS0FBcEIsRUFBMkI7QUFDekJQLE1BQUFBLFNBQVMsQ0FBQ2EsSUFBVixDQUFlUCxXQUFmO0FBQ0QsS0FGRCxNQUVPLElBQUlSLFFBQVEsQ0FBQ1MsRUFBVCxLQUFnQixTQUFwQixFQUErQjtBQUNwQ1AsTUFBQUEsU0FBUyxDQUFDUywwQkFBVixDQUNFSCxXQURGLEVBRUVOLFNBQVMsQ0FBQ1Usb0JBQVYsQ0FBK0Isa0JBQS9CLEVBQW1EQyxRQUFuRCxDQUNHQyxhQUhMLEVBSUUsSUFKRjtBQU1EO0FBQ0Y7QUFDRjs7QUFFRCxTQUFTRSxhQUFULENBQXVCUixXQUF2QixFQUE0QztBQUMxQ0osRUFBQUEsTUFBTSxDQUFDYSxHQUFQLENBQVdULFdBQVg7QUFDRDs7QUFFRCxTQUFTVSxlQUFULENBQXlCVixXQUF6QixFQUE4QztBQUM1Q0osRUFBQUEsTUFBTSxDQUFDZSxNQUFQLENBQWNYLFdBQWQ7QUFDRDs7QUFFRCxTQUFTWSxXQUFULENBQXFCWixXQUFyQixFQUEwQztBQUN4QyxTQUFPSixNQUFNLENBQUNpQixHQUFQLENBQVdiLFdBQVgsQ0FBUDtBQUNEOztBQUVEYyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZmpCLEVBQUFBLHFCQUFxQixFQUFyQkEscUJBRGU7QUFFZkMsRUFBQUEsY0FBYyxFQUFkQSxjQUZlO0FBR2ZPLEVBQUFBLGFBQWEsRUFBYkEsYUFIZTtBQUlmRSxFQUFBQSxhQUFhLEVBQWJBLGFBSmU7QUFLZkUsRUFBQUEsZUFBZSxFQUFmQSxlQUxlO0FBTWZFLEVBQUFBLFdBQVcsRUFBWEE7QUFOZSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICpcbiAqIFRoaXMgY2xhc3MgaXMgcmVzcG9uc2libGUgZm9yIGNvb3JkaW5hdGluZyB0aGUgXCJmb2N1c2VkXCJcbiAqIHN0YXRlIGZvciBUZXh0SW5wdXRzLiBBbGwgY2FsbHMgcmVsYXRpbmcgdG8gdGhlIGtleWJvYXJkXG4gKiBzaG91bGQgYmUgZnVubmVsZWQgdGhyb3VnaCBoZXJlXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBQbGF0Zm9ybSA9IHJlcXVpcmUoJ1BsYXRmb3JtJyk7XG5jb25zdCBVSU1hbmFnZXIgPSByZXF1aXJlKCdVSU1hbmFnZXInKTtcblxubGV0IGN1cnJlbnRseUZvY3VzZWRJRDogP251bWJlciA9IG51bGw7XG5jb25zdCBpbnB1dHMgPSBuZXcgU2V0KCk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgSUQgb2YgdGhlIGN1cnJlbnRseSBmb2N1c2VkIHRleHQgZmllbGQsIGlmIG9uZSBleGlzdHNcbiAqIElmIG5vIHRleHQgZmllbGQgaXMgZm9jdXNlZCBpdCByZXR1cm5zIG51bGxcbiAqL1xuZnVuY3Rpb24gY3VycmVudGx5Rm9jdXNlZEZpZWxkKCk6ID9udW1iZXIge1xuICByZXR1cm4gY3VycmVudGx5Rm9jdXNlZElEO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBUZXh0SW5wdXRJRCBpZCBvZiB0aGUgdGV4dCBmaWVsZCB0byBmb2N1c1xuICogRm9jdXNlcyB0aGUgc3BlY2lmaWVkIHRleHQgZmllbGRcbiAqIG5vb3AgaWYgdGhlIHRleHQgZmllbGQgd2FzIGFscmVhZHkgZm9jdXNlZFxuICovXG5mdW5jdGlvbiBmb2N1c1RleHRJbnB1dCh0ZXh0RmllbGRJRDogP251bWJlcikge1xuICBpZiAoY3VycmVudGx5Rm9jdXNlZElEICE9PSB0ZXh0RmllbGRJRCAmJiB0ZXh0RmllbGRJRCAhPT0gbnVsbCkge1xuICAgIGN1cnJlbnRseUZvY3VzZWRJRCA9IHRleHRGaWVsZElEO1xuICAgIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2lvcycpIHtcbiAgICAgIFVJTWFuYWdlci5mb2N1cyh0ZXh0RmllbGRJRCk7XG4gICAgfSBlbHNlIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnKSB7XG4gICAgICBVSU1hbmFnZXIuZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQoXG4gICAgICAgIHRleHRGaWVsZElELFxuICAgICAgICBVSU1hbmFnZXIuZ2V0Vmlld01hbmFnZXJDb25maWcoJ0FuZHJvaWRUZXh0SW5wdXQnKS5Db21tYW5kc1xuICAgICAgICAgIC5mb2N1c1RleHRJbnB1dCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHRleHRGaWVsZElEIGlkIG9mIHRoZSB0ZXh0IGZpZWxkIHRvIHVuZm9jdXNcbiAqIFVuZm9jdXNlcyB0aGUgc3BlY2lmaWVkIHRleHQgZmllbGRcbiAqIG5vb3AgaWYgaXQgd2Fzbid0IGZvY3VzZWRcbiAqL1xuZnVuY3Rpb24gYmx1clRleHRJbnB1dCh0ZXh0RmllbGRJRDogP251bWJlcikge1xuICBpZiAoY3VycmVudGx5Rm9jdXNlZElEID09PSB0ZXh0RmllbGRJRCAmJiB0ZXh0RmllbGRJRCAhPT0gbnVsbCkge1xuICAgIGN1cnJlbnRseUZvY3VzZWRJRCA9IG51bGw7XG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICAgICAgVUlNYW5hZ2VyLmJsdXIodGV4dEZpZWxkSUQpO1xuICAgIH0gZWxzZSBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgVUlNYW5hZ2VyLmRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kKFxuICAgICAgICB0ZXh0RmllbGRJRCxcbiAgICAgICAgVUlNYW5hZ2VyLmdldFZpZXdNYW5hZ2VyQ29uZmlnKCdBbmRyb2lkVGV4dElucHV0JykuQ29tbWFuZHNcbiAgICAgICAgICAuYmx1clRleHRJbnB1dCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySW5wdXQodGV4dEZpZWxkSUQ6IG51bWJlcikge1xuICBpbnB1dHMuYWRkKHRleHRGaWVsZElEKTtcbn1cblxuZnVuY3Rpb24gdW5yZWdpc3RlcklucHV0KHRleHRGaWVsZElEOiBudW1iZXIpIHtcbiAgaW5wdXRzLmRlbGV0ZSh0ZXh0RmllbGRJRCk7XG59XG5cbmZ1bmN0aW9uIGlzVGV4dElucHV0KHRleHRGaWVsZElEOiBudW1iZXIpIHtcbiAgcmV0dXJuIGlucHV0cy5oYXModGV4dEZpZWxkSUQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3VycmVudGx5Rm9jdXNlZEZpZWxkLFxuICBmb2N1c1RleHRJbnB1dCxcbiAgYmx1clRleHRJbnB1dCxcbiAgcmVnaXN0ZXJJbnB1dCxcbiAgdW5yZWdpc3RlcklucHV0LFxuICBpc1RleHRJbnB1dCxcbn07XG4iXX0=