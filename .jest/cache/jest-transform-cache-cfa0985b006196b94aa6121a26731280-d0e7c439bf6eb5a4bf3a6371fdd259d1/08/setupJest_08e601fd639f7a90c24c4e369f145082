161d9e199d5af7d30b7ae225cabeb299
jest.mock("./Components/Radio", function () {
  return null;
});

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _chalk = _interopRequireDefault(require("chalk"));

var _enzyme = _interopRequireDefault(require("enzyme"));

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16.3"));

var _expect = _interopRequireDefault(require("expect"));

var _util = require("util");

var _snapshotDiff = _interopRequireDefault(require("snapshot-diff"));

_enzyme.default.configure({
  adapter: new _enzymeAdapterReact.default()
});

_expect.default.extend({
  toMatchDiffSnapshot: _snapshotDiff.default.toMatchDiffSnapshot
});

var originalConsoleError = console.error;

console.error = function (message) {
  if (typeof message === "string" && (message.includes("is using uppercase HTML. Always use lowercase HTML tags in React.") || /Warning: React does not recognize the `\w+` prop on a DOM element\./.test(message) || /Warning: The tag <\w+> is unrecognized in this browser\./.test(message) || /Warning: Unknown event handler property `\w+`\./.test(message) || /Warning: Received `\w+` for a non-boolean attribute `\w+`\./.test(message) || /Warning: [\w\s]+ has been extracted from react-native core/.test(message))) {} else {
    originalConsoleError(message);
  }
};

if (process.env.ALLOW_CONSOLE_LOGS !== "true") {
  var originalLoggers = {
    error: console.error,
    warn: console.warn
  };

  function logToError(type, args, constructorOpt) {
    var explanation = _chalk.default.white("Test failed due to `console." + type + "(\u2026)` call.\n") + _chalk.default.gray("(Disable with ALLOW_CONSOLE_LOGS=true env variable.)\n\n");

    if (args[0] instanceof Error) {
      var msg = explanation + _chalk.default.red(args[0].message);

      var err = new Error(msg);
      err.stack = args[0].stack.replace("Error: " + args[0].message, msg);
      return err;
    } else if (!args[0].includes("is using incorrect casing") && !args[0].includes("is unrecognized in this browser") && ![args[0].includes("React does not recognize the `testID` prop on a DOM element.")]) {
      var _err = new Error(explanation + _chalk.default.red(_util.format.apply(void 0, [args[0]].concat((0, _toConsumableArray2.default)(args.slice(1))))));

      Error.captureStackTrace(_err, constructorOpt);
      return _err;
    }

    return null;
  }

  beforeEach(function (done) {
    var types = ["error", "warn"];
    types.forEach(function (type) {
      if (console[type] === originalLoggers[type]) {
        var handler = function handler() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var error = logToError(type, args, handler);

          if (error) {
            done.fail(error);
          }
        };

        jest.spyOn(console, type).mockImplementation(handler);
      }
    });
    done();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNldHVwSmVzdC50cyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsIkVuenltZSIsImNvbmZpZ3VyZSIsImFkYXB0ZXIiLCJBZGFwdGVyIiwiZXhwZWN0IiwiZXh0ZW5kIiwidG9NYXRjaERpZmZTbmFwc2hvdCIsImRpZmYiLCJvcmlnaW5hbENvbnNvbGVFcnJvciIsImNvbnNvbGUiLCJlcnJvciIsIm1lc3NhZ2UiLCJpbmNsdWRlcyIsInRlc3QiLCJwcm9jZXNzIiwiZW52IiwiQUxMT1dfQ09OU09MRV9MT0dTIiwib3JpZ2luYWxMb2dnZXJzIiwid2FybiIsImxvZ1RvRXJyb3IiLCJ0eXBlIiwiYXJncyIsImNvbnN0cnVjdG9yT3B0IiwiZXhwbGFuYXRpb24iLCJjaGFsayIsIndoaXRlIiwiZ3JheSIsIkVycm9yIiwibXNnIiwicmVkIiwiZXJyIiwic3RhY2siLCJyZXBsYWNlIiwiZm9ybWF0Iiwic2xpY2UiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImJlZm9yZUVhY2giLCJkb25lIiwidHlwZXMiLCJmb3JFYWNoIiwiaGFuZGxlciIsImZhaWwiLCJzcHlPbiIsIm1vY2tJbXBsZW1lbnRhdGlvbiJdLCJtYXBwaW5ncyI6IkFBeUZBQSxJQUFJLENBQUNDLElBQUwsdUJBQWdDO0FBQUEsU0FBTSxJQUFOO0FBQUEsQ0FBaEM7Ozs7OztBQWhGQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFLQTs7QUFIQUMsZ0JBQU9DLFNBQVAsQ0FBaUI7QUFBRUMsRUFBQUEsT0FBTyxFQUFFLElBQUlDLDJCQUFKO0FBQVgsQ0FBakI7O0FBSUFDLGdCQUFPQyxNQUFQLENBQWM7QUFBRUMsRUFBQUEsbUJBQW1CLEVBQUdDLHFCQUFELENBQWNEO0FBQXJDLENBQWQ7O0FBRUEsSUFBTUUsb0JBQW9CLEdBQUdDLE9BQU8sQ0FBQ0MsS0FBckM7O0FBR0FELE9BQU8sQ0FBQ0MsS0FBUixHQUFnQixVQUFDQyxPQUFELEVBQW1CO0FBQ2pDLE1BQ0UsT0FBT0EsT0FBUCxLQUFtQixRQUFu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SSxDQUFDSSxJQUFMLENBQVUvQixLQUFWO0FBQ0Q7QUFDRixTQUxEOztBQU1BWixRQUFBQSxJQUFJLENBQUM0QyxLQUFMLENBQVdqQyxPQUFYLEVBQW9CVyxJQUFwQixFQUEwQnVCLGtCQUExQixDQUE2Q0gsT0FBN0M7QUFDRDtBQUNGLEtBWEQ7QUFZQUgsSUFBQUEsSUFBSTtBQUNMLEdBZlMsQ0FBVjtBQWdCRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL2lzc3Vlcy8xOTk1NVxuLy8gYW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9tZXRyby9wdWxsLzE5OFxuLy9cbi8vIGltcG9ydCBhcHBseURlY29yYXRlZERlc2NyaXB0b3IgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yXCJcbi8vIGltcG9ydCBpbml0aWFsaXplckRlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHlcIlxuLy8gZGVjbGFyZSB2YXIgYmFiZWxIZWxwZXJzOiBhbnlcbi8vIE9iamVjdC5hc3NpZ24oYmFiZWxIZWxwZXJzLCB7IGFwcGx5RGVjb3JhdGVkRGVzY3JpcHRvciwgaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSB9KVxuLy8gaW1wb3J0IFwiQGJhYmVsL3J1bnRpbWVcIlxuXG5pbXBvcnQgY2hhbGsgZnJvbSBcImNoYWxrXCJcbmltcG9ydCBFbnp5bWUgZnJvbSBcImVuenltZVwiXG5pbXBvcnQgQWRhcHRlciBmcm9tIFwiZW56eW1lLWFkYXB0ZXItcmVhY3QtMTYuM1wiXG5pbXBvcnQgZXhwZWN0IGZyb20gXCJleHBlY3RcIlxuaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSBcInV0aWxcIlxuXG5Fbnp5bWUuY29uZmlndXJlKHsgYWRhcHRlcjogbmV3IEFkYXB0ZXIoKSB9KVxuXG4vLyBXYWl0aW5nIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS90aHltaWtlZS9zbmFwc2hvdC1kaWZmL3B1bGwvMTdcbmltcG9ydCBkaWZmIGZyb20gXCJzbmFwc2hvdC1kaWZmXCJcbmV4cGVjdC5leHRlbmQoeyB0b01hdGNoRGlmZlNuYXBzaG90OiAoZGlmZiBhcyBhbnkpLnRvTWF0Y2hEaWZmU25hcHNob3QgfSlcblxuY29uc3Qgb3JpZ2luYWxDb25zb2xlRXJyb3IgPSBjb25zb2xlLmVycm9yXG5cbi8vIFRPRE86IFJlbW92ZSBvbmNlIHdlJ3JlIG5vIGxvbmdlciB1c2luZyBKU0RPTSBmb3IgZW56eW1lIHN0YXRpYyByZW5kZXJpbmcuXG5jb25zb2xlLmVycm9yID0gKG1lc3NhZ2U/OiBhbnkpID0+IHtcbiAgaWYgKFxuICAgIHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiICYmXG4gICAgKG1lc3NhZ2UuaW5jbHVkZXMoXCJpcyB1c2luZyB1cHBlcmNhc2UgSFRNTC4gQWx3YXlzIHVzZSBsb3dlcmNhc2UgSFRNTCB0YWdzIGluIFJlYWN0LlwiKSB8fFxuICAgICAgL1dhcm5pbmc6IFJlYWN0IGRvZXMgbm90IHJlY29nbml6ZSB0aGUgYFxcdytgIHByb3Agb24gYSBET00gZWxlbWVudFxcLi8udGVzdChtZXNzYWdlKSB8fFxuICAgICAgL1dhcm5pbmc6IFRoZSB0YWcgPFxcdys+IGlzIHVucmVjb2duaXplZCBpbiB0aGlzIGJyb3dzZXJcXC4vLnRlc3QobWVzc2FnZSkgfHxcbiAgICAgIC9XYXJuaW5nOiBVbmtub3duIGV2ZW50IGhhbmRsZXIgcHJvcGVydHkgYFxcdytgXFwuLy50ZXN0KG1lc3NhZ2UpIHx8XG4gICAgICAvV2FybmluZzogUmVjZWl2ZWQgYFxcdytgIGZvciBhIG5vbi1ib29sZWFuIGF0dHJpYnV0ZSBgXFx3K2BcXC4vLnRlc3QobWVzc2FnZSkgfHxcbiAgICAgIC9XYXJuaW5nOiBbXFx3XFxzXSsgaGFzIGJlZW4gZXh0cmFjdGVkIGZyb20gcmVhY3QtbmF0aXZlIGNvcmUvLnRlc3QobWVzc2FnZSkpXG4gICkge1xuICAgIC8vIE5PT1BcbiAgfSBlbHNlIHtcbiAgICBvcmlnaW5hbENvbnNvbGVFcnJvcihtZXNzYWdlKVxuICB9XG59XG5cbmRlY2xhcmUgY29uc3QgcHJvY2VzczogYW55XG5cbmlmIChwcm9jZXNzLmVudi5BTExPV19DT05TT0xFX0xPR1MgIT09IFwidHJ1ZVwiKSB7XG4gIGNvbnN0IG9yaWdpbmFsTG9nZ2VycyA9IHtcbiAgICBlcnJvcjogY29uc29sZS5lcnJvcixcbiAgICB3YXJuOiBjb25zb2xlLndhcm4sXG4gIH1cblxuICBmdW5jdGlvbiBsb2dUb0Vycm9yKHR5cGUsIGFyZ3MsIGNvbnN0cnVjdG9yT3B0OiAoKSA9PiB2b2lkKSB7XG4gICAgY29uc3QgZXhwbGFuYXRpb24gPVxuICAgICAgY2hhbGsud2hpdGUoYFRlc3QgZmFpbGVkIGR1ZSB0byBcXGBjb25zb2xlLiR7dHlwZX0o4oCmKVxcYCBjYWxsLlxcbmApICtcbiAgICAgIGNoYWxrLmdyYXkoXCIoRGlzYWJsZSB3aXRoIEFMTE9XX0NPTlNPTEVfTE9HUz10cnVlIGVudiB2YXJpYWJsZS4pXFxuXFxuXCIpXG4gICAgaWYgKGFyZ3NbMF0gaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgY29uc3QgbXNnID0gZXhwbGFuYXRpb24gKyBjaGFsay5yZWQoYXJnc1swXS5tZXNzYWdlKVxuICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKG1zZylcbiAgICAgIGVyci5zdGFjayA9IGFyZ3NbMF0uc3RhY2sucmVwbGFjZShgRXJyb3I6ICR7YXJnc1swXS5tZXNzYWdlfWAsIG1zZylcbiAgICAgIHJldHVybiBlcnJcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgLy8gQmVjYXVzZSB3ZSB1c2UgcmVhY3QtZG9tIGluIHRlc3RzIHRvIHJlbmRlciByZWFjdC1uYXRpdmUgY29tcG9uZW50cywgYSBmZXcgd2FybmluZ3MgYXJlIGJlaW5nIGxvZ2dlZCB0aGF0IHdlIGRvXG4gICAgICAvLyBub3QgY2FyZSBmb3IsIHNvIGlnbm9yZSB0aGVzZS5cbiAgICAgICFhcmdzWzBdLmluY2x1ZGVzKFwiaXMgdXNpbmcgaW5jb3JyZWN0IGNhc2luZ1wiKSAmJlxuICAgICAgIWFyZ3NbMF0uaW5jbHVkZXMoXCJpcyB1bnJlY29nbml6ZWQgaW4gdGhpcyBicm93c2VyXCIpICYmXG4gICAgICAhW2FyZ3NbMF0uaW5jbHVkZXMoXCJSZWFjdCBkb2VzIG5vdCByZWNvZ25pemUgdGhlIGB0ZXN0SURgIHByb3Agb24gYSBET00gZWxlbWVudC5cIildXG4gICAgKSB7XG4gICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoZXhwbGFuYXRpb24gKyBjaGFsay5yZWQoZm9ybWF0KGFyZ3NbMF0sIC4uLmFyZ3Muc2xpY2UoMSkpKSlcbiAgICAgIDsoRXJyb3IgYXMgYW55KS5jYXB0dXJlU3RhY2tUcmFjZShlcnIsIGNvbnN0cnVjdG9yT3B0KVxuICAgICAgcmV0dXJuIGVyclxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgYmVmb3JlRWFjaChkb25lID0+IHtcbiAgICBjb25zdCB0eXBlczogQXJyYXk8XCJlcnJvclwiIHwgXCJ3YXJuXCI+ID0gW1wiZXJyb3JcIiwgXCJ3YXJuXCJdXG4gICAgdHlwZXMuZm9yRWFjaCh0eXBlID0+IHtcbiAgICAgIC8vIERvbid0IHNweSBvbiBsb2dnZXJzIHRoYXQgaGF2ZSBiZWVuIG1vZGlmaWVkIGJ5IHRoZSBjdXJyZW50IHRlc3QuXG4gICAgICBpZiAoY29uc29sZVt0eXBlXSA9PT0gb3JpZ2luYWxMb2dnZXJzW3R5cGVdKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgIGNvbnN0IGVycm9yID0gbG9nVG9FcnJvcih0eXBlLCBhcmdzLCBoYW5kbGVyKVxuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgZG9uZS5mYWlsKGVycm9yKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBqZXN0LnNweU9uKGNvbnNvbGUsIHR5cGUpLm1vY2tJbXBsZW1lbnRhdGlvbihoYW5kbGVyKVxuICAgICAgfVxuICAgIH0pXG4gICAgZG9uZSgpIC8vIGl0IGlzIGltcG9ydGFudCB0byBjYWxsIHRoaXMgaGVyZSBvciBldmVyeSB0ZXN0IHdpbGwgdGltZW91dFxuICB9KVxufVxuXG5qZXN0Lm1vY2soXCIuL0NvbXBvbmVudHMvUmFkaW9cIiwgKCkgPT4gbnVsbClcblxuLy8gamVzdC5tb2NrKFwiQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvYXN5bmMtc3RvcmFnZVwiLCAoKSA9PiAoe1xuLy8gICBBc3luY1N0b3JhZ2U6IHtcbi8vICAgICBzZXRJdGVtOiBqZXN0LmZuKCgpID0+IHtcbi8vICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4vLyAgICAgICAgIHJlc29sdmUobnVsbClcbi8vICAgICAgIH0pXG4vLyAgICAgfSksXG4vLyAgICAgbXVsdGlTZXQ6IGplc3QuZm4oKCkgPT4ge1xuLy8gICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbi8vICAgICAgICAgcmVzb2x2ZShudWxsKVxuLy8gICAgICAgfSlcbi8vICAgICB9KSxcbi8vICAgICBnZXRJdGVtOiBqZXN0LmZuKCgpID0+IHtcbi8vICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4vLyAgICAgICAgIHJlc29sdmUoeyBiYWc6IHsgaXRlbXM6IFtdIH0gfSlcbi8vICAgICAgIH0pXG4vLyAgICAgfSksXG4vLyAgICAgbXVsdGlHZXQ6IGplc3QuZm4oKCkgPT4ge1xuLy8gICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbi8vICAgICAgICAgcmVzb2x2ZShudWxsKVxuLy8gICAgICAgfSlcbi8vICAgICB9KSxcbi8vICAgICByZW1vdmVJdGVtOiBqZXN0LmZuKCgpID0+IHtcbi8vICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4vLyAgICAgICAgIHJlc29sdmUobnVsbClcbi8vICAgICAgIH0pXG4vLyAgICAgfSksXG4vLyAgICAgZ2V0QWxsS2V5czogamVzdC5mbigoKSA9PiB7XG4vLyAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4vLyAgICAgICAgIHJlc29sdmUoW1wib25lXCIsIFwidHdvXCIsIFwidGhyZWVcIl0pXG4vLyAgICAgICB9KVxuLy8gICAgIH0pLFxuLy8gICB9LFxuLy8gfSkpXG4iXX0=