1aac607c4e47133c235d0022c7a57afc
jest.mock("./lib/NativeModules/NotificationsManager.tsx", function () {
  return {
    NotificationsManager: {
      addListener: jest.fn()
    }
  };
});
jest.mock("@mapbox/react-native-mapbox-gl", function () {
  return {
    MapView: function MapView() {
      return null;
    },
    StyleURL: {
      Light: null
    },
    setAccessToken: function setAccessToken() {
      return jest.fn();
    },
    StyleSheet: {
      create: function create() {
        return jest.fn();
      }
    },
    ShapeSource: function ShapeSource() {
      return null;
    },
    SymbolLayer: function SymbolLayer() {
      return null;
    }
  };
});
jest.mock("./lib/utils/useScreenDimensions", function () {
  var React = require("react");

  var screenDimensions = {
    width: 380,
    height: 550,
    orientation: "portrait",
    safeAreaInsets: {
      top: 20,
      left: 0,
      right: 0,
      bottom: 0
    }
  };
  return {
    getCurrentScreenDimensions: function getCurrentScreenDimensions() {
      return screenDimensions;
    },
    ProvideScreenDimensions: function ProvideScreenDimensions(_ref) {
      var children = _ref.children;
      return React.createElement(React.Fragment, null, children);
    },
    useScreenDimensions: function useScreenDimensions() {
      return screenDimensions;
    }
  };
});

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _chalk = _interopRequireDefault(require("chalk"));

var _enzyme = _interopRequireDefault(require("enzyme"));

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _expect = _interopRequireDefault(require("expect"));

var _util = require("util");

require("lib/tests/renderUntil");

var _snapshotDiff = _interopRequireDefault(require("snapshot-diff"));

var _reactNative = require("react-native");

_enzyme.default.configure({
  adapter: new _enzymeAdapterReact.default()
});

_expect.default.extend({
  toMatchDiffSnapshot: _snapshotDiff.default.toMatchDiffSnapshot
});

function mockedModule(path, mockModuleName) {
  jest.mock(path, function () {
    return mockModuleName;
  });
}

var originalConsoleError = console.error;

console.error = function (message) {
  if (typeof message === "string" && (message.includes("is using uppercase HTML. Always use lowercase HTML tags in React.") || /Warning: React does not recognize the `\w+` prop on a DOM element\./.test(message) || /Warning: The tag <\w+> is unrecognized in this browser\./.test(message) || /Warning: Unknown event handler property `\w+`\./.test(message) || /Warning: Received `\w+` for a non-boolean attribute `\w+`\./.test(message) || /Warning: [\w\s]+ has been extracted from react-native core/.test(message))) {} else {
    originalConsoleError(message);
  }
};

mockedModule("./lib/Components/SwitchView.tsx", "SwitchView");
mockedModule("./lib/Components/Spinner.tsx", "ARSpinner");
mockedModule("./lib/Components/OpaqueImageView/OpaqueImageView.tsx", "AROpaqueImageView");
mockedModule("./lib/Components/Artist/Shows/index.tsx", "PartnerShows");
mockedModule("./lib/Components/Artist/Artworks/index.tsx", "Artworks");
mockedModule("./lib/Components/Artist/Header.tsx", "Header");
mockedModule("./lib/Components/Artist/About.tsx", "About");
mockedModule("./lib/Components/Gene/Header.tsx", "Header");
_reactNative.NativeModules.ARTakeCameraPhotoModule = {
  errorCodes: {
    cameraNotAvailable: "cameraNotAvailable",
    imageMediaNotAvailable: "imageMediaNotAvailable",
    cameraAccessDenied: "cameraAccessDenied",
    saveFailed: "saveFailed"
  }
};
_reactNative.NativeModules.ARCocoaConstantsModule = {
  UIApplicationOpenSettingsURLString: "UIApplicationOpenSettingsURLString",
  AREnabled: true
};
_reactNative.NativeModules.Emission = {
  userAgent: "Jest Unit Tests"
};
_reactNative.NativeModules.ARSwitchBoardModule = {
  presentNavigationViewController: jest.fn(),
  presentModalViewController: jest.fn(),
  presentMediaPreviewController: jest.fn(),
  presentArtworksSet: jest.fn()
};

if (process.env.ALLOW_CONSOLE_LOGS !== "true") {
  var originalLoggers = {
    error: console.error,
    warn: console.warn
  };

  function logToError(type, args, constructorOpt) {
    var explanation = _chalk.default.white("Test failed due to `console." + type + "(\u2026)` call.\n") + _chalk.default.gray("(Disable with ALLOW_CONSOLE_LOGS=true env variable.)\n\n");

    if (args[0] instanceof Error) {
      var msg = explanation + _chalk.default.red(args[0].message);

      var err = new Error(msg);
      err.stack = args[0].stack.replace("Error: " + args[0].message, msg);
      return err;
    } else if (!args[0].includes("is using incorrect casing") && !args[0].includes("is unrecognized in this browser") && ![args[0].includes("React does not recognize the `testID` prop on a DOM element.")]) {
      var _err = new Error(explanation + _chalk.default.red(_util.format.apply(void 0, [args[0]].concat((0, _toConsumableArray2.default)(args.slice(1))))));

      Error.captureStackTrace(_err, constructorOpt);
      return _err;
    }

    return null;
  }

  beforeEach(function (done) {
    var types = ["error", "warn"];
    types.forEach(function (type) {
      if (console[type] === originalLoggers[type]) {
        var handler = function handler() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var error = logToError(type, args, handler);

          if (error) {
            done.fail(error);
          }
        };

        jest.spyOn(console, type).mockImplementation(handler);
      }
    });
    done();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNldHVwSmVzdC50cyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsIk5vdGlmaWNhdGlvbnNNYW5hZ2VyIiwiYWRkTGlzdGVuZXIiLCJmbiIsIk1hcFZpZXciLCJTdHlsZVVSTCIsIkxpZ2h0Iiwic2V0QWNjZXNzVG9rZW4iLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiU2hhcGVTb3VyY2UiLCJTeW1ib2xMYXllciIsIlJlYWN0IiwicmVxdWlyZSIsInNjcmVlbkRpbWVuc2lvbnMiLCJ3aWR0aCIsImhlaWdodCIsIm9yaWVudGF0aW9uIiwic2FmZUFyZWFJbnNldHMiLCJ0b3AiLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJnZXRDdXJyZW50U2NyZWVuRGltZW5zaW9ucyIsIlByb3ZpZGVTY3JlZW5EaW1lbnNpb25zIiwiY2hpbGRyZW4iLCJjcmVhdGVFbGVtZW50IiwiRnJhZ21lbnQiLCJ1c2VTY3JlZW5EaW1lbnNpb25zIiwiRW56eW1lIiwiY29uZmlndXJlIiwiYWRhcHRlciIsIkFkYXB0ZXIiLCJleHBlY3QiLCJleHRlbmQiLCJ0b01hdGNoRGlmZlNuYXBzaG90IiwiZGlmZiIsIm1vY2tlZE1vZHVsZSIsInBhdGgiLCJtb2NrTW9kdWxlTmFtZSIsIm9yaWdpbmFsQ29uc29sZUVycm9yIiwiY29uc29sZSIsImVycm9yIiwibWVzc2FnZSIsImluY2x1ZGVzIiwidGVzdCIsIk5hdGl2ZU1vZHVsZXMiLCJBUlRha2VDYW1lcmFQaG90b01vZHVsZSIsImVycm9yQ29kZXMiLCJjYW1lcmFOb3RBdmFpbGFibGUiLCJpbWFnZU1lZGlhTm90QXZhaWxhYmxlIiwiY2FtZXJhQWNjZXNzRGVuaWVkIiwic2F2ZUZhaWxlZCIsIkFSQ29jb2FDb25zdGFudHNNb2R1bGUiLCJVSUFwcGxpY2F0aW9uT3BlblNldHRpbmdzVVJMU3RyaW5nIiwiQVJFbmFibGVkIiwiRW1pc3Npb24iLCJ1c2VyQWdlbnQiLCJBUlN3aXRjaEJvYXJkTW9kdWxlIiwicHJlc2VudE5hdmlnYXRpb25WaWV3Q29udHJvbGxlciIsInByZXNlbnRNb2RhbFZpZXdDb250cm9sbGVyIiwicHJlc2VudE1lZGlhUHJldmlld0NvbnRyb2xsZXIiLCJwcmVzZW50QXJ0d29ya3NTZXQiLCJwcm9jZXNzIiwiZW52IiwiQUxMT1dfQ09OU09MRV9MT0dTIiwib3JpZ2luYWxMb2dnZXJzIiwid2FybiIsImxvZ1RvRXJyb3IiLCJ0eXBlIiwiYXJncyIsImNvbnN0cnVjdG9yT3B0IiwiZXhwbGFuYXRpb24iLCJjaGFsayIsIndoaXRlIiwiZ3JheSIsIkVycm9yIiwibXNnIiwicmVkIiwiZXJyIiwic3RhY2siLCJyZXBsYWNlIiwiZm9ybWF0Iiwic2xpY2UiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImJlZm9yZUVhY2giLCJkb25lIiwidHlwZXMiLCJmb3JFYWNoIiwiaGFuZGxlciIsImZhaWwiLCJzcHlPbiIsIm1vY2tJbXBsZW1lbnRhdGlvbiJdLCJtYXBwaW5ncyI6IkFBc0JBQSxJQUFJLENBQUNDLElBQUwsaURBQTBEO0FBQUEsU0FBTztBQUMvREMsSUFBQUEsb0JBQW9CLEVBQUU7QUFDcEJDLE1BQUFBLFdBQVcsRUFBRUgsSUFBSSxDQUFDSSxFQUFMO0FBRE87QUFEeUMsR0FBUDtBQUFBLENBQTFEO0FBTUFKLElBQUksQ0FBQ0MsSUFBTCxDQUFVLGdDQUFWLEVBQTRDO0FBQUEsU0FBTztBQUNqREksSUFBQUEsT0FBTyxFQUFFO0FBQUEsYUFBTSxJQUFOO0FBQUEsS0FEd0M7QUFFakRDLElBQUFBLFFBQVEsRUFBRTtBQUNSQyxNQUFBQSxLQUFLLEVBQUU7QUFEQyxLQUZ1QztBQUtqREMsSUFBQUEsY0FBYyxFQUFFO0FBQUEsYUFBTVIsSUFBSSxDQUFDSSxFQUFMLEVBQU47QUFBQSxLQUxpQztBQU1qREssSUFBQUEsVUFBVSxFQUFFO0FBQ1ZDLE1BQUFBLE1BQU0sRUFBRTtBQUFBLGVBQU1WLElBQUksQ0FBQ0ksRUFBTCxFQUFOO0FBQUE7QUFERSxLQU5xQztBQVNqRE8sSUFBQUEsV0FBVyxFQUFFO0FBQUEsYUFBTSxJQUFO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SCxlQUFlLENBQUNHLElBQUQsQ0FBckMsRUFBNkM7QUFDM0MsWUFBTW9CLE9BQU8sR0FBRyxTQUFWQSxPQUFVLEdBQWE7QUFBQSw0Q0FBVG5CLElBQVM7QUFBVEEsWUFBQUEsSUFBUztBQUFBOztBQUMzQixjQUFNNUIsS0FBSyxHQUFHMEIsVUFBVSxDQUFDQyxJQUFELEVBQU9DLElBQVAsRUFBYW1CLE9BQWIsQ0FBeEI7O0FBQ0EsY0FBSS9DLEtBQUosRUFBVztBQUNUNEMsWUFBQUEsSUFBSSxDQUFDSSxJQUFMLENBQVVoRCxLQUFWO0FBQ0Q7QUFDRixTQUxEOztBQU1BM0MsUUFBQUEsSUFBSSxDQUFDNEYsS0FBTCxDQUFXbEQsT0FBWCxFQUFvQjRCLElBQXBCLEVBQTBCdUIsa0JBQTFCLENBQTZDSCxPQUE3QztBQUNEO0FBQ0YsS0FYRDtBQVlBSCxJQUFBQSxJQUFJO0FBQ0wsR0FmUyxDQUFWO0FBZ0JEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvaXNzdWVzLzE5OTU1XG4vLyBhbmQgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL21ldHJvL3B1bGwvMTk4XG4vL1xuLy8gaW1wb3J0IGFwcGx5RGVjb3JhdGVkRGVzY3JpcHRvciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcHBseURlY29yYXRlZERlc2NyaXB0b3JcIlxuLy8gaW1wb3J0IGluaXRpYWxpemVyRGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eVwiXG4vLyBkZWNsYXJlIHZhciBiYWJlbEhlbHBlcnM6IGFueVxuLy8gT2JqZWN0LmFzc2lnbihiYWJlbEhlbHBlcnMsIHsgYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yLCBpbml0aWFsaXplckRlZmluZVByb3BlcnR5IH0pXG4vLyBpbXBvcnQgXCJAYmFiZWwvcnVudGltZVwiXG5cbmltcG9ydCBjaGFsayBmcm9tIFwiY2hhbGtcIlxuaW1wb3J0IEVuenltZSBmcm9tIFwiZW56eW1lXCJcbmltcG9ydCBBZGFwdGVyIGZyb20gXCJlbnp5bWUtYWRhcHRlci1yZWFjdC0xNlwiXG5pbXBvcnQgZXhwZWN0IGZyb20gXCJleHBlY3RcIlxuaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSBcInV0aWxcIlxuXG5pbXBvcnQgXCJsaWIvdGVzdHMvcmVuZGVyVW50aWxcIlxuRW56eW1lLmNvbmZpZ3VyZSh7IGFkYXB0ZXI6IG5ldyBBZGFwdGVyKCkgfSlcblxuLy8gV2FpdGluZyBvbiBodHRwczovL2dpdGh1Yi5jb20vdGh5bWlrZWUvc25hcHNob3QtZGlmZi9wdWxsLzE3XG5pbXBvcnQgZGlmZiBmcm9tIFwic25hcHNob3QtZGlmZlwiXG5leHBlY3QuZXh0ZW5kKHsgdG9NYXRjaERpZmZTbmFwc2hvdDogKGRpZmYgYXMgYW55KS50b01hdGNoRGlmZlNuYXBzaG90IH0pXG5cbmplc3QubW9jayhcIi4vbGliL05hdGl2ZU1vZHVsZXMvTm90aWZpY2F0aW9uc01hbmFnZXIudHN4XCIsICgpID0+ICh7XG4gIE5vdGlmaWNhdGlvbnNNYW5hZ2VyOiB7XG4gICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgfSxcbn0pKVxuXG5qZXN0Lm1vY2soXCJAbWFwYm94L3JlYWN0LW5hdGl2ZS1tYXBib3gtZ2xcIiwgKCkgPT4gKHtcbiAgTWFwVmlldzogKCkgPT4gbnVsbCxcbiAgU3R5bGVVUkw6IHtcbiAgICBMaWdodDogbnVsbCxcbiAgfSxcbiAgc2V0QWNjZXNzVG9rZW46ICgpID0+IGplc3QuZm4oKSxcbiAgU3R5bGVTaGVldDoge1xuICAgIGNyZWF0ZTogKCkgPT4gamVzdC5mbigpLFxuICB9LFxuICBTaGFwZVNvdXJjZTogKCkgPT4gbnVsbCxcbiAgU3ltYm9sTGF5ZXI6ICgpID0+IG51bGwsXG59KSlcblxuZnVuY3Rpb24gbW9ja2VkTW9kdWxlKHBhdGg6IHN0cmluZywgbW9ja01vZHVsZU5hbWU6IHN0cmluZykge1xuICBqZXN0Lm1vY2socGF0aCwgKCkgPT4gbW9ja01vZHVsZU5hbWUpXG59XG5cbmNvbnN0IG9yaWdpbmFsQ29uc29sZUVycm9yID0gY29uc29sZS5lcnJvclxuXG4vLyBUT0RPOiBSZW1vdmUgb25jZSB3ZSdyZSBubyBsb25nZXIgdXNpbmcgSlNET00gZm9yIGVuenltZSBzdGF0aWMgcmVuZGVyaW5nLlxuY29uc29sZS5lcnJvciA9IChtZXNzYWdlPzogYW55KSA9PiB7XG4gIGlmIChcbiAgICB0eXBlb2YgbWVzc2FnZSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgIChtZXNzYWdlLmluY2x1ZGVzKFwiaXMgdXNpbmcgdXBwZXJjYXNlIEhUTUwuIEFsd2F5cyB1c2UgbG93ZXJjYXNlIEhUTUwgdGFncyBpbiBSZWFjdC5cIikgfHxcbiAgICAgIC9XYXJuaW5nOiBSZWFjdCBkb2VzIG5vdCByZWNvZ25pemUgdGhlIGBcXHcrYCBwcm9wIG9uIGEgRE9NIGVsZW1lbnRcXC4vLnRlc3QobWVzc2FnZSkgfHxcbiAgICAgIC9XYXJuaW5nOiBUaGUgdGFnIDxcXHcrPiBpcyB1bnJlY29nbml6ZWQgaW4gdGhpcyBicm93c2VyXFwuLy50ZXN0KG1lc3NhZ2UpIHx8XG4gICAgICAvV2FybmluZzogVW5rbm93biBldmVudCBoYW5kbGVyIHByb3BlcnR5IGBcXHcrYFxcLi8udGVzdChtZXNzYWdlKSB8fFxuICAgICAgL1dhcm5pbmc6IFJlY2VpdmVkIGBcXHcrYCBmb3IgYSBub24tYm9vbGVhbiBhdHRyaWJ1dGUgYFxcdytgXFwuLy50ZXN0KG1lc3NhZ2UpIHx8XG4gICAgICAvV2FybmluZzogW1xcd1xcc10rIGhhcyBiZWVuIGV4dHJhY3RlZCBmcm9tIHJlYWN0LW5hdGl2ZSBjb3JlLy50ZXN0KG1lc3NhZ2UpKVxuICApIHtcbiAgICAvLyBOT09QXG4gIH0gZWxzZSB7XG4gICAgb3JpZ2luYWxDb25zb2xlRXJyb3IobWVzc2FnZSlcbiAgfVxufVxuXG5tb2NrZWRNb2R1bGUoXCIuL2xpYi9Db21wb25lbnRzL1N3aXRjaFZpZXcudHN4XCIsIFwiU3dpdGNoVmlld1wiKVxubW9ja2VkTW9kdWxlKFwiLi9saWIvQ29tcG9uZW50cy9TcGlubmVyLnRzeFwiLCBcIkFSU3Bpbm5lclwiKVxubW9ja2VkTW9kdWxlKFwiLi9saWIvQ29tcG9uZW50cy9PcGFxdWVJbWFnZVZpZXcvT3BhcXVlSW1hZ2VWaWV3LnRzeFwiLCBcIkFST3BhcXVlSW1hZ2VWaWV3XCIpXG4vLyBtb2NrZWRNb2R1bGUoXCIuL2xpYi9Db21wb25lbnRzL0FydHdvcmtHcmlkcy9JbmZpbml0ZVNjcm9sbEdyaWQudHN4XCIsIFwiQXJ0d29ya3NHcmlkXCIpXG5cbi8vIEFydGlzdCB0ZXN0c1xubW9ja2VkTW9kdWxlKFwiLi9saWIvQ29tcG9uZW50cy9BcnRpc3QvU2hvd3MvaW5kZXgudHN4XCIsIFwiUGFydG5lclNob3dzXCIpXG5tb2NrZWRNb2R1bGUoXCIuL2xpYi9Db21wb25lbnRzL0FydGlzdC9BcnR3b3Jrcy9pbmRleC50c3hcIiwgXCJBcnR3b3Jrc1wiKVxubW9ja2VkTW9kdWxlKFwiLi9saWIvQ29tcG9uZW50cy9BcnRpc3QvSGVhZGVyLnRzeFwiLCBcIkhlYWRlclwiKVxubW9ja2VkTW9kdWxlKFwiLi9saWIvQ29tcG9uZW50cy9BcnRpc3QvQWJvdXQudHN4XCIsIFwiQWJvdXRcIilcblxuLy8gR2VuZSB0ZXN0c1xubW9ja2VkTW9kdWxlKFwiLi9saWIvQ29tcG9uZW50cy9HZW5lL0hlYWRlci50c3hcIiwgXCJIZWFkZXJcIilcblxuLy8gTmF0aXZlIG1vZHVsZXNcbmltcG9ydCB7IFNjcmVlbkRpbWVuc2lvbnMgfSBmcm9tIFwibGliL3V0aWxzL3VzZVNjcmVlbkRpbWVuc2lvbnNcIlxuaW1wb3J0IHsgTmF0aXZlTW9kdWxlcyB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIlxuTmF0aXZlTW9kdWxlcy5BUlRha2VDYW1lcmFQaG90b01vZHVsZSA9IHtcbiAgZXJyb3JDb2Rlczoge1xuICAgIGNhbWVyYU5vdEF2YWlsYWJsZTogXCJjYW1lcmFOb3RBdmFpbGFibGVcIixcbiAgICBpbWFnZU1lZGlhTm90QXZhaWxhYmxlOiBcImltYWdlTWVkaWFOb3RBdmFpbGFibGVcIixcbiAgICBjYW1lcmFBY2Nlc3NEZW5pZWQ6IFwiY2FtZXJhQWNjZXNzRGVuaWVkXCIsXG4gICAgc2F2ZUZhaWxlZDogXCJzYXZlRmFpbGVkXCIsXG4gIH0sXG59XG5OYXRpdmVNb2R1bGVzLkFSQ29jb2FDb25zdGFudHNNb2R1bGUgPSB7XG4gIFVJQXBwbGljYXRpb25PcGVuU2V0dGluZ3NVUkxTdHJpbmc6IFwiVUlBcHBsaWNhdGlvbk9wZW5TZXR0aW5nc1VSTFN0cmluZ1wiLFxuICBBUkVuYWJsZWQ6IHRydWUsXG59XG5OYXRpdmVNb2R1bGVzLkVtaXNzaW9uID0ge1xuICB1c2VyQWdlbnQ6IFwiSmVzdCBVbml0IFRlc3RzXCIsXG59XG5OYXRpdmVNb2R1bGVzLkFSU3dpdGNoQm9hcmRNb2R1bGUgPSB7XG4gIHByZXNlbnROYXZpZ2F0aW9uVmlld0NvbnRyb2xsZXI6IGplc3QuZm4oKSxcbiAgcHJlc2VudE1vZGFsVmlld0NvbnRyb2xsZXI6IGplc3QuZm4oKSxcbiAgcHJlc2VudE1lZGlhUHJldmlld0NvbnRyb2xsZXI6IGplc3QuZm4oKSxcbiAgcHJlc2VudEFydHdvcmtzU2V0OiBqZXN0LmZuKCksXG59XG5cbmRlY2xhcmUgY29uc3QgcHJvY2VzczogYW55XG5cbmlmIChwcm9jZXNzLmVudi5BTExPV19DT05TT0xFX0xPR1MgIT09IFwidHJ1ZVwiKSB7XG4gIGNvbnN0IG9yaWdpbmFsTG9nZ2VycyA9IHtcbiAgICBlcnJvcjogY29uc29sZS5lcnJvcixcbiAgICB3YXJuOiBjb25zb2xlLndhcm4sXG4gIH1cblxuICBmdW5jdGlvbiBsb2dUb0Vycm9yKHR5cGUsIGFyZ3MsIGNvbnN0cnVjdG9yT3B0OiAoKSA9PiB2b2lkKSB7XG4gICAgY29uc3QgZXhwbGFuYXRpb24gPVxuICAgICAgY2hhbGsud2hpdGUoYFRlc3QgZmFpbGVkIGR1ZSB0byBcXGBjb25zb2xlLiR7dHlwZX0o4oCmKVxcYCBjYWxsLlxcbmApICtcbiAgICAgIGNoYWxrLmdyYXkoXCIoRGlzYWJsZSB3aXRoIEFMTE9XX0NPTlNPTEVfTE9HUz10cnVlIGVudiB2YXJpYWJsZS4pXFxuXFxuXCIpXG4gICAgaWYgKGFyZ3NbMF0gaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgY29uc3QgbXNnID0gZXhwbGFuYXRpb24gKyBjaGFsay5yZWQoYXJnc1swXS5tZXNzYWdlKVxuICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKG1zZylcbiAgICAgIGVyci5zdGFjayA9IGFyZ3NbMF0uc3RhY2sucmVwbGFjZShgRXJyb3I6ICR7YXJnc1swXS5tZXNzYWdlfWAsIG1zZylcbiAgICAgIHJldHVybiBlcnJcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgLy8gQmVjYXVzZSB3ZSB1c2UgcmVhY3QtZG9tIGluIHRlc3RzIHRvIHJlbmRlciByZWFjdC1uYXRpdmUgY29tcG9uZW50cywgYSBmZXcgd2FybmluZ3MgYXJlIGJlaW5nIGxvZ2dlZCB0aGF0IHdlIGRvXG4gICAgICAvLyBub3QgY2FyZSBmb3IsIHNvIGlnbm9yZSB0aGVzZS5cbiAgICAgICFhcmdzWzBdLmluY2x1ZGVzKFwiaXMgdXNpbmcgaW5jb3JyZWN0IGNhc2luZ1wiKSAmJlxuICAgICAgIWFyZ3NbMF0uaW5jbHVkZXMoXCJpcyB1bnJlY29nbml6ZWQgaW4gdGhpcyBicm93c2VyXCIpICYmXG4gICAgICAhW2FyZ3NbMF0uaW5jbHVkZXMoXCJSZWFjdCBkb2VzIG5vdCByZWNvZ25pemUgdGhlIGB0ZXN0SURgIHByb3Agb24gYSBET00gZWxlbWVudC5cIildXG4gICAgKSB7XG4gICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoZXhwbGFuYXRpb24gKyBjaGFsay5yZWQoZm9ybWF0KGFyZ3NbMF0sIC4uLmFyZ3Muc2xpY2UoMSkpKSlcbiAgICAgIDsoRXJyb3IgYXMgYW55KS5jYXB0dXJlU3RhY2tUcmFjZShlcnIsIGNvbnN0cnVjdG9yT3B0KVxuICAgICAgcmV0dXJuIGVyclxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgYmVmb3JlRWFjaChkb25lID0+IHtcbiAgICBjb25zdCB0eXBlczogQXJyYXk8XCJlcnJvclwiIHwgXCJ3YXJuXCI+ID0gW1wiZXJyb3JcIiwgXCJ3YXJuXCJdXG4gICAgdHlwZXMuZm9yRWFjaCh0eXBlID0+IHtcbiAgICAgIC8vIERvbid0IHNweSBvbiBsb2dnZXJzIHRoYXQgaGF2ZSBiZWVuIG1vZGlmaWVkIGJ5IHRoZSBjdXJyZW50IHRlc3QuXG4gICAgICBpZiAoY29uc29sZVt0eXBlXSA9PT0gb3JpZ2luYWxMb2dnZXJzW3R5cGVdKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgIGNvbnN0IGVycm9yID0gbG9nVG9FcnJvcih0eXBlLCBhcmdzLCBoYW5kbGVyKVxuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgZG9uZS5mYWlsKGVycm9yKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBqZXN0LnNweU9uKGNvbnNvbGUsIHR5cGUpLm1vY2tJbXBsZW1lbnRhdGlvbihoYW5kbGVyKVxuICAgICAgfVxuICAgIH0pXG4gICAgZG9uZSgpIC8vIGl0IGlzIGltcG9ydGFudCB0byBjYWxsIHRoaXMgaGVyZSBvciBldmVyeSB0ZXN0IHdpbGwgdGltZW91dFxuICB9KVxufVxuXG5qZXN0Lm1vY2soXCIuL2xpYi91dGlscy91c2VTY3JlZW5EaW1lbnNpb25zXCIsICgpID0+IHtcbiAgY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIilcbiAgY29uc3Qgc2NyZWVuRGltZW5zaW9uczogU2NyZWVuRGltZW5zaW9ucyA9IHtcbiAgICB3aWR0aDogMzgwLFxuICAgIGhlaWdodDogNTUwLFxuICAgIG9yaWVudGF0aW9uOiBcInBvcnRyYWl0XCIsXG4gICAgc2FmZUFyZWFJbnNldHM6IHtcbiAgICAgIHRvcDogMjAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgfSxcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0Q3VycmVudFNjcmVlbkRpbWVuc2lvbnM6ICgpID0+IHNjcmVlbkRpbWVuc2lvbnMsXG4gICAgUHJvdmlkZVNjcmVlbkRpbWVuc2lvbnM6ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbilcbiAgICB9LFxuICAgIHVzZVNjcmVlbkRpbWVuc2lvbnM6ICgpID0+IHNjcmVlbkRpbWVuc2lvbnMsXG4gIH1cbn0pXG4iXX0=