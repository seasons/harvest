{"version":3,"sources":["Button.tsx"],"names":["DisplayState","defaultSize","defaultVariant","getColorsForVariant","variant","themeProps","colors","black","white","gray","darkGray","lightGray","default","backgroundColor","borderColor","color","pressed","disabled","Button","state","previous","Default","current","onPress","args","props","setState","Pressed","setTimeout","size","height","px","children","rest","getSize","variantColors","from","Disabled","to","Component","defaultProps","theme","Container","Box","p","AnimatedContainer"],"mappings":"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","sourcesContent":["import React, { Component, ReactNode } from \"react\"\nimport { TouchableWithoutFeedback } from \"react-native\"\nimport styled from \"styled-components/native\"\nimport { themeProps } from \"./Theme\"\nimport { Box, BoxProps } from \"./Box\"\nimport { Flex } from \"./Flex\"\nimport { Sans } from \"./Typography\"\nimport { animated, Spring } from \"react-spring/renderprops-native.cjs\"\n\nenum DisplayState {\n  Default = \"default\",\n  Pressed = \"pressed\",\n  Disabled = \"disabled\",\n}\n\ninterface ButtonState {\n  previous: DisplayState\n  current: DisplayState\n}\n\nexport interface ButtonProps extends BoxProps {\n  children: ReactNode\n  /** The size of the button */\n  size?: ButtonSize\n  /** The theme of the button */\n  variant?: ButtonVariant\n  /** React Native only, Callback on press, use instead of onClick */\n  onPress?: (e) => void\n  disabled?: boolean\n}\n\nexport type ButtonVariant = \"primaryLight\" | \"secondaryLight\" | \"primaryDark\" | \"secondaryOutline\" | \"secondaryDark\"\nexport type ButtonSize = \"small\" | \"medium\" | \"large\"\n\n/** Default button size */\nexport const defaultSize: ButtonSize = \"large\"\nexport const defaultVariant: ButtonVariant = \"primaryDark\"\n\n/**\n * Returns various colors for each state given a button variant\n * @param variant\n */\nexport function getColorsForVariant(variant: ButtonVariant) {\n  const {\n    colors: { black, white, gray, darkGray, lightGray },\n  } = themeProps\n\n  switch (variant) {\n    case \"primaryLight\":\n      return {\n        default: {\n          backgroundColor: white,\n          borderColor: white,\n          color: black,\n        },\n        pressed: {\n          backgroundColor: white,\n          borderColor: white,\n          color: black,\n        },\n        disabled: {\n          backgroundColor: darkGray,\n          borderColor: darkGray,\n          color: gray,\n        },\n      }\n    case \"secondaryLight\":\n      return {\n        default: {\n          backgroundColor: black,\n          borderColor: gray,\n          color: white,\n        },\n        pressed: {\n          backgroundColor: black,\n          borderColor: gray,\n          color: white,\n        },\n        disabled: {\n          backgroundColor: black,\n          borderColor: gray,\n          color: white,\n        },\n      }\n    case \"primaryDark\":\n      return {\n        default: {\n          backgroundColor: black,\n          borderColor: black,\n          color: white,\n        },\n        pressed: {\n          backgroundColor: black,\n          borderColor: black,\n          color: white,\n        },\n        disabled: {\n          backgroundColor: lightGray,\n          borderColor: lightGray,\n          color: darkGray,\n        },\n      }\n    case \"secondaryDark\":\n      return {\n        default: {\n          backgroundColor: white,\n          borderColor: black,\n          color: black,\n        },\n        pressed: {\n          backgroundColor: white,\n          borderColor: black,\n          color: black,\n        },\n        disabled: {\n          backgroundColor: white,\n          borderColor: black,\n          color: black,\n        },\n      }\n    default:\n  }\n}\n\n/** A button with various size and color settings */\nexport class Button extends Component<ButtonProps, ButtonState> {\n  static defaultProps = {\n    size: defaultSize,\n    variant: defaultVariant,\n    theme: themeProps,\n  }\n\n  state = {\n    previous: DisplayState.Default,\n    current: DisplayState.Default,\n  }\n\n  getSize(): { height: number | string; size: \"0\" | \"1\" | \"2\"; px: number } {\n    switch (this.props.size) {\n      case \"small\":\n        return { height: 40, size: \"0\", px: 2 }\n      case \"medium\":\n        return { height: 55, size: \"2\", px: 30 }\n      case \"large\":\n        return { height: 55, size: \"1\", px: 5 }\n    }\n  }\n\n  onPress = args => {\n    if (this.props.onPress) {\n      // Did someone tap really fast? Flick the highlighted state\n      const { current } = this.state\n\n      if (this.state.current === DisplayState.Default) {\n        this.setState({\n          previous: current,\n          current: DisplayState.Pressed,\n        })\n        setTimeout(\n          () =>\n            this.setState({\n              previous: current,\n              current: DisplayState.Default,\n            }),\n          0.3\n        )\n      } else {\n        // Was already selected\n        this.setState({ current: DisplayState.Default })\n      }\n\n      this.props.onPress(args)\n    }\n  }\n\n  render() {\n    const { children, disabled, ...rest } = this.props\n    const { px, size, height } = this.getSize()\n    const variantColors = getColorsForVariant(this.props.variant)\n    const { current, previous } = this.state\n    const from = disabled ? variantColors[DisplayState.Disabled] : variantColors[previous]\n    const to = disabled ? variantColors[DisplayState.Disabled] : variantColors[current]\n\n    return (\n      <Spring native from={from} to={to}>\n        {props => (\n          <TouchableWithoutFeedback\n            onPress={this.onPress}\n            onPressIn={() => {\n              this.setState({\n                previous: DisplayState.Default,\n                current: DisplayState.Pressed,\n              })\n            }}\n            onPressOut={() => {\n              this.setState({\n                previous: DisplayState.Pressed,\n                current: DisplayState.Default,\n              })\n            }}\n            disabled={disabled}\n          >\n            <Flex flexDirection=\"row\">\n              <AnimatedContainer disabled={disabled} {...rest} style={{ ...props, height }} px={px}>\n                <Sans color={to.color} size={size}>\n                  {children}\n                </Sans>\n              </AnimatedContainer>\n            </Flex>\n          </TouchableWithoutFeedback>\n        )}\n      </Spring>\n    )\n  }\n}\n\nconst Container = styled(Box)<ButtonProps>`\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  border-width: 1;\n  border-radius: 28;\n  width: ${p => (p.size === \"large\" ? \"100%\" : \"auto\")};\n`\n\nconst AnimatedContainer = animated(Container)\n"]}