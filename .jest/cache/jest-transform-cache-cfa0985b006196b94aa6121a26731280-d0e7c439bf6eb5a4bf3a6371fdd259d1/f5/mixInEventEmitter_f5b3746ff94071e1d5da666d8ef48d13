8579457fe11f7e43bb8af69e429383c0










'use strict';













var TYPES_KEY = require('fbjs/lib/keyOf')({ __types: true });






















function mixInEventEmitter(cls, types) {
  require('invariant')(types, 'Must supply set of valid event types');



  var target = cls.prototype || cls;

  require('invariant')(!target.__eventEmitter, 'An active emitter is already mixed in');

  var ctor = cls.constructor;
  if (ctor) {
    require('invariant')(
    ctor === Object || ctor === Function,
    'Mix EventEmitter into a class, not an instance');

  }



  if (target.hasOwnProperty(TYPES_KEY)) {
    require("@babel/runtime/helpers/extends")(target.__types, types);
  } else if (target.__types) {
    target.__types = require("@babel/runtime/helpers/extends")({}, target.__types, types);
  } else {
    target.__types = types;
  }
  require("@babel/runtime/helpers/extends")(target, EventEmitterMixin);
}

var EventEmitterMixin = {
  emit: function emit(eventType, a, b, c, d, e, _) {
    return this.__getEventEmitter().emit(eventType, a, b, c, d, e, _);
  },

  emitAndHold: function emitAndHold(eventType, a, b, c, d, e, _) {
    return this.__getEventEmitter().emitAndHold(eventType, a, b, c, d, e, _);
  },

  addListener: function addListener(eventType, listener, context) {
    return this.__getEventEmitter().addListener(eventType, listener, context);
  },

  once: function once(eventType, listener, context) {
    return this.__getEventEmitter().once(eventType, listener, context);
  },

  addRetroactiveListener: function addRetroactiveListener(eventType, listener, context) {
    return this.__getEventEmitter().addRetroactiveListener(
    eventType,
    listener,
    context);

  },

  addListenerMap: function addListenerMap(listenerMap, context) {
    return this.__getEventEmitter().addListenerMap(listenerMap, context);
  },

  addRetroactiveListenerMap: function addRetroactiveListenerMap(listenerMap, context) {
    return this.__getEventEmitter().addListenerMap(listenerMap, context);
  },

  removeAllListeners: function removeAllListeners() {
    this.__getEventEmitter().removeAllListeners();
  },

  removeCurrentListener: function removeCurrentListener() {
    this.__getEventEmitter().removeCurrentListener();
  },

  releaseHeldEventType: function releaseHeldEventType(eventType) {
    this.__getEventEmitter().releaseHeldEventType(eventType);
  },

  __getEventEmitter: function __getEventEmitter() {
    if (!this.__eventEmitter) {
      var emitter = new (require('EventEmitter'))();
      if (__DEV__) {
        var EventValidator = require('EventValidator');
        emitter = EventValidator.addValidation(emitter, this.__types);
      }

      var holder = new (require('EventHolder'))();
      this.__eventEmitter = new (require('EventEmitterWithHolding'))(emitter, holder);
    }
    return this.__eventEmitter;
  } };


module.exports = mixInEventEmitter;