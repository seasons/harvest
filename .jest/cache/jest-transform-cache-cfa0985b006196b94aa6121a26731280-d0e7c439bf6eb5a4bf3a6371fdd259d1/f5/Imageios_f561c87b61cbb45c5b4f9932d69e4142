17d6d9aada61ef8f3b745fc9d1db53be









'use strict';var _jsxFileName = "/Users/kierangillen/code/personal/harvest/node_modules/react-native/Libraries/Image/Image.ios.js";













var RCTImageView = require('requireNativeComponent')('RCTImageView');





function getSize(
uri,
success,
failure)
{
  require('NativeModules').ImageViewManager.getSize(
  uri,
  success,
  failure ||
  function () {
    console.warn('Failed to get size for image: ' + uri);
  });

}

function prefetch(url) {
  return require('NativeModules').ImageViewManager.prefetchImage(url);
}

function queryCache(
urls) {return require("@babel/runtime/regenerator").async(function queryCache$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return require("@babel/runtime/regenerator").awrap(

          require('NativeModules').ImageViewManager.queryCache(urls));case 2:return _context.abrupt("return", _context.sent);case 3:case "end":return _context.stop();}}});}



















var Image = function Image(
props,
forwardedRef)
{
  var source = require('resolveAssetSource')(props.source) || {
    uri: undefined,
    width: undefined,
    height: undefined };


  var sources;
  var style;
  if (Array.isArray(source)) {

    style = require('flattenStyle')([styles.base, props.style]) || {};
    sources = source;
  } else {var
    _width = source.width,_height = source.height,uri = source.uri;

    style = require('flattenStyle')([{ width: _width, height: _height }, styles.base, props.style]) || {};
    sources = [source];

    if (uri === '') {
      console.warn('source.uri should not be an empty string');
    }
  }

  var resizeMode = props.resizeMode || style.resizeMode || 'cover';
  var tintColor = style.tintColor;

  if (props.src != null) {
    console.warn(
    'The <Image> component requires a `source` property rather than `src`.');

  }

  if (props.children != null) {
    throw new Error(
    'The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');

  }

  return (
    require('React').createElement(RCTImageView, require("@babel/runtime/helpers/extends")({},
    props, {
      ref: forwardedRef,
      style: style,
      resizeMode: resizeMode,
      tintColor: tintColor,
      source: sources, __source: { fileName: _jsxFileName, lineNumber: 115 } })));


};

Image = require('React').forwardRef(Image);
Image.displayName = 'Image';









Image.getSize = getSize;










Image.prefetch = prefetch;









Image.queryCache = queryCache;









Image.resolveAssetSource = require('resolveAssetSource');




Image.propTypes = require('DeprecatedImagePropType');

var styles = require('StyleSheet').create({
  base: {
    overflow: 'hidden' } });






module.exports = Image;