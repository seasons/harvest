{"version":3,"sources":["Toggle.tsx"],"names":["Toggle","props","children","disabled","_onSelect","onSelect","selected","others","value","setValue","toggleSwitch","newValue"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AAeO,IAAMA,MAA8B,GAAG,SAAjCA,MAAiC,CAAAC,KAAK,EAAI;AAAA,MAC7CC,QAD6C,GACoBD,KADpB,CAC7CC,QAD6C;AAAA,MACnCC,QADmC,GACoBF,KADpB,CACnCE,QADmC;AAAA,MACfC,SADe,GACoBH,KADpB,CACzBI,QADyB;AAAA,MACJC,QADI,GACoBL,KADpB,CACJK,QADI;AAAA,MACSC,MADT,0CACoBN,KADpB;;AAAA,kBAE3B,qBAAS,KAAT,CAF2B;AAAA;AAAA,MAE9CO,KAF8C;AAAA,MAEvCC,QAFuC;;AAGrD,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,QAAQ,EAAI;AAC/BF,IAAAA,QAAQ,CAACE,QAAD,CAAR;AACD,GAFD;;AAMA,MAAMN,QAAQ,GAAGD,SAAS,IAAI,uBAASA,SAAT,EAAoB,CAApB,CAA9B;;AAEA,SAAO,6BAAC,mBAAD;AAAQ,IAAA,aAAa,EAAEM,YAAvB;AAAqC,IAAA,KAAK,EAAEF;AAA5C,IAAP;AACD,CAZM","sourcesContent":["import debounce from \"lodash/debounce\"\nimport React, { useState } from \"react\"\nimport { FlexProps } from \"./Flex\"\nimport { Switch } from \"react-native\"\nimport { BorderProps, SizeProps, SpaceProps } from \"styled-system\"\n\nexport interface ToggleProps extends FlexProps, BorderProps, SizeProps, SpaceProps {\n  /** Disable interactions */\n  disabled?: boolean\n  /** Select the button on render. If the Toggle is inside a ToggleGroup, use ToggleGroup.defaultValue instead. */\n  selected?: boolean\n  /** Callback when selected */\n  onSelect?: (selected: { selected: boolean; value: string }) => void\n}\n\n/**\n * A Toggle button\n */\nexport const Toggle: React.SFC<ToggleProps> = props => {\n  const { children, disabled, onSelect: _onSelect, selected, ...others } = props\n  const [value, setValue] = useState(false)\n  const toggleSwitch = newValue => {\n    setValue(newValue)\n  }\n\n  // Ensures that only one call to `onSelect` occurs, regardless of whether the\n  // user clicks the Toggle element or the label.\n  const onSelect = _onSelect && debounce(_onSelect, 0)\n\n  return <Switch onValueChange={toggleSwitch} value={value} />\n}\n"]}