{"version":3,"sources":["extractProps.ts"],"names":["style","props","Array","Object","opacity","onLayout","id","clipPath","mask","transform","styleProperties","transformProps","matrix","extracted","propList","matched","idPattern","console"],"mappings":";;;;;;;;;;;;;;AAAA,IAAA,YAAA,GAAA,sBAAA,CAAA,OAAA,iBAAA,CAAA;;AACA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,mBAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,sBAAA;;AACA,IAAA,gBAAA,GAAA,sBAAA,CAAA,OAAA,qBAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,sBAAA,CAAA,OAAA,sBAAA,CAAA;;AACA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA,oBAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,WAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWO;;AAAA,SAAA,cAAA,CAAA,KAAA,EAA6D;AAAA,MAC1DA,KAD0D,GAChDC,KADgD,CAAA,KAAA;AAElE,SAAA,aAAA,CAAA,EAAA,EACMC,KAAK,CAALA,OAAAA,CAAAA,KAAAA,IAAuBC,MAAM,CAANA,MAAAA,CAAAA,KAAAA,CAAAA,MAAAA,EAAM,CAAA,EAAA,EAAA,MAAA,CAAA,CAAA,GAAA,mBAAA,CAAA,OAAA,EAA7BD,KAA6B,CAAA,CAANC,CAAvBD,GADN,KAAA,EAAA,EAAA,EAAA,KAAA,CAAA;AAMa;;AAAA,SAAA,YAAA,CAAA,KAAA,EAAA,GAAA,EAcb;AAAA,MACQE,OADR,GAC6DH,KAD7D,CAAA,OAAA;AAAA,MACiBI,QADjB,GAC6DJ,KAD7D,CAAA,QAAA;AAAA,MAC2BK,EAD3B,GAC6DL,KAD7D,CAAA,EAAA;AAAA,MAC+BM,QAD/B,GAC6DN,KAD7D,CAAA,QAAA;AAAA,MACyCO,IADzC,GAC6DP,KAD7D,CAAA,IAAA;AAAA,MAC+CQ,SAD/C,GAC6DR,KAD7D,CAAA,SAAA;AAEA,MAAMS,eAAyB,GAA/B,EAAA;AACA,MAAMC,cAAc,GAAG,CAAA,GAAA,iBAAA,CAAA,eAAA,EAAvB,KAAuB,CAAvB;AACA,MAAMC,MAAM,GAAG,CAAA,GAAA,iBAAA,CAAA,iBAAA,EAAA,cAAA,EAAf,SAAe,CAAf;;AACA,MAAMC,SAQL,GAAA,aAAA,CAAA;AACCD,IAAAA,MAAM,EADP,MAAA;AAECP,IAAAA,QAAQ,EAFT;AAAA,GAAA,EAAA,cAAA,EAAA;AAICS,IAAAA,QAAQ,EAJT,eAAA;AAKCV,IAAAA,OAAO,EAAE,CAAA,GAAA,eAAA,CAAA,OAAA,EALV,OAKU;AALV,GAAA,EAMI,CAAA,GAAA,iBAAA,CAAA,OAAA,EAAA,KAAA,EANJ,GAMI,CANJ,EAAA,EAAA,EAOI,CAAA,GAAA,YAAA,CAAA,OAAA,EAAA,KAAA,EAPJ,eAOI,CAPJ,EAAA,EAAA,EAQI,CAAA,GAAA,cAAA,CAAA,OAAA,EAAA,KAAA,EAhBL,eAgBK,CARJ,CARD;;AAmBA,MAAA,EAAA,EAAQ;AACNS,IAAAA,SAAS,CAATA,IAAAA,GAAAA,EAAAA;AAGF;;AAAA,MAAA,QAAA,EAAc;AACZ,KAAA,GAAA,SAAA,CAAA,OAAA,EAAA,SAAA,EAAyB,CAAA,GAAA,gBAAA,CAAA,OAAA,EAAzB,KAAyB,CAAzB;AAGF;;AAAA,MAAA,IAAA,EAAU;AACR,QAAME,OAAO,GAAGP,IAAI,CAAJA,KAAAA,CAAWQ,KAAAA,CAA3B,SAAgBR,CAAhB;;AAEA,QAAA,OAAA,EAAa;AACXK,MAAAA,SAAS,CAATA,IAAAA,GAAiBE,OAAO,CAAxBF,CAAwB,CAAxBA;AADF,KAAA,MAEO;AACLI,MAAAA,OAAO,CAAPA,IAAAA,CACE,gEAAA,IAAA,GADFA,GAAAA;AAMH;AAED;;AAAA,SAAA,SAAA;AACD","sourcesContent":["import extractFill from './extractFill';\nimport extractStroke from './extractStroke';\nimport { transformToMatrix, props2transform } from './extractTransform';\nimport extractClipPath from './extractClipPath';\nimport extractResponder from './extractResponder';\nimport extractOpacity from './extractOpacity';\nimport { idPattern } from '../util';\nimport {\n  ClipProps,\n  FillProps,\n  NumberProp,\n  ResponderProps,\n  StrokeProps,\n  TransformProps,\n} from './types';\nimport { Component } from 'react';\n\nexport function propsAndStyles(props: Object & { style?: [] | {} }) {\n  const { style } = props;\n  return {\n    ...(Array.isArray(style) ? Object.assign({}, ...style) : style),\n    ...props,\n  };\n}\n\nexport default function extractProps(\n  props: {\n    id?: string;\n    mask?: string;\n    clipPath?: string;\n    opacity?: NumberProp;\n    onLayout?: () => void;\n    transform?: number[] | string | TransformProps;\n  } & TransformProps &\n    ResponderProps &\n    StrokeProps &\n    FillProps &\n    ClipProps,\n  ref: Object,\n) {\n  const { opacity, onLayout, id, clipPath, mask, transform } = props;\n  const styleProperties: string[] = [];\n  const transformProps = props2transform(props);\n  const matrix = transformToMatrix(transformProps, transform);\n  const extracted: {\n    name?: string;\n    mask?: string;\n    opacity: number;\n    matrix: number[];\n    propList: string[];\n    onLayout?: () => void;\n    ref?: (instance: Component | null) => void;\n  } = {\n    matrix,\n    onLayout,\n    ...transformProps,\n    propList: styleProperties,\n    opacity: extractOpacity(opacity),\n    ...extractResponder(props, ref),\n    ...extractFill(props, styleProperties),\n    ...extractStroke(props, styleProperties),\n  };\n\n  if (id) {\n    extracted.name = id;\n  }\n\n  if (clipPath) {\n    Object.assign(extracted, extractClipPath(props));\n  }\n\n  if (mask) {\n    const matched = mask.match(idPattern);\n\n    if (matched) {\n      extracted.mask = matched[1];\n    } else {\n      console.warn(\n        'Invalid `mask` prop, expected a mask like \"#id\", but got: \"' +\n          mask +\n          '\"',\n      );\n    }\n  }\n\n  return extracted;\n}\n"]}