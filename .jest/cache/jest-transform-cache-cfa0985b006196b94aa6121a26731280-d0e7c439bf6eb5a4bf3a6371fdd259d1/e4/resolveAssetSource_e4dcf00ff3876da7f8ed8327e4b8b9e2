c659f394b81a82bb9c94318c68556182
'use strict';

var AssetRegistry = require('AssetRegistry');

var AssetSourceResolver = require('AssetSourceResolver');

var _customSourceTransformer, _serverURL, _scriptURL;

var _sourceCodeScriptURL;

function getSourceCodeScriptURL() {
  if (_sourceCodeScriptURL) {
    return _sourceCodeScriptURL;
  }

  var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;

  if (!sourceCode) {
    var NativeModules = require('NativeModules');

    sourceCode = NativeModules && NativeModules.SourceCode;
  }

  _sourceCodeScriptURL = sourceCode.scriptURL;
  return _sourceCodeScriptURL;
}

function getDevServerURL() {
  if (_serverURL === undefined) {
    var sourceCodeScriptURL = getSourceCodeScriptURL();
    var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\/\/.*?\//);

    if (match) {
      _serverURL = match[0];
    } else {
      _serverURL = null;
    }
  }

  return _serverURL;
}

function _coerceLocalScriptURL(scriptURL) {
  if (scriptURL) {
    if (scriptURL.startsWith('assets://')) {
      return null;
    }

    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);

    if (!scriptURL.includes('://')) {
      scriptURL = 'file://' + scriptURL;
    }
  }

  return scriptURL;
}

function getScriptURL() {
  if (_scriptURL === undefined) {
    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());
  }

  return _scriptURL;
}

function setCustomSourceTransformer(transformer) {
  _customSourceTransformer = transformer;
}

function resolveAssetSource(source) {
  if (typeof source === 'object') {
    return source;
  }

  var asset = AssetRegistry.getAssetByID(source);

  if (!asset) {
    return null;
  }

  var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);

  if (_customSourceTransformer) {
    return _customSourceTransformer(resolver);
  }

  return resolver.defaultAsset();
}

module.exports = resolveAssetSource;
module.exports.pickScale = AssetSourceResolver.pickScale;
module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc29sdmVBc3NldFNvdXJjZS5qcyJdLCJuYW1lcyI6WyJBc3NldFJlZ2lzdHJ5IiwicmVxdWlyZSIsIkFzc2V0U291cmNlUmVzb2x2ZXIiLCJfY3VzdG9tU291cmNlVHJhbnNmb3JtZXIiLCJfc2VydmVyVVJMIiwiX3NjcmlwdFVSTCIsIl9zb3VyY2VDb2RlU2NyaXB0VVJMIiwiZ2V0U291cmNlQ29kZVNjcmlwdFVSTCIsInNvdXJjZUNvZGUiLCJnbG9iYWwiLCJuYXRpdmVFeHRlbnNpb25zIiwiU291cmNlQ29kZSIsIk5hdGl2ZU1vZHVsZXMiLCJzY3JpcHRVUkwiLCJnZXREZXZTZXJ2ZXJVUkwiLCJ1bmRlZmluZWQiLCJzb3VyY2VDb2RlU2NyaXB0VVJMIiwibWF0Y2giLCJfY29lcmNlTG9jYWxTY3JpcHRVUkwiLCJzdGFydHNXaXRoIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJpbmNsdWRlcyIsImdldFNjcmlwdFVSTCIsInNldEN1c3RvbVNvdXJjZVRyYW5zZm9ybWVyIiwidHJhbnNmb3JtZXIiLCJyZXNvbHZlQXNzZXRTb3VyY2UiLCJzb3VyY2UiLCJhc3NldCIsImdldEFzc2V0QnlJRCIsInJlc29sdmVyIiwiZGVmYXVsdEFzc2V0IiwibW9kdWxlIiwiZXhwb3J0cyIsInBpY2tTY2FsZSJdLCJtYXBwaW5ncyI6IkFBYUE7O0FBRUEsSUFBTUEsYUFBYSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUE3Qjs7QUFDQSxJQUFNQyxtQkFBbUIsR0FBR0QsT0FBTyxDQUFDLHFCQUFELENBQW5DOztBQUlBLElBQUlFLHdCQUFKLEVBQThCQyxVQUE5QixFQUEwQ0MsVUFBMUM7O0FBRUEsSUFBSUMsb0JBQUo7O0FBQ0EsU0FBU0Msc0JBQVQsR0FBMkM7QUFDekMsTUFBSUQsb0JBQUosRUFBMEI7QUFDeEIsV0FBT0Esb0JBQVA7QUFDRDs7QUFFRCxNQUFJRSxVQUFVLEdBQ1pDLE1BQU0sQ0FBQ0MsZ0JBQVAsSUFBMkJELE1BQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0JDLFVBRHJEOztBQUVBLE1BQUksQ0FBQ0gsVUFBTCxFQUFpQjtBQUNmLFFBQU1JLGFBQWEsR0FBR1gsT0FBTyxDQUFDLGVBQUQsQ0FBN0I7O0FBQ0FPLElBQUFBLFVBQVUsR0FBR0ksYUFBYSxJQUFJQSxhQUFhLENBQUNELFVBQTVDO0FBQ0Q7O0FBQ0RMLEVBQUFBLG9CQUFvQixHQUFHRSxVQUFVLENBQUNLLFNBQWxDO0FBQ0EsU0FBT1Asb0JBQVA7QUFDRDs7QUFFRCxTQUFTUSxlQUFULEdBQW9DO0FBQ2xDLE1BQUlWLFVBQVUsS0FBS1csU0FBbkIsRUFBOEI7QUFDNUIsUUFBTUMsbUJBQW1CLEdBQUdULHNCQUFzQixFQUFsRDtBQUNBLFFBQU1VLEtBQUssR0FDVEQsbUJBQW1CLElBQUlBLG1CQUFtQixDQUFDQyxLQUFwQixDQUEwQixtQkFBMUIsQ0FEekI7O0FBRUEsUUFBSUEsS0FBSixFQUFXO0FBRVRiLE1BQUFBLFVBQVUsR0FBR2EsS0FBSyxDQUFDLENBQUQsQ0FBbEI7QUFDRCxLQUhELE1BR087QUFFTGIsTUFBQUEsVUFBVSxHQUFHLElBQWI7QUFDRDtBQUNGOztBQUNELFNBQU9BLFVBQVA7QUFDRDs7QUFFRCxTQUFTYyxxQkFBVCxDQUErQkwsU0FBL0IsRUFBNEQ7QUFDMUQsTUFBSUEsU0FBSixFQUFlO0FBQ2IsUUFBSUEsU0FBUyxDQUFDTSxVQUFWLENBQXFCLFdBQXJCLENBQUosRUFBdUM7QUFFckMsYUFBTyxJQUFQO0FBQ0Q7O0FBQ0ROLElBQUFBLFNBQVMsR0FBR0EsU0FBUyxDQUFDTyxTQUFWLENBQW9CLENBQXBCLEVBQXVCUCxTQUFTLENBQUNRLFdBQVYsQ0FBc0IsR0FBdEIsSUFBNkIsQ0FBcEQsQ0FBWjs7QUFDQSxRQUFJLENBQUNSLFNBQVMsQ0FBQ1MsUUFBVixDQUFtQixLQUFuQixDQUFMLEVBQWdDO0FBRzlCVCxNQUFBQSxTQUFTLEdBQUcsWUFBWUEsU0FBeEI7QUFDRDtBQUNGOztBQUNELFNBQU9BLFNBQVA7QUFDRDs7QUFFRCxTQUFTVSxZQUFULEdBQWlDO0FBQy9CLE1BQUlsQixVQUFVLEtBQUtVLFNBQW5CLEVBQThCO0FBQzVCVixJQUFBQSxVQUFVLEdBQUdhLHFCQUFxQixDQUFDWCxzQkFBc0IsRUFBdkIsQ0FBbEM7QUFDRDs7QUFDRCxTQUFPRixVQUFQO0FBQ0Q7O0FBRUQsU0FBU21CLDBCQUFULENBQ0VDLFdBREYsRUFFUTtBQUNOdEIsRUFBQUEsd0JBQXdCLEdBQUdzQixXQUEzQjtBQUNEOztBQU1ELFNBQVNDLGtCQUFULENBQTRCQyxNQUE1QixFQUErRDtBQUM3RCxNQUFJLE9BQU9BLE1BQVAsS0FBa0IsUUFBdEIsRUFBZ0M7QUFDOUIsV0FBT0EsTUFBUDtBQUNEOztBQUVELE1BQU1DLEtBQUssR0FBRzVCLGFBQWEsQ0FBQzZCLFlBQWQsQ0FBMkJGLE1BQTNCLENBQWQ7O0FBQ0EsTUFBSSxDQUFDQyxLQUFMLEVBQVk7QUFDVixXQUFPLElBQVA7QUFDRDs7QUFFRCxNQUFNRSxRQUFRLEdBQUcsSUFBSTVCLG1CQUFKLENBQ2ZZLGVBQWUsRUFEQSxFQUVmUyxZQUFZLEVBRkcsRUFHZkssS0FIZSxDQUFqQjs7QUFLQSxNQUFJekIsd0JBQUosRUFBOEI7QUFDNUIsV0FBT0Esd0JBQXdCLENBQUMyQixRQUFELENBQS9CO0FBQ0Q7O0FBQ0QsU0FBT0EsUUFBUSxDQUFDQyxZQUFULEVBQVA7QUFDRDs7QUFFREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCUCxrQkFBakI7QUFDQU0sTUFBTSxDQUFDQyxPQUFQLENBQWVDLFNBQWYsR0FBMkJoQyxtQkFBbUIsQ0FBQ2dDLFNBQS9DO0FBQ0FGLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlVCwwQkFBZixHQUE0Q0EsMEJBQTVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKlxuICogUmVzb2x2ZXMgYW4gYXNzZXQgaW50byBhIGBzb3VyY2VgIGZvciBgSW1hZ2VgLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBc3NldFJlZ2lzdHJ5ID0gcmVxdWlyZSgnQXNzZXRSZWdpc3RyeScpO1xuY29uc3QgQXNzZXRTb3VyY2VSZXNvbHZlciA9IHJlcXVpcmUoJ0Fzc2V0U291cmNlUmVzb2x2ZXInKTtcblxuaW1wb3J0IHR5cGUge1Jlc29sdmVkQXNzZXRTb3VyY2V9IGZyb20gJ0Fzc2V0U291cmNlUmVzb2x2ZXInO1xuXG5sZXQgX2N1c3RvbVNvdXJjZVRyYW5zZm9ybWVyLCBfc2VydmVyVVJMLCBfc2NyaXB0VVJMO1xuXG5sZXQgX3NvdXJjZUNvZGVTY3JpcHRVUkw6ID9zdHJpbmc7XG5mdW5jdGlvbiBnZXRTb3VyY2VDb2RlU2NyaXB0VVJMKCk6ID9zdHJpbmcge1xuICBpZiAoX3NvdXJjZUNvZGVTY3JpcHRVUkwpIHtcbiAgICByZXR1cm4gX3NvdXJjZUNvZGVTY3JpcHRVUkw7XG4gIH1cblxuICBsZXQgc291cmNlQ29kZSA9XG4gICAgZ2xvYmFsLm5hdGl2ZUV4dGVuc2lvbnMgJiYgZ2xvYmFsLm5hdGl2ZUV4dGVuc2lvbnMuU291cmNlQ29kZTtcbiAgaWYgKCFzb3VyY2VDb2RlKSB7XG4gICAgY29uc3QgTmF0aXZlTW9kdWxlcyA9IHJlcXVpcmUoJ05hdGl2ZU1vZHVsZXMnKTtcbiAgICBzb3VyY2VDb2RlID0gTmF0aXZlTW9kdWxlcyAmJiBOYXRpdmVNb2R1bGVzLlNvdXJjZUNvZGU7XG4gIH1cbiAgX3NvdXJjZUNvZGVTY3JpcHRVUkwgPSBzb3VyY2VDb2RlLnNjcmlwdFVSTDtcbiAgcmV0dXJuIF9zb3VyY2VDb2RlU2NyaXB0VVJMO1xufVxuXG5mdW5jdGlvbiBnZXREZXZTZXJ2ZXJVUkwoKTogP3N0cmluZyB7XG4gIGlmIChfc2VydmVyVVJMID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBzb3VyY2VDb2RlU2NyaXB0VVJMID0gZ2V0U291cmNlQ29kZVNjcmlwdFVSTCgpO1xuICAgIGNvbnN0IG1hdGNoID1cbiAgICAgIHNvdXJjZUNvZGVTY3JpcHRVUkwgJiYgc291cmNlQ29kZVNjcmlwdFVSTC5tYXRjaCgvXmh0dHBzPzpcXC9cXC8uKj9cXC8vKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIC8vIGpzQnVuZGxlIHdhcyBsb2FkZWQgZnJvbSBuZXR3b3JrXG4gICAgICBfc2VydmVyVVJMID0gbWF0Y2hbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGpzQnVuZGxlIHdhcyBsb2FkZWQgZnJvbSBmaWxlXG4gICAgICBfc2VydmVyVVJMID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9zZXJ2ZXJVUkw7XG59XG5cbmZ1bmN0aW9uIF9jb2VyY2VMb2NhbFNjcmlwdFVSTChzY3JpcHRVUkw6ID9zdHJpbmcpOiA/c3RyaW5nIHtcbiAgaWYgKHNjcmlwdFVSTCkge1xuICAgIGlmIChzY3JpcHRVUkwuc3RhcnRzV2l0aCgnYXNzZXRzOi8vJykpIHtcbiAgICAgIC8vIGFuZHJvaWQ6IHJ1bm5pbmcgZnJvbSB3aXRoaW4gYXNzZXRzLCBubyBvZmZsaW5lIHBhdGggdG8gdXNlXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc2NyaXB0VVJMID0gc2NyaXB0VVJMLnN1YnN0cmluZygwLCBzY3JpcHRVUkwubGFzdEluZGV4T2YoJy8nKSArIDEpO1xuICAgIGlmICghc2NyaXB0VVJMLmluY2x1ZGVzKCc6Ly8nKSkge1xuICAgICAgLy8gQWRkIGZpbGUgcHJvdG9jb2wgaW4gY2FzZSB3ZSBoYXZlIGFuIGFic29sdXRlIGZpbGUgcGF0aCBhbmQgbm90IGEgVVJMLlxuICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgcmVhbGx5IGJlIG5lY2Vzc2FyeS4gc2NyaXB0VVJMIHNob3VsZCBiZSBhIFVSTC5cbiAgICAgIHNjcmlwdFVSTCA9ICdmaWxlOi8vJyArIHNjcmlwdFVSTDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNjcmlwdFVSTDtcbn1cblxuZnVuY3Rpb24gZ2V0U2NyaXB0VVJMKCk6ID9zdHJpbmcge1xuICBpZiAoX3NjcmlwdFVSTCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgX3NjcmlwdFVSTCA9IF9jb2VyY2VMb2NhbFNjcmlwdFVSTChnZXRTb3VyY2VDb2RlU2NyaXB0VVJMKCkpO1xuICB9XG4gIHJldHVybiBfc2NyaXB0VVJMO1xufVxuXG5mdW5jdGlvbiBzZXRDdXN0b21Tb3VyY2VUcmFuc2Zvcm1lcihcbiAgdHJhbnNmb3JtZXI6IChyZXNvbHZlcjogQXNzZXRTb3VyY2VSZXNvbHZlcikgPT4gUmVzb2x2ZWRBc3NldFNvdXJjZSxcbik6IHZvaWQge1xuICBfY3VzdG9tU291cmNlVHJhbnNmb3JtZXIgPSB0cmFuc2Zvcm1lcjtcbn1cblxuLyoqXG4gKiBgc291cmNlYCBpcyBlaXRoZXIgYSBudW1iZXIgKG9wYXF1ZSB0eXBlIHJldHVybmVkIGJ5IHJlcXVpcmUoJy4vZm9vLnBuZycpKVxuICogb3IgYW4gYEltYWdlU291cmNlYCBsaWtlIHsgdXJpOiAnPGh0dHAgbG9jYXRpb24gfHwgZmlsZSBwYXRoPicgfVxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXRTb3VyY2Uoc291cmNlOiBhbnkpOiA/UmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gIGlmICh0eXBlb2Ygc291cmNlID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBjb25zdCBhc3NldCA9IEFzc2V0UmVnaXN0cnkuZ2V0QXNzZXRCeUlEKHNvdXJjZSk7XG4gIGlmICghYXNzZXQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHJlc29sdmVyID0gbmV3IEFzc2V0U291cmNlUmVzb2x2ZXIoXG4gICAgZ2V0RGV2U2VydmVyVVJMKCksXG4gICAgZ2V0U2NyaXB0VVJMKCksXG4gICAgYXNzZXQsXG4gICk7XG4gIGlmIChfY3VzdG9tU291cmNlVHJhbnNmb3JtZXIpIHtcbiAgICByZXR1cm4gX2N1c3RvbVNvdXJjZVRyYW5zZm9ybWVyKHJlc29sdmVyKTtcbiAgfVxuICByZXR1cm4gcmVzb2x2ZXIuZGVmYXVsdEFzc2V0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVzb2x2ZUFzc2V0U291cmNlO1xubW9kdWxlLmV4cG9ydHMucGlja1NjYWxlID0gQXNzZXRTb3VyY2VSZXNvbHZlci5waWNrU2NhbGU7XG5tb2R1bGUuZXhwb3J0cy5zZXRDdXN0b21Tb3VyY2VUcmFuc2Zvcm1lciA9IHNldEN1c3RvbVNvdXJjZVRyYW5zZm9ybWVyO1xuIl19