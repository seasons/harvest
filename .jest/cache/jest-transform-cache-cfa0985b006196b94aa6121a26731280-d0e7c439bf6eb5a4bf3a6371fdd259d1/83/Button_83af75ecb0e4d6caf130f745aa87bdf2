3ba851178607167a8b8de51eff31806d
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getColorsForVariant = getColorsForVariant;
exports.Button = exports.defaultVariant = exports.defaultSize = void 0;

var _taggedTemplateLiteralLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteralLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _native = _interopRequireDefault(require("styled-components/native"));

var _Theme = require("./Theme");

var _Box = require("./Box");

var _Flex = require("./Flex");

var _Typography = require("./Typography");

var _renderpropsNative = require("react-spring/renderprops-native.cjs");

function _templateObject() {
  var data = (0, _taggedTemplateLiteralLoose2.default)(["\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  border-width: 1;\n  border-radius: 28;\n  width: ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DisplayState;

(function (DisplayState) {
  DisplayState["Default"] = "default";
  DisplayState["Pressed"] = "pressed";
  DisplayState["Disabled"] = "disabled";
})(DisplayState || (DisplayState = {}));

var defaultSize = "large";
exports.defaultSize = defaultSize;
var defaultVariant = "primaryDark";
exports.defaultVariant = defaultVariant;

function getColorsForVariant(variant) {
  var _themeProps$colors = _Theme.themeProps.colors,
      black = _themeProps$colors.black,
      white = _themeProps$colors.white,
      gray = _themeProps$colors.gray,
      darkGray = _themeProps$colors.darkGray,
      lightGray = _themeProps$colors.lightGray;

  switch (variant) {
    case "primaryLight":
      return {
        default: {
          backgroundColor: white,
          borderColor: white,
          color: black
        },
        pressed: {
          backgroundColor: white,
          borderColor: white,
          color: black
        },
        disabled: {
          backgroundColor: darkGray,
          borderColor: darkGray,
          color: gray
        }
      };

    case "secondaryLight":
      return {
        default: {
          backgroundColor: black,
          borderColor: gray,
          color: white
        },
        pressed: {
          backgroundColor: black,
          borderColor: gray,
          color: white
        },
        disabled: {
          backgroundColor: black,
          borderColor: gray,
          color: white
        }
      };

    case "primaryDark":
      return {
        default: {
          backgroundColor: black,
          borderColor: black,
          color: white
        },
        pressed: {
          backgroundColor: black,
          borderColor: black,
          color: white
        },
        disabled: {
          backgroundColor: lightGray,
          borderColor: lightGray,
          color: darkGray
        }
      };

    case "secondaryDark":
      return {
        default: {
          backgroundColor: white,
          borderColor: black,
          color: black
        },
        pressed: {
          backgroundColor: white,
          borderColor: black,
          color: black
        },
        disabled: {
          backgroundColor: white,
          borderColor: black,
          color: black
        }
      };

    default:
  }
}

var Button = function (_Component) {
  (0, _inherits2.default)(Button, _Component);

  function Button() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Button);

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Button)).call.apply(_getPrototypeOf2, [this].concat(_args)));
    _this.state = {
      previous: DisplayState.Default,
      current: DisplayState.Default
    };

    _this.onPress = function (args) {
      if (_this.props.onPress) {
        var current = _this.state.current;

        if (_this.state.current === DisplayState.Default) {
          _this.setState({
            previous: current,
            current: DisplayState.Pressed
          });

          setTimeout(function () {
            return _this.setState({
              previous: current,
              current: DisplayState.Default
            });
          }, 0.3);
        } else {
          _this.setState({
            current: DisplayState.Default
          });
        }

        _this.props.onPress(args);
      }
    };

    return _this;
  }

  (0, _createClass2.default)(Button, [{
    key: "getSize",
    value: function getSize() {
      switch (this.props.size) {
        case "small":
          return {
            height: 40,
            size: "0",
            px: 2
          };

        case "medium":
          return {
            height: 55,
            size: "2",
            px: 30
          };

        case "large":
          return {
            height: 55,
            size: "1",
            px: 5
          };
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          disabled = _this$props.disabled,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["children", "disabled"]);

      var _this$getSize = this.getSize(),
          px = _this$getSize.px,
          size = _this$getSize.size,
          height = _this$getSize.height;

      var variantColors = getColorsForVariant(this.props.variant);
      var _this$state = this.state,
          current = _this$state.current,
          previous = _this$state.previous;
      var from = disabled ? variantColors[DisplayState.Disabled] : variantColors[previous];
      var to = disabled ? variantColors[DisplayState.Disabled] : variantColors[current];
      return _react.default.createElement(_renderpropsNative.Spring, {
        native: true,
        from: from,
        to: to
      }, function (props) {
        return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: _this2.onPress,
          onPressIn: function onPressIn() {
            _this2.setState({
              previous: DisplayState.Default,
              current: DisplayState.Pressed
            });
          },
          onPressOut: function onPressOut() {
            _this2.setState({
              previous: DisplayState.Pressed,
              current: DisplayState.Default
            });
          },
          disabled: disabled
        }, _react.default.createElement(_Flex.Flex, {
          flexDirection: "row"
        }, _react.default.createElement(AnimatedContainer, (0, _extends2.default)({
          disabled: disabled
        }, rest, {
          style: _objectSpread({}, props, {
            height: height
          }),
          px: px
        }), _react.default.createElement(_Typography.Sans, {
          color: to.color,
          size: size
        }, children))));
      });
    }
  }]);
  return Button;
}(_react.Component);

exports.Button = Button;
Button.defaultProps = {
  size: defaultSize,
  variant: defaultVariant,
  theme: _Theme.themeProps
};
var Container = (0, _native.default)(_Box.Box)(_templateObject(), function (p) {
  return p.size === "large" ? "100%" : "auto";
});
var AnimatedContainer = (0, _renderpropsNative.animated)(Container);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,