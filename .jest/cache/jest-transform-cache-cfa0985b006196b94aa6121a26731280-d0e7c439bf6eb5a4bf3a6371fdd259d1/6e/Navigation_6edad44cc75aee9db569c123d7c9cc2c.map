{"version":3,"sources":["Navigation.js"],"names":["Object","defineProperty","exports","value","lodash_1","require","NativeCommandsSender_1","NativeEventsReceiver_1","UniqueIdProvider_1","Store_1","ComponentRegistry_1","Commands_1","LayoutTreeParser_1","LayoutTreeCrawler_1","EventsRegistry_1","SharedElement_1","CommandsObserver_1","Constants_1","ComponentEventsObserver_1","TouchablePreview_1","ComponentWrapper_1","OptionsProcessor_1","ColorService_1","AssetResolver_1","AppRegistryService_1","NavigationRoot","Element","SharedElement","TouchablePreview","componentWrapper","ComponentWrapper","store","Store","nativeEventsReceiver","NativeEventsReceiver","uniqueIdProvider","UniqueIdProvider","componentEventsObserver","ComponentEventsObserver","appRegistryService","AppRegistryService","componentRegistry","ComponentRegistry","layoutTreeParser","LayoutTreeParser","optionsProcessor","OptionsProcessor","ColorService","AssetService","layoutTreeCrawler","LayoutTreeCrawler","nativeCommandsSender","NativeCommandsSender","commandsObserver","CommandsObserver","commands","Commands","eventsRegistry","EventsRegistry","registerOnceForAllComponentEvents","componentName","componentProvider","concreteComponentProvider","registerComponent","getComponentClassFunc","ReduxProvider","reduxStore","undefined","layout","setRoot","options","setDefaultOptions","componentId","mergeOptions","showModal","dismissModal","dismissAllModals","push","pop","popTo","popToRoot","children","isArray","setStackRoot","showOverlay","dismissOverlay","getLaunchArgs","Constants","get"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lodash_1 = require(\"lodash\");\nconst NativeCommandsSender_1 = require(\"./adapters/NativeCommandsSender\");\nconst NativeEventsReceiver_1 = require(\"./adapters/NativeEventsReceiver\");\nconst UniqueIdProvider_1 = require(\"./adapters/UniqueIdProvider\");\nconst Store_1 = require(\"./components/Store\");\nconst ComponentRegistry_1 = require(\"./components/ComponentRegistry\");\nconst Commands_1 = require(\"./commands/Commands\");\nconst LayoutTreeParser_1 = require(\"./commands/LayoutTreeParser\");\nconst LayoutTreeCrawler_1 = require(\"./commands/LayoutTreeCrawler\");\nconst EventsRegistry_1 = require(\"./events/EventsRegistry\");\nconst SharedElement_1 = require(\"./adapters/SharedElement\");\nconst CommandsObserver_1 = require(\"./events/CommandsObserver\");\nconst Constants_1 = require(\"./adapters/Constants\");\nconst ComponentEventsObserver_1 = require(\"./events/ComponentEventsObserver\");\nconst TouchablePreview_1 = require(\"./adapters/TouchablePreview\");\nconst ComponentWrapper_1 = require(\"./components/ComponentWrapper\");\nconst OptionsProcessor_1 = require(\"./commands/OptionsProcessor\");\nconst ColorService_1 = require(\"./adapters/ColorService\");\nconst AssetResolver_1 = require(\"./adapters/AssetResolver\");\nconst AppRegistryService_1 = require(\"./adapters/AppRegistryService\");\nclass NavigationRoot {\n    constructor() {\n        this.Element = SharedElement_1.SharedElement;\n        this.TouchablePreview = TouchablePreview_1.TouchablePreview;\n        this.componentWrapper = new ComponentWrapper_1.ComponentWrapper();\n        this.store = new Store_1.Store();\n        this.nativeEventsReceiver = new NativeEventsReceiver_1.NativeEventsReceiver();\n        this.uniqueIdProvider = new UniqueIdProvider_1.UniqueIdProvider();\n        this.componentEventsObserver = new ComponentEventsObserver_1.ComponentEventsObserver(this.nativeEventsReceiver, this.store);\n        const appRegistryService = new AppRegistryService_1.AppRegistryService();\n        this.componentRegistry = new ComponentRegistry_1.ComponentRegistry(this.store, this.componentEventsObserver, this.componentWrapper, appRegistryService);\n        this.layoutTreeParser = new LayoutTreeParser_1.LayoutTreeParser(this.uniqueIdProvider);\n        const optionsProcessor = new OptionsProcessor_1.OptionsProcessor(this.store, this.uniqueIdProvider, new ColorService_1.ColorService(), new AssetResolver_1.AssetService());\n        this.layoutTreeCrawler = new LayoutTreeCrawler_1.LayoutTreeCrawler(this.store, optionsProcessor);\n        this.nativeCommandsSender = new NativeCommandsSender_1.NativeCommandsSender();\n        this.commandsObserver = new CommandsObserver_1.CommandsObserver(this.uniqueIdProvider);\n        this.commands = new Commands_1.Commands(this.nativeCommandsSender, this.layoutTreeParser, this.layoutTreeCrawler, this.commandsObserver, this.uniqueIdProvider, optionsProcessor);\n        this.eventsRegistry = new EventsRegistry_1.EventsRegistry(this.nativeEventsReceiver, this.commandsObserver, this.componentEventsObserver);\n        this.componentEventsObserver.registerOnceForAllComponentEvents();\n    }\n    /**\n     * Every navigation component in your app must be registered with a unique name.\n     * The component itself is a traditional React component extending React.Component.\n     */\n    registerComponent(componentName, componentProvider, concreteComponentProvider) {\n        return this.componentRegistry.registerComponent(componentName, componentProvider, concreteComponentProvider);\n    }\n    /**\n     * Utility helper function like registerComponent,\n     * wraps the provided component with a react-redux Provider with the passed redux store\n     */\n    registerComponentWithRedux(componentName, getComponentClassFunc, ReduxProvider, reduxStore) {\n        return this.componentRegistry.registerComponent(componentName, getComponentClassFunc, undefined, ReduxProvider, reduxStore);\n    }\n    /**\n     * Reset the app to a new layout\n     */\n    setRoot(layout) {\n        return this.commands.setRoot(layout);\n    }\n    /**\n     * Set default options to all screens. Useful for declaring a consistent style across the app.\n     */\n    setDefaultOptions(options) {\n        this.commands.setDefaultOptions(options);\n    }\n    /**\n     * Change a component's navigation options\n     */\n    mergeOptions(componentId, options) {\n        this.commands.mergeOptions(componentId, options);\n    }\n    /**\n     * Show a screen as a modal.\n     */\n    showModal(layout) {\n        return this.commands.showModal(layout);\n    }\n    /**\n     * Dismiss a modal by componentId. The dismissed modal can be anywhere in the stack.\n     */\n    dismissModal(componentId, mergeOptions) {\n        return this.commands.dismissModal(componentId, mergeOptions);\n    }\n    /**\n     * Dismiss all Modals\n     */\n    dismissAllModals(mergeOptions) {\n        return this.commands.dismissAllModals(mergeOptions);\n    }\n    /**\n     * Push a new layout into this screen's navigation stack.\n     */\n    push(componentId, layout) {\n        return this.commands.push(componentId, layout);\n    }\n    /**\n     * Pop a component from the stack, regardless of it's position.\n     */\n    pop(componentId, mergeOptions) {\n        return this.commands.pop(componentId, mergeOptions);\n    }\n    /**\n     * Pop the stack to a given component\n     */\n    popTo(componentId, mergeOptions) {\n        return this.commands.popTo(componentId, mergeOptions);\n    }\n    /**\n     * Pop the component's stack to root.\n     */\n    popToRoot(componentId, mergeOptions) {\n        return this.commands.popToRoot(componentId, mergeOptions);\n    }\n    /**\n     * Sets new root component to stack.\n     */\n    setStackRoot(componentId, layout) {\n        const children = lodash_1.isArray(layout) ? layout : [layout];\n        return this.commands.setStackRoot(componentId, children);\n    }\n    /**\n     * Show overlay on top of the entire app\n     */\n    showOverlay(layout) {\n        return this.commands.showOverlay(layout);\n    }\n    /**\n     * dismiss overlay by componentId\n     */\n    dismissOverlay(componentId) {\n        return this.commands.dismissOverlay(componentId);\n    }\n    /**\n     * Resolves arguments passed on launch\n     */\n    getLaunchArgs() {\n        return this.commands.getLaunchArgs();\n    }\n    /**\n     * Obtain the events registry instance\n     */\n    events() {\n        return this.eventsRegistry;\n    }\n    /**\n     * Constants coming from native\n     */\n    async constants() {\n        return await Constants_1.Constants.get();\n    }\n}\nexports.NavigationRoot = NavigationRoot;\n"]}