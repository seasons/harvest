d095c9f5fba94b7c2c3e907817a02f27
'use strict';

var Dimensions = require('Dimensions');

var FrameRateLogger = require('FrameRateLogger');

var Keyboard = require('Keyboard');

var ReactNative = require('ReactNative');

var TextInputState = require('TextInputState');

var UIManager = require('UIManager');

var invariant = require('invariant');

var nullthrows = require('nullthrows');

var performanceNow = require('fbjs/lib/performanceNow');

var warning = require('fbjs/lib/warning');

var _require = require('NativeModules'),
    ScrollViewManager = _require.ScrollViewManager;

var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;
var ScrollResponderMixin = {
  _subscriptionKeyboardWillShow: null,
  _subscriptionKeyboardWillHide: null,
  _subscriptionKeyboardDidShow: null,
  _subscriptionKeyboardDidHide: null,
  scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {
    return {
      isTouching: false,
      lastMomentumScrollBeginTime: 0,
      lastMomentumScrollEndTime: 0,
      observedScrollSinceBecomingResponder: false,
      becameResponderWhileAnimating: false
    };
  },
  scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {
    return this.state.isTouching;
  },
  scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder(e) {
    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

    if (this.props.keyboardShouldPersistTaps === 'handled' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput) {
      return true;
    }

    return false;
  },
  scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {
    if (this.scrollResponderIsAnimating()) {
      return true;
    }

    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
    var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
    var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';

    if (keyboardNeverPersistTaps && currentlyFocusedTextInput != null && e.target && !TextInputState.isTextInput(e.target)) {
      return true;
    }

    return false;
  },
  scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {},
  scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {
    return !this.state.observedScrollSinceBecomingResponder;
  },
  scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {
    var nativeEvent = e.nativeEvent;
    this.state.isTouching = nativeEvent.touches.length !== 0;
    this.props.onTouchEnd && this.props.onTouchEnd(e);
  },
  scrollResponderHandleTouchCancel: function scrollResponderHandleTouchCancel(e) {
    this.state.isTouching = false;
    this.props.onTouchCancel && this.props.onTouchCancel(e);
  },
  scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {
    this.props.onResponderRelease && this.props.onResponderRelease(e);
    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

    if (this.props.keyboardShouldPersistTaps !== true && this.props.keyboardShouldPersistTaps !== 'always' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {
      this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);
      TextInputState.blurTextInput(currentlyFocusedTextInput);
    }
  },
  scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {
    this.state.observedScrollSinceBecomingResponder = true;
    this.props.onScroll && this.props.onScroll(e);
  },
  scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {
    this.state.observedScrollSinceBecomingResponder = false;
    this.props.onResponderGrant && this.props.onResponderGrant(e);
    this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();
  },
  scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {
    FrameRateLogger.beginScroll();
    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
  },
  scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {
    var velocity = e.nativeEvent.velocity;

    if (!this.scrollResponderIsAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
      FrameRateLogger.endScroll();
    }

    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
  },
  scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {
    this.state.lastMomentumScrollBeginTime = performanceNow();
    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
  },
  scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {
    FrameRateLogger.endScroll();
    this.state.lastMomentumScrollEndTime = performanceNow();
    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);
  },
  scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {
    this.state.isTouching = true;
    this.props.onTouchStart && this.props.onTouchStart(e);
  },
  scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {
    this.props.onTouchMove && this.props.onTouchMove(e);
  },
  scrollResponderIsAnimating: function scrollResponderIsAnimating() {
    var now = performanceNow();
    var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;
    var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;
    return isAnimating;
  },
  scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {
    return this.getScrollableNode ? this.getScrollableNode() : ReactNative.findNodeHandle(this);
  },
  scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {
    if (typeof x === 'number') {
      console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');
    } else {
      var _ref = x || {};

      x = _ref.x;
      y = _ref.y;
      animated = _ref.animated;
    }

    UIManager.dispatchViewManagerCommand(nullthrows(this.scrollResponderGetScrollableNode()), UIManager.getViewManagerConfig('RCTScrollView').Commands.scrollTo, [x || 0, y || 0, animated !== false]);
  },
  scrollResponderScrollToEnd: function scrollResponderScrollToEnd(options) {
    var animated = (options && options.animated) !== false;
    UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.getViewManagerConfig('RCTScrollView').Commands.scrollToEnd, [animated]);
  },
  scrollResponderScrollWithoutAnimationTo: function scrollResponderScrollWithoutAnimationTo(offsetX, offsetY) {
    console.warn('`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead');
    this.scrollResponderScrollTo({
      x: offsetX,
      y: offsetY,
      animated: false
    });
  },
  scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {
    invariant(ScrollViewManager && ScrollViewManager.zoomToRect, 'zoomToRect is not implemented');

    if ('animated' in rect) {
      animated = rect.animated;
      delete rect.animated;
    } else if (typeof animated !== 'undefined') {
      console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
    }

    ScrollViewManager.zoomToRect(this.scrollResponderGetScrollableNode(), rect, animated !== false);
  },
  scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {
    UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.getViewManagerConfig('RCTScrollView').Commands.flashScrollIndicators, []);
  },
  scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
    this.additionalScrollOffset = additionalOffset || 0;
    this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;
    UIManager.measureLayout(nodeHandle, ReactNative.findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);
  },
  scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {
    var keyboardScreenY = Dimensions.get('window').height;

    if (this.keyboardWillOpenTo) {
      keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;
    }

    var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;

    if (this.preventNegativeScrollOffset) {
      scrollOffsetY = Math.max(0, scrollOffsetY);
    }

    this.scrollResponderScrollTo({
      x: 0,
      y: scrollOffsetY,
      animated: true
    });
    this.additionalOffset = 0;
    this.preventNegativeScrollOffset = false;
  },
  scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(msg) {
    console.error('Error measuring text field: ', msg);
  },
  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
    var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
    warning(typeof keyboardShouldPersistTaps !== 'boolean', "'keyboardShouldPersistTaps={" + keyboardShouldPersistTaps + "}' is deprecated. " + ("Use 'keyboardShouldPersistTaps=\"" + (keyboardShouldPersistTaps ? 'always' : 'never') + "\"' instead"));
    this.keyboardWillOpenTo = null;
    this.additionalScrollOffset = 0;
    this._subscriptionKeyboardWillShow = Keyboard.addListener('keyboardWillShow', this.scrollResponderKeyboardWillShow);
    this._subscriptionKeyboardWillHide = Keyboard.addListener('keyboardWillHide', this.scrollResponderKeyboardWillHide);
    this._subscriptionKeyboardDidShow = Keyboard.addListener('keyboardDidShow', this.scrollResponderKeyboardDidShow);
    this._subscriptionKeyboardDidHide = Keyboard.addListener('keyboardDidHide', this.scrollResponderKeyboardDidHide);
  },
  componentWillUnmount: function componentWillUnmount() {
    if (this._subscriptionKeyboardWillShow != null) {
      this._subscriptionKeyboardWillShow.remove();
    }

    if (this._subscriptionKeyboardWillHide != null) {
      this._subscriptionKeyboardWillHide.remove();
    }

    if (this._subscriptionKeyboardDidShow != null) {
      this._subscriptionKeyboardDidShow.remove();
    }

    if (this._subscriptionKeyboardDidHide != null) {
      this._subscriptionKeyboardDidHide.remove();
    }
  },
  scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {
    this.keyboardWillOpenTo = e;
    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);
  },
  scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {
    this.keyboardWillOpenTo = null;
    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);
  },
  scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {
    if (e) {
      this.keyboardWillOpenTo = e;
    }

    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);
  },
  scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {
    this.keyboardWillOpenTo = null;
    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);
  }
};
var ScrollResponder = {
  Mixin: ScrollResponderMixin
};
module.exports = ScrollResponder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjcm9sbFJlc3BvbmRlci5qcyJdLCJuYW1lcyI6WyJEaW1lbnNpb25zIiwicmVxdWlyZSIsIkZyYW1lUmF0ZUxvZ2dlciIsIktleWJvYXJkIiwiUmVhY3ROYXRpdmUiLCJUZXh0SW5wdXRTdGF0ZSIsIlVJTWFuYWdlciIsImludmFyaWFudCIsIm51bGx0aHJvd3MiLCJwZXJmb3JtYW5jZU5vdyIsIndhcm5pbmciLCJTY3JvbGxWaWV3TWFuYWdlciIsIklTX0FOSU1BVElOR19UT1VDSF9TVEFSVF9USFJFU0hPTERfTVMiLCJTY3JvbGxSZXNwb25kZXJNaXhpbiIsIl9zdWJzY3JpcHRpb25LZXlib2FyZFdpbGxTaG93IiwiX3N1YnNjcmlwdGlvbktleWJvYXJkV2lsbEhpZGUiLCJfc3Vic2NyaXB0aW9uS2V5Ym9hcmREaWRTaG93IiwiX3N1YnNjcmlwdGlvbktleWJvYXJkRGlkSGlkZSIsInNjcm9sbFJlc3BvbmRlck1peGluR2V0SW5pdGlhbFN0YXRlIiwiaXNUb3VjaGluZyIsImxhc3RNb21lbnR1bVNjcm9sbEJlZ2luVGltZSIsImxhc3RNb21lbnR1bVNjcm9sbEVuZFRpbWUiLCJvYnNlcnZlZFNjcm9sbFNpbmNlQmVjb21pbmdSZXNwb25kZXIiLCJiZWNhbWVSZXNwb25kZXJXaGlsZUFuaW1hdGluZyIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbFNob3VsZFNldFJlc3BvbmRlciIsInN0YXRlIiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlU3RhcnRTaG91bGRTZXRSZXNwb25kZXIiLCJlIiwiY3VycmVudGx5Rm9jdXNlZFRleHRJbnB1dCIsImN1cnJlbnRseUZvY3VzZWRGaWVsZCIsInByb3BzIiwia2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcyIsInRhcmdldCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZSIsInNjcm9sbFJlc3BvbmRlcklzQW5pbWF0aW5nIiwia2V5Ym9hcmROZXZlclBlcnNpc3RUYXBzIiwiaXNUZXh0SW5wdXQiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVSZXNwb25kZXJSZWplY3QiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVUZXJtaW5hdGlvblJlcXVlc3QiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaEVuZCIsIm5hdGl2ZUV2ZW50IiwidG91Y2hlcyIsImxlbmd0aCIsIm9uVG91Y2hFbmQiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaENhbmNlbCIsIm9uVG91Y2hDYW5jZWwiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVSZXNwb25kZXJSZWxlYXNlIiwib25SZXNwb25kZXJSZWxlYXNlIiwib25TY3JvbGxSZXNwb25kZXJLZXlib2FyZERpc21pc3NlZCIsImJsdXJUZXh0SW5wdXQiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVTY3JvbGwiLCJvblNjcm9sbCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVJlc3BvbmRlckdyYW50Iiwib25SZXNwb25kZXJHcmFudCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbEJlZ2luRHJhZyIsImJlZ2luU2Nyb2xsIiwib25TY3JvbGxCZWdpbkRyYWciLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVTY3JvbGxFbmREcmFnIiwidmVsb2NpdHkiLCJ4IiwieSIsImVuZFNjcm9sbCIsIm9uU2Nyb2xsRW5kRHJhZyIsInNjcm9sbFJlc3BvbmRlckhhbmRsZU1vbWVudHVtU2Nyb2xsQmVnaW4iLCJvbk1vbWVudHVtU2Nyb2xsQmVnaW4iLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVNb21lbnR1bVNjcm9sbEVuZCIsIm9uTW9tZW50dW1TY3JvbGxFbmQiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaFN0YXJ0Iiwib25Ub3VjaFN0YXJ0Iiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlVG91Y2hNb3ZlIiwib25Ub3VjaE1vdmUiLCJub3ciLCJ0aW1lU2luY2VMYXN0TW9tZW50dW1TY3JvbGxFbmQiLCJpc0FuaW1hdGluZyIsInNjcm9sbFJlc3BvbmRlckdldFNjcm9sbGFibGVOb2RlIiwiZ2V0U2Nyb2xsYWJsZU5vZGUiLCJmaW5kTm9kZUhhbmRsZSIsInNjcm9sbFJlc3BvbmRlclNjcm9sbFRvIiwiYW5pbWF0ZWQiLCJjb25zb2xlIiwid2FybiIsImRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kIiwiZ2V0Vmlld01hbmFnZXJDb25maWciLCJDb21tYW5kcyIsInNjcm9sbFRvIiwic2Nyb2xsUmVzcG9uZGVyU2Nyb2xsVG9FbmQiLCJvcHRpb25zIiwic2Nyb2xsVG9FbmQiLCJzY3JvbGxSZXNwb25kZXJTY3JvbGxXaXRob3V0QW5pbWF0aW9uVG8iLCJvZmZzZXRYIiwib2Zmc2V0WSIsInNjcm9sbFJlc3BvbmRlclpvb21UbyIsInJlY3QiLCJ6b29tVG9SZWN0Iiwic2Nyb2xsUmVzcG9uZGVyRmxhc2hTY3JvbGxJbmRpY2F0b3JzIiwiZmxhc2hTY3JvbGxJbmRpY2F0b3JzIiwic2Nyb2xsUmVzcG9uZGVyU2Nyb2xsTmF0aXZlSGFuZGxlVG9LZXlib2FyZCIsIm5vZGVIYW5kbGUiLCJhZGRpdGlvbmFsT2Zmc2V0IiwicHJldmVudE5lZ2F0aXZlU2Nyb2xsT2Zmc2V0IiwiYWRkaXRpb25hbFNjcm9sbE9mZnNldCIsIm1lYXN1cmVMYXlvdXQiLCJnZXRJbm5lclZpZXdOb2RlIiwic2Nyb2xsUmVzcG9uZGVyVGV4dElucHV0Rm9jdXNFcnJvciIsInNjcm9sbFJlc3BvbmRlcklucHV0TWVhc3VyZUFuZFNjcm9sbFRvS2V5Ym9hcmQiLCJsZWZ0IiwidG9wIiwid2lkdGgiLCJoZWlnaHQiLCJrZXlib2FyZFNjcmVlblkiLCJnZXQiLCJrZXlib2FyZFdpbGxPcGVuVG8iLCJlbmRDb29yZGluYXRlcyIsInNjcmVlblkiLCJzY3JvbGxPZmZzZXRZIiwiTWF0aCIsIm1heCIsIm1zZyIsImVycm9yIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImFkZExpc3RlbmVyIiwic2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmRXaWxsU2hvdyIsInNjcm9sbFJlc3BvbmRlcktleWJvYXJkV2lsbEhpZGUiLCJzY3JvbGxSZXNwb25kZXJLZXlib2FyZERpZFNob3ciLCJzY3JvbGxSZXNwb25kZXJLZXlib2FyZERpZEhpZGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInJlbW92ZSIsIm9uS2V5Ym9hcmRXaWxsU2hvdyIsIm9uS2V5Ym9hcmRXaWxsSGlkZSIsIm9uS2V5Ym9hcmREaWRTaG93Iiwib25LZXlib2FyZERpZEhpZGUiLCJTY3JvbGxSZXNwb25kZXIiLCJNaXhpbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOztBQUVBLElBQU1BLFVBQVUsR0FBR0MsT0FBTyxDQUFDLFlBQUQsQ0FBMUI7O0FBQ0EsSUFBTUMsZUFBZSxHQUFHRCxPQUFPLENBQUMsaUJBQUQsQ0FBL0I7O0FBQ0EsSUFBTUUsUUFBUSxHQUFHRixPQUFPLENBQUMsVUFBRCxDQUF4Qjs7QUFDQSxJQUFNRyxXQUFXLEdBQUdILE9BQU8sQ0FBQyxhQUFELENBQTNCOztBQUNBLElBQU1JLGNBQWMsR0FBR0osT0FBTyxDQUFDLGdCQUFELENBQTlCOztBQUNBLElBQU1LLFNBQVMsR0FBR0wsT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0FBRUEsSUFBTU0sU0FBUyxHQUFHTixPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFDQSxJQUFNTyxVQUFVLEdBQUdQLE9BQU8sQ0FBQyxZQUFELENBQTFCOztBQUNBLElBQU1RLGNBQWMsR0FBR1IsT0FBTyxDQUFDLHlCQUFELENBQTlCOztBQUNBLElBQU1TLE9BQU8sR0FBR1QsT0FBTyxDQUFDLGtCQUFELENBQXZCOztlQUU0QkEsT0FBTyxDQUFDLGVBQUQsQztJQUE1QlUsaUIsWUFBQUEsaUI7O0FBb0ZQLElBQU1DLHFDQUFxQyxHQUFHLEVBQTlDO0FBVUEsSUFBTUMsb0JBQW9CLEdBQUc7QUFDM0JDLEVBQUFBLDZCQUE2QixFQUFHLElBREw7QUFFM0JDLEVBQUFBLDZCQUE2QixFQUFHLElBRkw7QUFHM0JDLEVBQUFBLDRCQUE0QixFQUFHLElBSEo7QUFJM0JDLEVBQUFBLDRC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RixrQkFBTCxHQUEwQnBGLENBQTFCO0FBQ0Q7O0FBQ0QsU0FBS0csS0FBTCxDQUFXbUcsaUJBQVgsSUFBZ0MsS0FBS25HLEtBQUwsQ0FBV21HLGlCQUFYLENBQTZCdEcsQ0FBN0IsQ0FBaEM7QUFDRCxHQTdqQjBCO0FBK2pCM0JpRyxFQUFBQSw4QkFBOEIsRUFBRSx3Q0FBU2pHLENBQVQsRUFBMkI7QUFDekQsU0FBS29GLGtCQUFMLEdBQTBCLElBQTFCO0FBQ0EsU0FBS2pGLEtBQUwsQ0FBV29HLGlCQUFYLElBQWdDLEtBQUtwRyxLQUFMLENBQVdvRyxpQkFBWCxDQUE2QnZHLENBQTdCLENBQWhDO0FBQ0Q7QUFsa0IwQixDQUE3QjtBQXFrQkEsSUFBTXdHLGVBQWUsR0FBRztBQUN0QkMsRUFBQUEsS0FBSyxFQUFFdkg7QUFEZSxDQUF4QjtBQUlBd0gsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxlQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IERpbWVuc2lvbnMgPSByZXF1aXJlKCdEaW1lbnNpb25zJyk7XG5jb25zdCBGcmFtZVJhdGVMb2dnZXIgPSByZXF1aXJlKCdGcmFtZVJhdGVMb2dnZXInKTtcbmNvbnN0IEtleWJvYXJkID0gcmVxdWlyZSgnS2V5Ym9hcmQnKTtcbmNvbnN0IFJlYWN0TmF0aXZlID0gcmVxdWlyZSgnUmVhY3ROYXRpdmUnKTtcbmNvbnN0IFRleHRJbnB1dFN0YXRlID0gcmVxdWlyZSgnVGV4dElucHV0U3RhdGUnKTtcbmNvbnN0IFVJTWFuYWdlciA9IHJlcXVpcmUoJ1VJTWFuYWdlcicpO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcbmNvbnN0IG51bGx0aHJvd3MgPSByZXF1aXJlKCdudWxsdGhyb3dzJyk7XG5jb25zdCBwZXJmb3JtYW5jZU5vdyA9IHJlcXVpcmUoJ2ZianMvbGliL3BlcmZvcm1hbmNlTm93Jyk7XG5jb25zdCB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG5jb25zdCB7U2Nyb2xsVmlld01hbmFnZXJ9ID0gcmVxdWlyZSgnTmF0aXZlTW9kdWxlcycpO1xuXG5pbXBvcnQgdHlwZSB7UHJlc3NFdmVudCwgU2Nyb2xsRXZlbnR9IGZyb20gJ0NvcmVFdmVudFR5cGVzJztcbmltcG9ydCB0eXBlIHtLZXlib2FyZEV2ZW50fSBmcm9tICdLZXlib2FyZCc7XG5pbXBvcnQgdHlwZSBFbWl0dGVyU3Vic2NyaXB0aW9uIGZyb20gJ0VtaXR0ZXJTdWJzY3JpcHRpb24nO1xuXG4vKipcbiAqIE1peGluIHRoYXQgY2FuIGJlIGludGVncmF0ZWQgaW4gb3JkZXIgdG8gaGFuZGxlIHNjcm9sbGluZyB0aGF0IHBsYXlzIHdlbGxcbiAqIHdpdGggYFJlc3BvbmRlckV2ZW50UGx1Z2luYC4gSW50ZWdyYXRlIHdpdGggeW91ciBwbGF0Zm9ybSBzcGVjaWZpYyBzY3JvbGxcbiAqIHZpZXdzLCBvciBldmVuIHlvdXIgY3VzdG9tIGJ1aWx0IChldmVyeS1mcmFtZSBhbmltYXRpbmcpIHNjcm9sbCB2aWV3cyBzbyB0aGF0XG4gKiBhbGwgb2YgdGhlc2Ugc3lzdGVtcyBwbGF5IHdlbGwgd2l0aCB0aGUgYFJlc3BvbmRlckV2ZW50UGx1Z2luYC5cbiAqXG4gKiBpT1Mgc2Nyb2xsIGV2ZW50IHRpbWluZyBudWFuY2VzOlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqXG4gKiBTY3JvbGxpbmcgd2l0aG91dCBib3VuY2luZywgaWYgeW91IHRvdWNoIGRvd246XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogMS4gYG9uTW9tZW50dW1TY3JvbGxCZWdpbmAgKHdoZW4gYW5pbWF0aW9uIGJlZ2lucyBhZnRlciBsZXR0aW5nIHVwKVxuICogICAgLi4uIHBoeXNpY2FsIHRvdWNoIHN0YXJ0cyAuLi5cbiAqIDIuIGBvblRvdWNoU3RhcnRDYXB0dXJlYCAgICh3aGVuIHlvdSBwcmVzcyBkb3duIHRvIHN0b3AgdGhlIHNjcm9sbClcbiAqIDMuIGBvblRvdWNoU3RhcnRgICAgICAgICAgIChzYW1lLCBidXQgYnViYmxlIHBoYXNlKVxuICogNC4gYG9uUmVzcG9uZGVyUmVsZWFzZWAgICAgKHdoZW4gbGlmdGluZyB1cCAtIHlvdSBjb3VsZCBwYXVzZSBmb3JldmVyIGJlZm9yZSAqIGxpZnRpbmcpXG4gKiA1LiBgb25Nb21lbnR1bVNjcm9sbEVuZGBcbiAqXG4gKlxuICogU2Nyb2xsaW5nIHdpdGggYm91bmNpbmcsIGlmIHlvdSB0b3VjaCBkb3duOlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIDEuIGBvbk1vbWVudHVtU2Nyb2xsQmVnaW5gICh3aGVuIGFuaW1hdGlvbiBiZWdpbnMgYWZ0ZXIgbGV0dGluZyB1cClcbiAqICAgIC4uLiBib3VuY2UgYmVnaW5zIC4uLlxuICogICAgLi4uIHNvbWUgdGltZSBlbGFwc2VzIC4uLlxuICogICAgLi4uIHBoeXNpY2FsIHRvdWNoIGR1cmluZyBib3VuY2UgLi4uXG4gKiAyLiBgb25Nb21lbnR1bVNjcm9sbEVuZGAgICAoTWFrZXMgbm8gc2Vuc2Ugd2h5IHRoaXMgb2NjdXJzIGZpcnN0IGR1cmluZyBib3VuY2UpXG4gKiAzLiBgb25Ub3VjaFN0YXJ0Q2FwdHVyZWAgICAoaW1tZWRpYXRlbHkgYWZ0ZXIgYG9uTW9tZW50dW1TY3JvbGxFbmRgKVxuICogNC4gYG9uVG91Y2hTdGFydGAgICAgICAgICAgKHNhbWUsIGJ1dCBidWJibGUgcGhhc2UpXG4gKiA1LiBgb25Ub3VjaEVuZGAgICAgICAgICAgICAoWW91IGNvdWxkIGhvbGQgdGhlIHRvdWNoIHN0YXJ0IGZvciBhIGxvbmcgdGltZSlcbiAqIDYuIGBvbk1vbWVudHVtU2Nyb2xsQmVnaW5gIChXaGVuIHJlbGVhc2luZyB0aGUgdmlldyBzdGFydHMgYm91bmNpbmcgYmFjaylcbiAqXG4gKiBTbyB3aGVuIHdlIHJlY2VpdmUgYW4gYG9uVG91Y2hTdGFydGAsIGhvdyBjYW4gd2UgdGVsbCBpZiB3ZSBhcmUgdG91Y2hpbmdcbiAqICpkdXJpbmcqIGFuIGFuaW1hdGlvbiAod2hpY2ggdGhlbiBjYXVzZXMgdGhlIGFuaW1hdGlvbiB0byBzdG9wKT8gVGhlIG9ubHkgd2F5XG4gKiB0byB0ZWxsIGlzIGlmIHRoZSBgdG91Y2hTdGFydGAgb2NjdXJyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlXG4gKiBgb25Nb21lbnR1bVNjcm9sbEVuZGAuXG4gKlxuICogVGhpcyBpcyBhYnN0cmFjdGVkIG91dCBmb3IgeW91LCBzbyB5b3UgY2FuIGp1c3QgY2FsbCB0aGlzLnNjcm9sbFJlc3BvbmRlcklzQW5pbWF0aW5nKCkgaWZcbiAqIG5lY2Vzc2FyeVxuICpcbiAqIGBTY3JvbGxSZXNwb25kZXJgIGFsc28gaW5jbHVkZXMgbG9naWMgZm9yIGJsdXJyaW5nIGEgY3VycmVudGx5IGZvY3VzZWQgaW5wdXRcbiAqIGlmIG9uZSBpcyBmb2N1c2VkIHdoaWxlIHNjcm9sbGluZy4gVGhlIGBTY3JvbGxSZXNwb25kZXJgIGlzIGEgbmF0dXJhbCBwbGFjZVxuICogdG8gcHV0IHRoaXMgbG9naWMgc2luY2UgaXQgY2FuIHN1cHBvcnQgbm90IGRpc21pc3NpbmcgdGhlIGtleWJvYXJkIHdoaWxlXG4gKiBzY3JvbGxpbmcsIHVubGVzcyBhIHJlY29nbml6ZWQgXCJ0YXBcIi1saWtlIGdlc3R1cmUgaGFzIG9jY3VycmVkLlxuICpcbiAqIFRoZSBwdWJsaWMgbGlmZWN5Y2xlIEFQSSBpbmNsdWRlcyBldmVudHMgZm9yIGtleWJvYXJkIGludGVyYWN0aW9uLCByZXNwb25kZXJcbiAqIGludGVyYWN0aW9uLCBhbmQgc2Nyb2xsaW5nIChhbW9uZyBvdGhlcnMpLiBUaGUga2V5Ym9hcmQgY2FsbGJhY2tzXG4gKiBgb25LZXlib2FyZFdpbGwvRGlkLypgIGFyZSAqZ2xvYmFsKiBldmVudHMsIGJ1dCBhcmUgaW52b2tlZCBvbiBzY3JvbGxcbiAqIHJlc3BvbmRlcidzIHByb3BzIHNvIHRoYXQgeW91IGNhbiBndWFyYW50ZWUgdGhhdCB0aGUgc2Nyb2xsIHJlc3BvbmRlcidzXG4gKiBpbnRlcm5hbCBzdGF0ZSBoYXMgYmVlbiB1cGRhdGVkIGFjY29yZGluZ2x5IChhbmQgZGV0ZXJtaW5pc3RpY2FsbHkpIGJ5XG4gKiB0aGUgdGltZSB0aGUgcHJvcHMgY2FsbGJhY2tzIGFyZSBpbnZva2UuIE90aGVyd2lzZSwgeW91IHdvdWxkIGFsd2F5cyB3b25kZXJcbiAqIGlmIHRoZSBzY3JvbGwgcmVzcG9uZGVyIGlzIGN1cnJlbnRseSBpbiBhIHN0YXRlIHdoZXJlIGl0IHJlY29nbml6ZXMgbmV3XG4gKiBrZXlib2FyZCBwb3NpdGlvbnMgZXRjLiBJZiBjb29yZGluYXRpbmcgc2Nyb2xsaW5nIHdpdGgga2V5Ym9hcmQgbW92ZW1lbnQsXG4gKiAqYWx3YXlzKiB1c2UgdGhlc2UgaG9va3MgaW5zdGVhZCBvZiBsaXN0ZW5pbmcgdG8geW91ciBvd24gZ2xvYmFsIGtleWJvYXJkXG4gKiBldmVudHMuXG4gKlxuICogUHVibGljIGtleWJvYXJkIGxpZmVjeWNsZSBBUEk6IChwcm9wcyBjYWxsYmFja3MpXG4gKlxuICogU3RhbmRhcmQgS2V5Ym9hcmQgQXBwZWFyYW5jZSBTZXF1ZW5jZTpcbiAqXG4gKiAgIHRoaXMucHJvcHMub25LZXlib2FyZFdpbGxTaG93XG4gKiAgIHRoaXMucHJvcHMub25LZXlib2FyZERpZFNob3dcbiAqXG4gKiBgb25TY3JvbGxSZXNwb25kZXJLZXlib2FyZERpc21pc3NlZGAgd2lsbCBiZSBpbnZva2VkIGlmIGFuIGFwcHJvcHJpYXRlXG4gKiB0YXAgaW5zaWRlIHRoZSBzY3JvbGwgcmVzcG9uZGVyJ3Mgc2Nyb2xsYWJsZSByZWdpb24gd2FzIHJlc3BvbnNpYmxlXG4gKiBmb3IgdGhlIGRpc21pc3NhbCBvZiB0aGUga2V5Ym9hcmQuIFRoZXJlIGFyZSBvdGhlciByZWFzb25zIHdoeSB0aGVcbiAqIGtleWJvYXJkIGNvdWxkIGJlIGRpc21pc3NlZC5cbiAqXG4gKiAgIHRoaXMucHJvcHMub25TY3JvbGxSZXNwb25kZXJLZXlib2FyZERpc21pc3NlZFxuICpcbiAqIFN0YW5kYXJkIEtleWJvYXJkIEhpZGUgU2VxdWVuY2U6XG4gKlxuICogICB0aGlzLnByb3BzLm9uS2V5Ym9hcmRXaWxsSGlkZVxuICogICB0aGlzLnByb3BzLm9uS2V5Ym9hcmREaWRIaWRlXG4gKi9cblxuY29uc3QgSVNfQU5JTUFUSU5HX1RPVUNIX1NUQVJUX1RIUkVTSE9MRF9NUyA9IDE2O1xuXG5leHBvcnQgdHlwZSBTdGF0ZSA9IHt8XG4gIGlzVG91Y2hpbmc6IGJvb2xlYW4sXG4gIGxhc3RNb21lbnR1bVNjcm9sbEJlZ2luVGltZTogbnVtYmVyLFxuICBsYXN0TW9tZW50dW1TY3JvbGxFbmRUaW1lOiBudW1iZXIsXG4gIG9ic2VydmVkU2Nyb2xsU2luY2VCZWNvbWluZ1Jlc3BvbmRlcjogYm9vbGVhbixcbiAgYmVjYW1lUmVzcG9uZGVyV2hpbGVBbmltYXRpbmc6IGJvb2xlYW4sXG58fTtcblxuY29uc3QgU2Nyb2xsUmVzcG9uZGVyTWl4aW4gPSB7XG4gIF9zdWJzY3JpcHRpb25LZXlib2FyZFdpbGxTaG93OiAobnVsbDogP0VtaXR0ZXJTdWJzY3JpcHRpb24pLFxuICBfc3Vic2NyaXB0aW9uS2V5Ym9hcmRXaWxsSGlkZTogKG51bGw6ID9FbWl0dGVyU3Vic2NyaXB0aW9uKSxcbiAgX3N1YnNjcmlwdGlvbktleWJvYXJkRGlkU2hvdzogKG51bGw6ID9FbWl0dGVyU3Vic2NyaXB0aW9uKSxcbiAgX3N1YnNjcmlwdGlvbktleWJvYXJkRGlkSGlkZTogKG51bGw6ID9FbWl0dGVyU3Vic2NyaXB0aW9uKSxcbiAgc2Nyb2xsUmVzcG9uZGVyTWl4aW5HZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCk6IFN0YXRlIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNUb3VjaGluZzogZmFsc2UsXG4gICAgICBsYXN0TW9tZW50dW1TY3JvbGxCZWdpblRpbWU6IDAsXG4gICAgICBsYXN0TW9tZW50dW1TY3JvbGxFbmRUaW1lOiAwLFxuXG4gICAgICAvLyBSZXNldCB0byBmYWxzZSBldmVyeSB0aW1lIGJlY29tZXMgcmVzcG9uZGVyLiBUaGlzIGlzIHVzZWQgdG86XG4gICAgICAvLyAtIERldGVybWluZSBpZiB0aGUgc2Nyb2xsIHZpZXcgaGFzIGJlZW4gc2Nyb2xsZWQgYW5kIHRoZXJlZm9yZSBzaG91bGRcbiAgICAgIC8vIHJlZnVzZSB0byBnaXZlIHVwIGl0cyByZXNwb25kZXIgbG9jay5cbiAgICAgIC8vIC0gRGV0ZXJtaW5lIGlmIHJlbGVhc2luZyBzaG91bGQgZGlzbWlzcyB0aGUga2V5Ym9hcmQgd2hlbiB3ZSBhcmUgaW5cbiAgICAgIC8vIHRhcC10by1kaXNtaXNzIG1vZGUgKHRoaXMucHJvcHMua2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcyAhPT0gJ2Fsd2F5cycpLlxuICAgICAgb2JzZXJ2ZWRTY3JvbGxTaW5jZUJlY29taW5nUmVzcG9uZGVyOiBmYWxzZSxcbiAgICAgIGJlY2FtZVJlc3BvbmRlcldoaWxlQW5pbWF0aW5nOiBmYWxzZSxcbiAgICB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2UgdGhpcyBmcm9tIGFuIGBvblNjcm9sbGAgZXZlbnQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVTY3JvbGxTaG91bGRTZXRSZXNwb25kZXI6IGZ1bmN0aW9uKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmlzVG91Y2hpbmc7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1lcmVseSB0b3VjaCBzdGFydGluZyBpcyBub3Qgc3VmZmljaWVudCBmb3IgYSBzY3JvbGwgdmlldyB0byBiZWNvbWUgdGhlXG4gICAqIHJlc3BvbmRlci4gQmVpbmcgdGhlIFwicmVzcG9uZGVyXCIgbWVhbnMgdGhhdCB0aGUgdmVyeSBuZXh0IHRvdWNoIG1vdmUvZW5kXG4gICAqIGV2ZW50IHdpbGwgcmVzdWx0IGluIGFuIGFjdGlvbi9tb3ZlbWVudC5cbiAgICpcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25TdGFydFNob3VsZFNldFJlc3BvbmRlcmAgZXZlbnQuXG4gICAqXG4gICAqIGBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyYCBpcyB1c2VkIHdoZW4gdGhlIG5leHQgbW92ZS9lbmQgd2lsbCB0cmlnZ2VyXG4gICAqIHNvbWUgVUkgbW92ZW1lbnQvYWN0aW9uLCBidXQgd2hlbiB5b3Ugd2FudCB0byB5aWVsZCBwcmlvcml0eSB0byB2aWV3c1xuICAgKiBuZXN0ZWQgaW5zaWRlIG9mIHRoZSB2aWV3LlxuICAgKlxuICAgKiBUaGVyZSBtYXkgYmUgc29tZSBjYXNlcyB3aGVyZSBzY3JvbGwgdmlld3MgYWN0dWFsbHkgc2hvdWxkIHJldHVybiBgdHJ1ZWBcbiAgICogZnJvbSBgb25TdGFydFNob3VsZFNldFJlc3BvbmRlcmA6IEFueSB0aW1lIHdlIGFyZSBkZXRlY3RpbmcgYSBzdGFuZGFyZCB0YXBcbiAgICogdGhhdCBnaXZlcyBwcmlvcml0eSB0byBuZXN0ZWQgdmlld3MuXG4gICAqXG4gICAqIC0gSWYgYSBzaW5nbGUgdGFwIG9uIHRoZSBzY3JvbGwgdmlldyB0cmlnZ2VycyBhbiBhY3Rpb24gc3VjaCBhc1xuICAgKiAgIHJlY2VudGVyaW5nIGEgbWFwIHN0eWxlIHZpZXcgeWV0IHdhbnRzIHRvIGdpdmUgcHJpb3JpdHkgdG8gaW50ZXJhY3Rpb25cbiAgICogICB2aWV3cyBpbnNpZGUgKHN1Y2ggYXMgZHJvcHBlZCBwaW5zIG9yIGxhYmVscyksIHRoZW4gd2Ugd291bGQgcmV0dXJuIHRydWVcbiAgICogICBmcm9tIHRoaXMgbWV0aG9kIHdoZW4gdGhlcmUgaXMgYSBzaW5nbGUgdG91Y2guXG4gICAqXG4gICAqIC0gU2ltaWxhciB0byB0aGUgcHJldmlvdXMgY2FzZSwgaWYgYSB0d28gZmluZ2VyIFwidGFwXCIgc2hvdWxkIHRyaWdnZXIgYVxuICAgKiAgIHpvb20sIHdlIHdvdWxkIGNoZWNrIHRoZSBgdG91Y2hlc2AgY291bnQsIGFuZCBpZiBgPj0gMmAsIHdlIHdvdWxkIHJldHVyblxuICAgKiAgIHRydWUuXG4gICAqXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVTdGFydFNob3VsZFNldFJlc3BvbmRlcjogZnVuY3Rpb24oXG4gICAgZTogUHJlc3NFdmVudCxcbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgY3VycmVudGx5Rm9jdXNlZFRleHRJbnB1dCA9IFRleHRJbnB1dFN0YXRlLmN1cnJlbnRseUZvY3VzZWRGaWVsZCgpO1xuXG4gICAgaWYgKFxuICAgICAgdGhpcy5wcm9wcy5rZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzID09PSAnaGFuZGxlZCcgJiZcbiAgICAgIGN1cnJlbnRseUZvY3VzZWRUZXh0SW5wdXQgIT0gbnVsbCAmJlxuICAgICAgZS50YXJnZXQgIT09IGN1cnJlbnRseUZvY3VzZWRUZXh0SW5wdXRcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZXJlIGFyZSB0aW1lcyB3aGVuIHRoZSBzY3JvbGwgdmlldyB3YW50cyB0byBiZWNvbWUgdGhlIHJlc3BvbmRlclxuICAgKiAobWVhbmluZyByZXNwb25kIHRvIHRoZSBuZXh0IGltbWVkaWF0ZSBgdG91Y2hTdGFydC90b3VjaEVuZGApLCBpbiBhIHdheVxuICAgKiB0aGF0ICpkb2Vzbid0KiBnaXZlIHByaW9yaXR5IHRvIG5lc3RlZCB2aWV3cyAoaGVuY2UgdGhlIGNhcHR1cmUgcGhhc2UpOlxuICAgKlxuICAgKiAtIEN1cnJlbnRseSBhbmltYXRpbmcuXG4gICAqIC0gVGFwcGluZyBhbnl3aGVyZSB0aGF0IGlzIG5vdCBhIHRleHQgaW5wdXQsIHdoaWxlIHRoZSBrZXlib2FyZCBpc1xuICAgKiAgIHVwICh3aGljaCBzaG91bGQgZGlzbWlzcyB0aGUga2V5Ym9hcmQpLlxuICAgKlxuICAgKiBJbnZva2UgdGhpcyBmcm9tIGFuIGBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZWAgZXZlbnQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVTdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmU6IGZ1bmN0aW9uKFxuICAgIGU6IFByZXNzRXZlbnQsXG4gICk6IGJvb2xlYW4ge1xuICAgIC8vIFRoZSBzY3JvbGwgdmlldyBzaG91bGQgcmVjZWl2ZSB0YXBzIGluc3RlYWQgb2YgaXRzIGRlc2NlbmRhbnRzIGlmOlxuICAgIC8vICogaXQgaXMgYWxyZWFkeSBhbmltYXRpbmcvZGVjZWxlcmF0aW5nXG4gICAgaWYgKHRoaXMuc2Nyb2xsUmVzcG9uZGVySXNBbmltYXRpbmcoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gKiB0aGUga2V5Ym9hcmQgaXMgdXAsIGtleWJvYXJkU2hvdWxkUGVyc2lzdFRhcHMgaXMgJ25ldmVyJyAodGhlIGRlZmF1bHQpLFxuICAgIC8vIGFuZCBhIG5ldyB0b3VjaCBzdGFydHMgd2l0aCBhIG5vbi10ZXh0aW5wdXQgdGFyZ2V0IChpbiB3aGljaCBjYXNlIHRoZVxuICAgIC8vIGZpcnN0IHRhcCBzaG91bGQgYmUgc2VudCB0byB0aGUgc2Nyb2xsIHZpZXcgYW5kIGRpc21pc3MgdGhlIGtleWJvYXJkLFxuICAgIC8vIHRoZW4gdGhlIHNlY29uZCB0YXAgZ29lcyB0byB0aGUgYWN0dWFsIGludGVyaW9yIHZpZXcpXG4gICAgY29uc3QgY3VycmVudGx5Rm9jdXNlZFRleHRJbnB1dCA9IFRleHRJbnB1dFN0YXRlLmN1cnJlbnRseUZvY3VzZWRGaWVsZCgpO1xuICAgIGNvbnN0IHtrZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qga2V5Ym9hcmROZXZlclBlcnNpc3RUYXBzID1cbiAgICAgICFrZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzIHx8IGtleWJvYXJkU2hvdWxkUGVyc2lzdFRhcHMgPT09ICduZXZlcic7XG4gICAgaWYgKFxuICAgICAga2V5Ym9hcmROZXZlclBlcnNpc3RUYXBzICYmXG4gICAgICBjdXJyZW50bHlGb2N1c2VkVGV4dElucHV0ICE9IG51bGwgJiZcbiAgICAgIGUudGFyZ2V0ICYmXG4gICAgICAhVGV4dElucHV0U3RhdGUuaXNUZXh0SW5wdXQoZS50YXJnZXQpXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uUmVzcG9uZGVyUmVqZWN0YCBldmVudC5cbiAgICpcbiAgICogU29tZSBvdGhlciBlbGVtZW50IGlzIG5vdCB5aWVsZGluZyBpdHMgcm9sZSBhcyByZXNwb25kZXIuIE5vcm1hbGx5LCB3ZSdkXG4gICAqIGp1c3QgZGlzYWJsZSB0aGUgYFVJU2Nyb2xsVmlld2AsIGJ1dCBhIHRvdWNoIGhhcyBhbHJlYWR5IGJlZ2FuIG9uIGl0LCB0aGVcbiAgICogYFVJU2Nyb2xsVmlld2Agd2lsbCBub3QgYWNjZXB0IGJlaW5nIGRpc2FibGVkIGFmdGVyIHRoYXQuIFRoZSBlYXNpZXN0XG4gICAqIHNvbHV0aW9uIGZvciBub3cgaXMgdG8gYWNjZXB0IHRoZSBsaW1pdGF0aW9uIG9mIGRpc2FsbG93aW5nIHRoaXNcbiAgICogYWx0b2dldGhlci4gVG8gaW1wcm92ZSB0aGlzLCBmaW5kIGEgd2F5IHRvIGRpc2FibGUgdGhlIGBVSVNjcm9sbFZpZXdgIGFmdGVyXG4gICAqIGEgdG91Y2ggaGFzIGFscmVhZHkgc3RhcnRlZC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlckhhbmRsZVJlc3BvbmRlclJlamVjdDogZnVuY3Rpb24oKSB7fSxcblxuICAvKipcbiAgICogV2Ugd2lsbCBhbGxvdyB0aGUgc2Nyb2xsIHZpZXcgdG8gZ2l2ZSB1cCBpdHMgbG9jayBpZmYgaXQgYWNxdWlyZWQgdGhlIGxvY2tcbiAgICogZHVyaW5nIGFuIGFuaW1hdGlvbi4gVGhpcyBpcyBhIHZlcnkgdXNlZnVsIGRlZmF1bHQgdGhhdCBoYXBwZW5zIHRvIHNhdGlzZnlcbiAgICogbWFueSBjb21tb24gdXNlciBleHBlcmllbmNlcy5cbiAgICpcbiAgICogLSBTdG9wIGEgc2Nyb2xsIG9uIHRoZSBsZWZ0IGVkZ2UsIHRoZW4gdHVybiB0aGF0IGludG8gYW4gb3V0ZXIgdmlldydzXG4gICAqICAgYmFja3N3aXBlLlxuICAgKiAtIFN0b3AgYSBzY3JvbGwgbWlkLWJvdW5jZSBhdCB0aGUgdG9wLCBjb250aW51ZSBwdWxsaW5nIHRvIGhhdmUgdGhlIG91dGVyXG4gICAqICAgdmlldyBkaXNtaXNzLlxuICAgKiAtIEhvd2V2ZXIsIHdpdGhvdXQgY2F0Y2hpbmcgdGhlIHNjcm9sbCB2aWV3IG1pZC1ib3VuY2UgKHdoaWxlIGl0IGlzXG4gICAqICAgbW90aW9ubGVzcyksIGlmIHlvdSBkcmFnIGZhciBlbm91Z2ggZm9yIHRoZSBzY3JvbGwgdmlldyB0byBiZWNvbWVcbiAgICogICByZXNwb25kZXIgKGFuZCB0aGVyZWZvcmUgZHJhZyB0aGUgc2Nyb2xsIHZpZXcgYSBiaXQpLCBhbnkgYmFja3N3aXBlXG4gICAqICAgbmF2aWdhdGlvbiBvZiBhIHN3aXBlIGdlc3R1cmUgaGlnaGVyIGluIHRoZSB2aWV3IGhpZXJhcmNoeSwgc2hvdWxkIGJlXG4gICAqICAgcmVqZWN0ZWQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVUZXJtaW5hdGlvblJlcXVlc3Q6IGZ1bmN0aW9uKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5zdGF0ZS5vYnNlcnZlZFNjcm9sbFNpbmNlQmVjb21pbmdSZXNwb25kZXI7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uVG91Y2hFbmRgIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1ByZXNzRXZlbnR9IGUgRXZlbnQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaEVuZDogZnVuY3Rpb24oZTogUHJlc3NFdmVudCkge1xuICAgIGNvbnN0IG5hdGl2ZUV2ZW50ID0gZS5uYXRpdmVFdmVudDtcbiAgICB0aGlzLnN0YXRlLmlzVG91Y2hpbmcgPSBuYXRpdmVFdmVudC50b3VjaGVzLmxlbmd0aCAhPT0gMDtcbiAgICB0aGlzLnByb3BzLm9uVG91Y2hFbmQgJiYgdGhpcy5wcm9wcy5vblRvdWNoRW5kKGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2UgdGhpcyBmcm9tIGFuIGBvblRvdWNoQ2FuY2VsYCBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtQcmVzc0V2ZW50fSBlIEV2ZW50LlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVySGFuZGxlVG91Y2hDYW5jZWw6IGZ1bmN0aW9uKGU6IFByZXNzRXZlbnQpIHtcbiAgICB0aGlzLnN0YXRlLmlzVG91Y2hpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnByb3BzLm9uVG91Y2hDYW5jZWwgJiYgdGhpcy5wcm9wcy5vblRvdWNoQ2FuY2VsKGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2UgdGhpcyBmcm9tIGFuIGBvblJlc3BvbmRlclJlbGVhc2VgIGV2ZW50LlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVySGFuZGxlUmVzcG9uZGVyUmVsZWFzZTogZnVuY3Rpb24oZTogUHJlc3NFdmVudCkge1xuICAgIHRoaXMucHJvcHMub25SZXNwb25kZXJSZWxlYXNlICYmIHRoaXMucHJvcHMub25SZXNwb25kZXJSZWxlYXNlKGUpO1xuXG4gICAgLy8gQnkgZGVmYXVsdCBzY3JvbGwgdmlld3Mgd2lsbCB1bmZvY3VzIGEgdGV4dEZpZWxkXG4gICAgLy8gaWYgYW5vdGhlciB0b3VjaCBvY2N1cnMgb3V0c2lkZSBvZiBpdFxuICAgIGNvbnN0IGN1cnJlbnRseUZvY3VzZWRUZXh0SW5wdXQgPSBUZXh0SW5wdXRTdGF0ZS5jdXJyZW50bHlGb2N1c2VkRmllbGQoKTtcbiAgICBpZiAoXG4gICAgICB0aGlzLnByb3BzLmtleWJvYXJkU2hvdWxkUGVyc2lzdFRhcHMgIT09IHRydWUgJiZcbiAgICAgIHRoaXMucHJvcHMua2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcyAhPT0gJ2Fsd2F5cycgJiZcbiAgICAgIGN1cnJlbnRseUZvY3VzZWRUZXh0SW5wdXQgIT0gbnVsbCAmJlxuICAgICAgZS50YXJnZXQgIT09IGN1cnJlbnRseUZvY3VzZWRUZXh0SW5wdXQgJiZcbiAgICAgICF0aGlzLnN0YXRlLm9ic2VydmVkU2Nyb2xsU2luY2VCZWNvbWluZ1Jlc3BvbmRlciAmJlxuICAgICAgIXRoaXMuc3RhdGUuYmVjYW1lUmVzcG9uZGVyV2hpbGVBbmltYXRpbmdcbiAgICApIHtcbiAgICAgIHRoaXMucHJvcHMub25TY3JvbGxSZXNwb25kZXJLZXlib2FyZERpc21pc3NlZCAmJlxuICAgICAgICB0aGlzLnByb3BzLm9uU2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmREaXNtaXNzZWQoZSk7XG4gICAgICBUZXh0SW5wdXRTdGF0ZS5ibHVyVGV4dElucHV0KGN1cnJlbnRseUZvY3VzZWRUZXh0SW5wdXQpO1xuICAgIH1cbiAgfSxcblxuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVTY3JvbGw6IGZ1bmN0aW9uKGU6IFNjcm9sbEV2ZW50KSB7XG4gICAgdGhpcy5zdGF0ZS5vYnNlcnZlZFNjcm9sbFNpbmNlQmVjb21pbmdSZXNwb25kZXIgPSB0cnVlO1xuICAgIHRoaXMucHJvcHMub25TY3JvbGwgJiYgdGhpcy5wcm9wcy5vblNjcm9sbChlKTtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25SZXNwb25kZXJHcmFudGAgZXZlbnQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVSZXNwb25kZXJHcmFudDogZnVuY3Rpb24oZTogU2Nyb2xsRXZlbnQpIHtcbiAgICB0aGlzLnN0YXRlLm9ic2VydmVkU2Nyb2xsU2luY2VCZWNvbWluZ1Jlc3BvbmRlciA9IGZhbHNlO1xuICAgIHRoaXMucHJvcHMub25SZXNwb25kZXJHcmFudCAmJiB0aGlzLnByb3BzLm9uUmVzcG9uZGVyR3JhbnQoZSk7XG4gICAgdGhpcy5zdGF0ZS5iZWNhbWVSZXNwb25kZXJXaGlsZUFuaW1hdGluZyA9IHRoaXMuc2Nyb2xsUmVzcG9uZGVySXNBbmltYXRpbmcoKTtcbiAgfSxcblxuICAvKipcbiAgICogVW5mb3J0dW5hdGVseSwgYG9uU2Nyb2xsQmVnaW5EcmFnYCBhbHNvIGZpcmVzIHdoZW4gKnN0b3BwaW5nKiB0aGUgc2Nyb2xsXG4gICAqIGFuaW1hdGlvbiwgYW5kIHRoZXJlJ3Mgbm90IGFuIGVhc3kgd2F5IHRvIGRpc3Rpbmd1aXNoIGEgZHJhZyB2cy4gc3RvcHBpbmdcbiAgICogbW9tZW50dW0uXG4gICAqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uU2Nyb2xsQmVnaW5EcmFnYCBldmVudC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbEJlZ2luRHJhZzogZnVuY3Rpb24oZTogU2Nyb2xsRXZlbnQpIHtcbiAgICBGcmFtZVJhdGVMb2dnZXIuYmVnaW5TY3JvbGwoKTsgLy8gVE9ETzogdHJhY2sgYWxsIHNjcm9sbHMgYWZ0ZXIgaW1wbGVtZW50aW5nIG9uU2Nyb2xsRW5kQW5pbWF0aW9uXG4gICAgdGhpcy5wcm9wcy5vblNjcm9sbEJlZ2luRHJhZyAmJiB0aGlzLnByb3BzLm9uU2Nyb2xsQmVnaW5EcmFnKGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2UgdGhpcyBmcm9tIGFuIGBvblNjcm9sbEVuZERyYWdgIGV2ZW50LlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVySGFuZGxlU2Nyb2xsRW5kRHJhZzogZnVuY3Rpb24oZTogU2Nyb2xsRXZlbnQpIHtcbiAgICBjb25zdCB7dmVsb2NpdHl9ID0gZS5uYXRpdmVFdmVudDtcbiAgICAvLyAtIElmIHdlIGFyZSBhbmltYXRpbmcsIHRoZW4gdGhpcyBpcyBhIFwiZHJhZ1wiIHRoYXQgaXMgc3RvcHBpbmcgdGhlIHNjcm9sbHZpZXcgYW5kIG1vbWVudHVtIGVuZFxuICAgIC8vICAgd2lsbCBmaXJlLlxuICAgIC8vIC0gSWYgdmVsb2NpdHkgaXMgbm9uLXplcm8sIHRoZW4gdGhlIGludGVyYWN0aW9uIHdpbGwgc3RvcCB3aGVuIG1vbWVudHVtIHNjcm9sbCBlbmRzIG9yXG4gICAgLy8gICBhbm90aGVyIGRyYWcgc3RhcnRzIGFuZCBlbmRzLlxuICAgIC8vIC0gSWYgd2UgZG9uJ3QgZ2V0IHZlbG9jaXR5LCBiZXR0ZXIgdG8gc3RvcCB0aGUgaW50ZXJhY3Rpb24gdHdpY2UgdGhhbiBub3Qgc3RvcCBpdC5cbiAgICBpZiAoXG4gICAgICAhdGhpcy5zY3JvbGxSZXNwb25kZXJJc0FuaW1hdGluZygpICYmXG4gICAgICAoIXZlbG9jaXR5IHx8ICh2ZWxvY2l0eS54ID09PSAwICYmIHZlbG9jaXR5LnkgPT09IDApKVxuICAgICkge1xuICAgICAgRnJhbWVSYXRlTG9nZ2VyLmVuZFNjcm9sbCgpO1xuICAgIH1cbiAgICB0aGlzLnByb3BzLm9uU2Nyb2xsRW5kRHJhZyAmJiB0aGlzLnByb3BzLm9uU2Nyb2xsRW5kRHJhZyhlKTtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25Nb21lbnR1bVNjcm9sbEJlZ2luYCBldmVudC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlckhhbmRsZU1vbWVudHVtU2Nyb2xsQmVnaW46IGZ1bmN0aW9uKGU6IFNjcm9sbEV2ZW50KSB7XG4gICAgdGhpcy5zdGF0ZS5sYXN0TW9tZW50dW1TY3JvbGxCZWdpblRpbWUgPSBwZXJmb3JtYW5jZU5vdygpO1xuICAgIHRoaXMucHJvcHMub25Nb21lbnR1bVNjcm9sbEJlZ2luICYmIHRoaXMucHJvcHMub25Nb21lbnR1bVNjcm9sbEJlZ2luKGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2UgdGhpcyBmcm9tIGFuIGBvbk1vbWVudHVtU2Nyb2xsRW5kYCBldmVudC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlckhhbmRsZU1vbWVudHVtU2Nyb2xsRW5kOiBmdW5jdGlvbihlOiBTY3JvbGxFdmVudCkge1xuICAgIEZyYW1lUmF0ZUxvZ2dlci5lbmRTY3JvbGwoKTtcbiAgICB0aGlzLnN0YXRlLmxhc3RNb21lbnR1bVNjcm9sbEVuZFRpbWUgPSBwZXJmb3JtYW5jZU5vdygpO1xuICAgIHRoaXMucHJvcHMub25Nb21lbnR1bVNjcm9sbEVuZCAmJiB0aGlzLnByb3BzLm9uTW9tZW50dW1TY3JvbGxFbmQoZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uVG91Y2hTdGFydGAgZXZlbnQuXG4gICAqXG4gICAqIFNpbmNlIHdlIGtub3cgdGhhdCB0aGUgYFNpbXBsZUV2ZW50UGx1Z2luYCBvY2N1cnMgbGF0ZXIgaW4gdGhlIHBsdWdpblxuICAgKiBvcmRlciwgYWZ0ZXIgYFJlc3BvbmRlckV2ZW50UGx1Z2luYCwgd2UgY2FuIGRldGVjdCB0aGF0IHdlIHdlcmUgKm5vdCpcbiAgICogcGVybWl0dGVkIHRvIGJlIHRoZSByZXNwb25kZXIgKHByZXN1bWFibHkgYmVjYXVzZSBhIGNvbnRhaW5lZCB2aWV3IGJlY2FtZVxuICAgKiByZXNwb25kZXIpLiBUaGUgYG9uUmVzcG9uZGVyUmVqZWN0YCB3b24ndCBmaXJlIGluIHRoYXQgY2FzZSAtIGl0IG9ubHlcbiAgICogZmlyZXMgd2hlbiBhICpjdXJyZW50KiByZXNwb25kZXIgcmVqZWN0cyBvdXIgcmVxdWVzdC5cbiAgICpcbiAgICogQHBhcmFtIHtQcmVzc0V2ZW50fSBlIFRvdWNoIFN0YXJ0IGV2ZW50LlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVySGFuZGxlVG91Y2hTdGFydDogZnVuY3Rpb24oZTogUHJlc3NFdmVudCkge1xuICAgIHRoaXMuc3RhdGUuaXNUb3VjaGluZyA9IHRydWU7XG4gICAgdGhpcy5wcm9wcy5vblRvdWNoU3RhcnQgJiYgdGhpcy5wcm9wcy5vblRvdWNoU3RhcnQoZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uVG91Y2hNb3ZlYCBldmVudC5cbiAgICpcbiAgICogU2luY2Ugd2Uga25vdyB0aGF0IHRoZSBgU2ltcGxlRXZlbnRQbHVnaW5gIG9jY3VycyBsYXRlciBpbiB0aGUgcGx1Z2luXG4gICAqIG9yZGVyLCBhZnRlciBgUmVzcG9uZGVyRXZlbnRQbHVnaW5gLCB3ZSBjYW4gZGV0ZWN0IHRoYXQgd2Ugd2VyZSAqbm90KlxuICAgKiBwZXJtaXR0ZWQgdG8gYmUgdGhlIHJlc3BvbmRlciAocHJlc3VtYWJseSBiZWNhdXNlIGEgY29udGFpbmVkIHZpZXcgYmVjYW1lXG4gICAqIHJlc3BvbmRlcikuIFRoZSBgb25SZXNwb25kZXJSZWplY3RgIHdvbid0IGZpcmUgaW4gdGhhdCBjYXNlIC0gaXQgb25seVxuICAgKiBmaXJlcyB3aGVuIGEgKmN1cnJlbnQqIHJlc3BvbmRlciByZWplY3RzIG91ciByZXF1ZXN0LlxuICAgKlxuICAgKiBAcGFyYW0ge1ByZXNzRXZlbnR9IGUgVG91Y2ggU3RhcnQgZXZlbnQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaE1vdmU6IGZ1bmN0aW9uKGU6IFByZXNzRXZlbnQpIHtcbiAgICB0aGlzLnByb3BzLm9uVG91Y2hNb3ZlICYmIHRoaXMucHJvcHMub25Ub3VjaE1vdmUoZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIGZ1bmN0aW9uIGZvciB0aGlzIGNsYXNzIHRoYXQgbGV0cyB1cyBxdWlja2x5IGRldGVybWluZSBpZiB0aGVcbiAgICogdmlldyBpcyBjdXJyZW50bHkgYW5pbWF0aW5nLiBUaGlzIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgdG8ga25vdyB3aGVuXG4gICAqIGEgdG91Y2ggaGFzIGp1c3Qgc3RhcnRlZCBvciBlbmRlZC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlcklzQW5pbWF0aW5nOiBmdW5jdGlvbigpOiBib29sZWFuIHtcbiAgICBjb25zdCBub3cgPSBwZXJmb3JtYW5jZU5vdygpO1xuICAgIGNvbnN0IHRpbWVTaW5jZUxhc3RNb21lbnR1bVNjcm9sbEVuZCA9XG4gICAgICBub3cgLSB0aGlzLnN0YXRlLmxhc3RNb21lbnR1bVNjcm9sbEVuZFRpbWU7XG4gICAgY29uc3QgaXNBbmltYXRpbmcgPVxuICAgICAgdGltZVNpbmNlTGFzdE1vbWVudHVtU2Nyb2xsRW5kIDwgSVNfQU5JTUFUSU5HX1RPVUNIX1NUQVJUX1RIUkVTSE9MRF9NUyB8fFxuICAgICAgdGhpcy5zdGF0ZS5sYXN0TW9tZW50dW1TY3JvbGxFbmRUaW1lIDxcbiAgICAgICAgdGhpcy5zdGF0ZS5sYXN0TW9tZW50dW1TY3JvbGxCZWdpblRpbWU7XG4gICAgcmV0dXJuIGlzQW5pbWF0aW5nO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBub2RlIHRoYXQgcmVwcmVzZW50cyBuYXRpdmUgdmlldyB0aGF0IGNhbiBiZSBzY3JvbGxlZC5cbiAgICogQ29tcG9uZW50cyBjYW4gcGFzcyB3aGF0IG5vZGUgdG8gdXNlIGJ5IGRlZmluaW5nIGEgYGdldFNjcm9sbGFibGVOb2RlYFxuICAgKiBmdW5jdGlvbiBvdGhlcndpc2UgYHRoaXNgIGlzIHVzZWQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJHZXRTY3JvbGxhYmxlTm9kZTogZnVuY3Rpb24oKTogP251bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2Nyb2xsYWJsZU5vZGVcbiAgICAgID8gdGhpcy5nZXRTY3JvbGxhYmxlTm9kZSgpXG4gICAgICA6IFJlYWN0TmF0aXZlLmZpbmROb2RlSGFuZGxlKHRoaXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBIGhlbHBlciBmdW5jdGlvbiB0byBzY3JvbGwgdG8gYSBzcGVjaWZpYyBwb2ludCBpbiB0aGUgU2Nyb2xsVmlldy5cbiAgICogVGhpcyBpcyBjdXJyZW50bHkgdXNlZCB0byBoZWxwIGZvY3VzIGNoaWxkIFRleHRWaWV3cywgYnV0IGNhbiBhbHNvXG4gICAqIGJlIHVzZWQgdG8gcXVpY2tseSBzY3JvbGwgdG8gYW55IGVsZW1lbnQgd2Ugd2FudCB0byBmb2N1cy4gU3ludGF4OlxuICAgKlxuICAgKiBgc2Nyb2xsUmVzcG9uZGVyU2Nyb2xsVG8ob3B0aW9uczoge3g6IG51bWJlciA9IDA7IHk6IG51bWJlciA9IDA7IGFuaW1hdGVkOiBib29sZWFuID0gdHJ1ZX0pYFxuICAgKlxuICAgKiBOb3RlOiBUaGUgd2VpcmQgYXJndW1lbnQgc2lnbmF0dXJlIGlzIGR1ZSB0byB0aGUgZmFjdCB0aGF0LCBmb3IgaGlzdG9yaWNhbCByZWFzb25zLFxuICAgKiB0aGUgZnVuY3Rpb24gYWxzbyBhY2NlcHRzIHNlcGFyYXRlIGFyZ3VtZW50cyBhcyBhcyBhbHRlcm5hdGl2ZSB0byB0aGUgb3B0aW9ucyBvYmplY3QuXG4gICAqIFRoaXMgaXMgZGVwcmVjYXRlZCBkdWUgdG8gYW1iaWd1aXR5ICh5IGJlZm9yZSB4KSwgYW5kIFNIT1VMRCBOT1QgQkUgVVNFRC5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlclNjcm9sbFRvOiBmdW5jdGlvbihcbiAgICB4PzogbnVtYmVyIHwge3g/OiBudW1iZXIsIHk/OiBudW1iZXIsIGFuaW1hdGVkPzogYm9vbGVhbn0sXG4gICAgeT86IG51bWJlcixcbiAgICBhbmltYXRlZD86IGJvb2xlYW4sXG4gICkge1xuICAgIGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ2BzY3JvbGxSZXNwb25kZXJTY3JvbGxUbyh4LCB5LCBhbmltYXRlZClgIGlzIGRlcHJlY2F0ZWQuIFVzZSBgc2Nyb2xsUmVzcG9uZGVyU2Nyb2xsVG8oe3g6IDUsIHk6IDUsIGFuaW1hdGVkOiB0cnVlfSlgIGluc3RlYWQuJyxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgICh7eCwgeSwgYW5pbWF0ZWR9ID0geCB8fCB7fSk7XG4gICAgfVxuICAgIFVJTWFuYWdlci5kaXNwYXRjaFZpZXdNYW5hZ2VyQ29tbWFuZChcbiAgICAgIG51bGx0aHJvd3ModGhpcy5zY3JvbGxSZXNwb25kZXJHZXRTY3JvbGxhYmxlTm9kZSgpKSxcbiAgICAgIFVJTWFuYWdlci5nZXRWaWV3TWFuYWdlckNvbmZpZygnUkNUU2Nyb2xsVmlldycpLkNvbW1hbmRzLnNjcm9sbFRvLFxuICAgICAgW3ggfHwgMCwgeSB8fCAwLCBhbmltYXRlZCAhPT0gZmFsc2VdLFxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNjcm9sbHMgdG8gdGhlIGVuZCBvZiB0aGUgU2Nyb2xsVmlldywgZWl0aGVyIGltbWVkaWF0ZWx5IG9yIHdpdGggYSBzbW9vdGhcbiAgICogYW5pbWF0aW9uLlxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKlxuICAgKiBgc2Nyb2xsUmVzcG9uZGVyU2Nyb2xsVG9FbmQoe2FuaW1hdGVkOiB0cnVlfSlgXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJTY3JvbGxUb0VuZDogZnVuY3Rpb24ob3B0aW9ucz86IHthbmltYXRlZD86IGJvb2xlYW59KSB7XG4gICAgLy8gRGVmYXVsdCB0byB0cnVlXG4gICAgY29uc3QgYW5pbWF0ZWQgPSAob3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGVkKSAhPT0gZmFsc2U7XG4gICAgVUlNYW5hZ2VyLmRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kKFxuICAgICAgdGhpcy5zY3JvbGxSZXNwb25kZXJHZXRTY3JvbGxhYmxlTm9kZSgpLFxuICAgICAgVUlNYW5hZ2VyLmdldFZpZXdNYW5hZ2VyQ29uZmlnKCdSQ1RTY3JvbGxWaWV3JykuQ29tbWFuZHMuc2Nyb2xsVG9FbmQsXG4gICAgICBbYW5pbWF0ZWRdLFxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlcHJlY2F0ZWQsIGRvIG5vdCB1c2UuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJTY3JvbGxXaXRob3V0QW5pbWF0aW9uVG86IGZ1bmN0aW9uKFxuICAgIG9mZnNldFg6IG51bWJlcixcbiAgICBvZmZzZXRZOiBudW1iZXIsXG4gICkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdgc2Nyb2xsUmVzcG9uZGVyU2Nyb2xsV2l0aG91dEFuaW1hdGlvblRvYCBpcyBkZXByZWNhdGVkLiBVc2UgYHNjcm9sbFJlc3BvbmRlclNjcm9sbFRvYCBpbnN0ZWFkJyxcbiAgICApO1xuICAgIHRoaXMuc2Nyb2xsUmVzcG9uZGVyU2Nyb2xsVG8oe3g6IG9mZnNldFgsIHk6IG9mZnNldFksIGFuaW1hdGVkOiBmYWxzZX0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBIGhlbHBlciBmdW5jdGlvbiB0byB6b29tIHRvIGEgc3BlY2lmaWMgcmVjdCBpbiB0aGUgc2Nyb2xsdmlldy4gVGhlIGFyZ3VtZW50IGhhcyB0aGUgc2hhcGVcbiAgICoge3g6IG51bWJlcjsgeTogbnVtYmVyOyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlcjsgYW5pbWF0ZWQ6IGJvb2xlYW4gPSB0cnVlfVxuICAgKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJab29tVG86IGZ1bmN0aW9uKFxuICAgIHJlY3Q6IHt8XG4gICAgICB4OiBudW1iZXIsXG4gICAgICB5OiBudW1iZXIsXG4gICAgICB3aWR0aDogbnVtYmVyLFxuICAgICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgICBhbmltYXRlZD86IGJvb2xlYW4sXG4gICAgfH0sXG4gICAgYW5pbWF0ZWQ/OiBib29sZWFuLCAvLyBkZXByZWNhdGVkLCBwdXQgdGhpcyBpbnNpZGUgdGhlIHJlY3QgYXJndW1lbnQgaW5zdGVhZFxuICApIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBTY3JvbGxWaWV3TWFuYWdlciAmJiBTY3JvbGxWaWV3TWFuYWdlci56b29tVG9SZWN0LFxuICAgICAgJ3pvb21Ub1JlY3QgaXMgbm90IGltcGxlbWVudGVkJyxcbiAgICApO1xuICAgIGlmICgnYW5pbWF0ZWQnIGluIHJlY3QpIHtcbiAgICAgIGFuaW1hdGVkID0gcmVjdC5hbmltYXRlZDtcbiAgICAgIGRlbGV0ZSByZWN0LmFuaW1hdGVkO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFuaW1hdGVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnYHNjcm9sbFJlc3BvbmRlclpvb21Ub2AgYGFuaW1hdGVkYCBhcmd1bWVudCBpcyBkZXByZWNhdGVkLiBVc2UgYG9wdGlvbnMuYW5pbWF0ZWRgIGluc3RlYWQnLFxuICAgICAgKTtcbiAgICB9XG4gICAgU2Nyb2xsVmlld01hbmFnZXIuem9vbVRvUmVjdChcbiAgICAgIHRoaXMuc2Nyb2xsUmVzcG9uZGVyR2V0U2Nyb2xsYWJsZU5vZGUoKSxcbiAgICAgIHJlY3QsXG4gICAgICBhbmltYXRlZCAhPT0gZmFsc2UsXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogRGlzcGxheXMgdGhlIHNjcm9sbCBpbmRpY2F0b3JzIG1vbWVudGFyaWx5LlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVyRmxhc2hTY3JvbGxJbmRpY2F0b3JzOiBmdW5jdGlvbigpIHtcbiAgICBVSU1hbmFnZXIuZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQoXG4gICAgICB0aGlzLnNjcm9sbFJlc3BvbmRlckdldFNjcm9sbGFibGVOb2RlKCksXG4gICAgICBVSU1hbmFnZXIuZ2V0Vmlld01hbmFnZXJDb25maWcoJ1JDVFNjcm9sbFZpZXcnKS5Db21tYW5kc1xuICAgICAgICAuZmxhc2hTY3JvbGxJbmRpY2F0b3JzLFxuICAgICAgW10sXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIHVzZWQgYXMgdGhlIGNhbGxiYWNrIHRvIG9uRm9jdXMgaW4gYSBUZXh0SW5wdXRzJ1xuICAgKiBwYXJlbnQgdmlldy4gTm90ZSB0aGF0IGFueSBtb2R1bGUgdXNpbmcgdGhpcyBtaXhpbiBuZWVkcyB0byByZXR1cm5cbiAgICogdGhlIHBhcmVudCB2aWV3J3MgcmVmIGluIGdldFNjcm9sbFZpZXdSZWYoKSBpbiBvcmRlciB0byB1c2UgdGhpcyBtZXRob2QuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBub2RlSGFuZGxlIFRoZSBUZXh0SW5wdXQgbm9kZSBoYW5kbGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFkZGl0aW9uYWxPZmZzZXQgVGhlIHNjcm9sbCB2aWV3J3MgYm90dG9tIFwiY29udGVudEluc2V0XCIuXG4gICAqICAgICAgICBEZWZhdWx0IGlzIDAuXG4gICAqIEBwYXJhbSB7Ym9vbH0gcHJldmVudE5lZ2F0aXZlU2Nyb2xsaW5nIFdoZXRoZXIgdG8gYWxsb3cgcHVsbGluZyB0aGUgY29udGVudFxuICAgKiAgICAgICAgZG93biB0byBtYWtlIGl0IG1lZXQgdGhlIGtleWJvYXJkJ3MgdG9wLiBEZWZhdWx0IGlzIGZhbHNlLlxuICAgKi9cbiAgc2Nyb2xsUmVzcG9uZGVyU2Nyb2xsTmF0aXZlSGFuZGxlVG9LZXlib2FyZDogZnVuY3Rpb24oXG4gICAgbm9kZUhhbmRsZTogbnVtYmVyLFxuICAgIGFkZGl0aW9uYWxPZmZzZXQ/OiBudW1iZXIsXG4gICAgcHJldmVudE5lZ2F0aXZlU2Nyb2xsT2Zmc2V0PzogYm9vbGVhbixcbiAgKSB7XG4gICAgdGhpcy5hZGRpdGlvbmFsU2Nyb2xsT2Zmc2V0ID0gYWRkaXRpb25hbE9mZnNldCB8fCAwO1xuICAgIHRoaXMucHJldmVudE5lZ2F0aXZlU2Nyb2xsT2Zmc2V0ID0gISFwcmV2ZW50TmVnYXRpdmVTY3JvbGxPZmZzZXQ7XG4gICAgVUlNYW5hZ2VyLm1lYXN1cmVMYXlvdXQoXG4gICAgICBub2RlSGFuZGxlLFxuICAgICAgUmVhY3ROYXRpdmUuZmluZE5vZGVIYW5kbGUodGhpcy5nZXRJbm5lclZpZXdOb2RlKCkpLFxuICAgICAgdGhpcy5zY3JvbGxSZXNwb25kZXJUZXh0SW5wdXRGb2N1c0Vycm9yLFxuICAgICAgdGhpcy5zY3JvbGxSZXNwb25kZXJJbnB1dE1lYXN1cmVBbmRTY3JvbGxUb0tleWJvYXJkLFxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBjYWxjdWxhdGlvbnMgcGVyZm9ybWVkIGhlcmUgYXNzdW1lIHRoZSBzY3JvbGwgdmlldyB0YWtlcyB1cCB0aGUgZW50aXJlXG4gICAqIHNjcmVlbiAtIGV2ZW4gaWYgaGFzIHNvbWUgY29udGVudCBpbnNldC4gV2UgdGhlbiBtZWFzdXJlIHRoZSBvZmZzZXRzIG9mIHRoZVxuICAgKiBrZXlib2FyZCwgYW5kIGNvbXBlbnNhdGUgYm90aCBmb3IgdGhlIHNjcm9sbCB2aWV3J3MgXCJjb250ZW50SW5zZXRcIi5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgUG9zaXRpb24gb2YgaW5wdXQgdy5yLnQuIHRhYmxlIHZpZXcuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0b3AgUG9zaXRpb24gb2YgaW5wdXQgdy5yLnQuIHRhYmxlIHZpZXcuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBXaWR0aCBvZiB0aGUgdGV4dCBpbnB1dC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBIZWlnaHQgb2YgdGhlIHRleHQgaW5wdXQuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJJbnB1dE1lYXN1cmVBbmRTY3JvbGxUb0tleWJvYXJkOiBmdW5jdGlvbihcbiAgICBsZWZ0OiBudW1iZXIsXG4gICAgdG9wOiBudW1iZXIsXG4gICAgd2lkdGg6IG51bWJlcixcbiAgICBoZWlnaHQ6IG51bWJlcixcbiAgKSB7XG4gICAgbGV0IGtleWJvYXJkU2NyZWVuWSA9IERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKS5oZWlnaHQ7XG4gICAgaWYgKHRoaXMua2V5Ym9hcmRXaWxsT3BlblRvKSB7XG4gICAgICBrZXlib2FyZFNjcmVlblkgPSB0aGlzLmtleWJvYXJkV2lsbE9wZW5Uby5lbmRDb29yZGluYXRlcy5zY3JlZW5ZO1xuICAgIH1cbiAgICBsZXQgc2Nyb2xsT2Zmc2V0WSA9XG4gICAgICB0b3AgLSBrZXlib2FyZFNjcmVlblkgKyBoZWlnaHQgKyB0aGlzLmFkZGl0aW9uYWxTY3JvbGxPZmZzZXQ7XG5cbiAgICAvLyBCeSBkZWZhdWx0LCB0aGlzIGNhbiBzY3JvbGwgd2l0aCBuZWdhdGl2ZSBvZmZzZXQsIHB1bGxpbmcgdGhlIGNvbnRlbnRcbiAgICAvLyBkb3duIHNvIHRoYXQgdGhlIHRhcmdldCBjb21wb25lbnQncyBib3R0b20gbWVldHMgdGhlIGtleWJvYXJkJ3MgdG9wLlxuICAgIC8vIElmIHJlcXVlc3RlZCBvdGhlcndpc2UsIGNhcCB0aGUgb2Zmc2V0IGF0IDAgbWluaW11bSB0byBhdm9pZCBjb250ZW50XG4gICAgLy8gc2hpZnRpbmcgZG93bi5cbiAgICBpZiAodGhpcy5wcmV2ZW50TmVnYXRpdmVTY3JvbGxPZmZzZXQpIHtcbiAgICAgIHNjcm9sbE9mZnNldFkgPSBNYXRoLm1heCgwLCBzY3JvbGxPZmZzZXRZKTtcbiAgICB9XG4gICAgdGhpcy5zY3JvbGxSZXNwb25kZXJTY3JvbGxUbyh7eDogMCwgeTogc2Nyb2xsT2Zmc2V0WSwgYW5pbWF0ZWQ6IHRydWV9KTtcblxuICAgIHRoaXMuYWRkaXRpb25hbE9mZnNldCA9IDA7XG4gICAgdGhpcy5wcmV2ZW50TmVnYXRpdmVTY3JvbGxPZmZzZXQgPSBmYWxzZTtcbiAgfSxcblxuICBzY3JvbGxSZXNwb25kZXJUZXh0SW5wdXRGb2N1c0Vycm9yOiBmdW5jdGlvbihtc2c6IHN0cmluZykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIG1lYXN1cmluZyB0ZXh0IGZpZWxkOiAnLCBtc2cpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBgY29tcG9uZW50V2lsbE1vdW50YCBpcyB0aGUgY2xvc2VzdCB0aGluZyB0byBhICBzdGFuZGFyZCBcImNvbnN0cnVjdG9yXCIgZm9yXG4gICAqIFJlYWN0IGNvbXBvbmVudHMuXG4gICAqXG4gICAqIFRoZSBga2V5Ym9hcmRXaWxsU2hvd2AgaXMgY2FsbGVkIGJlZm9yZSBpbnB1dCBmb2N1cy5cbiAgICovXG4gIFVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHtrZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzfSA9IHRoaXMucHJvcHM7XG4gICAgd2FybmluZyhcbiAgICAgIHR5cGVvZiBrZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzICE9PSAnYm9vbGVhbicsXG4gICAgICBgJ2tleWJvYXJkU2hvdWxkUGVyc2lzdFRhcHM9eyR7a2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwc319JyBpcyBkZXByZWNhdGVkLiBgICtcbiAgICAgICAgYFVzZSAna2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcz1cIiR7XG4gICAgICAgICAga2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcyA/ICdhbHdheXMnIDogJ25ldmVyJ1xuICAgICAgICB9XCInIGluc3RlYWRgLFxuICAgICk7XG5cbiAgICB0aGlzLmtleWJvYXJkV2lsbE9wZW5UbyA9IG51bGw7XG4gICAgdGhpcy5hZGRpdGlvbmFsU2Nyb2xsT2Zmc2V0ID0gMDtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25LZXlib2FyZFdpbGxTaG93ID0gS2V5Ym9hcmQuYWRkTGlzdGVuZXIoXG4gICAgICAna2V5Ym9hcmRXaWxsU2hvdycsXG4gICAgICB0aGlzLnNjcm9sbFJlc3BvbmRlcktleWJvYXJkV2lsbFNob3csXG4gICAgKTtcblxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbktleWJvYXJkV2lsbEhpZGUgPSBLZXlib2FyZC5hZGRMaXN0ZW5lcihcbiAgICAgICdrZXlib2FyZFdpbGxIaWRlJyxcbiAgICAgIHRoaXMuc2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmRXaWxsSGlkZSxcbiAgICApO1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbktleWJvYXJkRGlkU2hvdyA9IEtleWJvYXJkLmFkZExpc3RlbmVyKFxuICAgICAgJ2tleWJvYXJkRGlkU2hvdycsXG4gICAgICB0aGlzLnNjcm9sbFJlc3BvbmRlcktleWJvYXJkRGlkU2hvdyxcbiAgICApO1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbktleWJvYXJkRGlkSGlkZSA9IEtleWJvYXJkLmFkZExpc3RlbmVyKFxuICAgICAgJ2tleWJvYXJkRGlkSGlkZScsXG4gICAgICB0aGlzLnNjcm9sbFJlc3BvbmRlcktleWJvYXJkRGlkSGlkZSxcbiAgICApO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9uS2V5Ym9hcmRXaWxsU2hvdyAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb25LZXlib2FyZFdpbGxTaG93LnJlbW92ZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9uS2V5Ym9hcmRXaWxsSGlkZSAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb25LZXlib2FyZFdpbGxIaWRlLnJlbW92ZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9uS2V5Ym9hcmREaWRTaG93ICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbktleWJvYXJkRGlkU2hvdy5yZW1vdmUoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3N1YnNjcmlwdGlvbktleWJvYXJkRGlkSGlkZSAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb25LZXlib2FyZERpZEhpZGUucmVtb3ZlKCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBXYXJuaW5nLCB0aGlzIG1heSBiZSBjYWxsZWQgc2V2ZXJhbCB0aW1lcyBmb3IgYSBzaW5nbGUga2V5Ym9hcmQgb3BlbmluZy5cbiAgICogSXQncyBiZXN0IHRvIHN0b3JlIHRoZSBpbmZvcm1hdGlvbiBpbiB0aGlzIG1ldGhvZCBhbmQgdGhlbiB0YWtlIGFueSBhY3Rpb25cbiAgICogYXQgYSBsYXRlciBwb2ludCAoZWl0aGVyIGluIGBrZXlib2FyZERpZFNob3dgIG9yIG90aGVyKS5cbiAgICpcbiAgICogSGVyZSdzIHRoZSBvcmRlciB0aGF0IGV2ZW50cyBvY2N1ciBpbjpcbiAgICogLSBmb2N1c1xuICAgKiAtIHdpbGxTaG93IHtzdGFydENvb3JkaW5hdGVzLCBlbmRDb29yZGluYXRlc30gc2V2ZXJhbCB0aW1lc1xuICAgKiAtIGRpZFNob3cgc2V2ZXJhbCB0aW1lc1xuICAgKiAtIGJsdXJcbiAgICogLSB3aWxsSGlkZSB7c3RhcnRDb29yZGluYXRlcywgZW5kQ29vcmRpbmF0ZXN9IHNldmVyYWwgdGltZXNcbiAgICogLSBkaWRIaWRlIHNldmVyYWwgdGltZXNcbiAgICpcbiAgICogVGhlIGBTY3JvbGxSZXNwb25kZXJgIG1vZHVsZSBjYWxsYmFja3MgZm9yIGVhY2ggb2YgdGhlc2UgZXZlbnRzLlxuICAgKiBFdmVuIHRob3VnaCBhbnkgdXNlciBjb3VsZCBoYXZlIGVhc2lseSBsaXN0ZW5lZCB0byBrZXlib2FyZCBldmVudHNcbiAgICogdGhlbXNlbHZlcywgdXNpbmcgdGhlc2UgYHByb3BzYCBjYWxsYmFja3MgZW5zdXJlcyB0aGF0IG9yZGVyaW5nIG9mIGV2ZW50c1xuICAgKiBpcyBjb25zaXN0ZW50IC0gYW5kIG5vdCBkZXBlbmRlbnQgb24gdGhlIG9yZGVyIHRoYXQgdGhlIGtleWJvYXJkIGV2ZW50cyBhcmVcbiAgICogc3Vic2NyaWJlZCB0by4gVGhpcyBtYXR0ZXJzIHdoZW4gdGVsbGluZyB0aGUgc2Nyb2xsIHZpZXcgdG8gc2Nyb2xsIHRvIHdoZXJlXG4gICAqIHRoZSBrZXlib2FyZCBpcyBoZWFkZWQgLSB0aGUgc2Nyb2xsIHJlc3BvbmRlciBiZXR0ZXIgaGF2ZSBiZWVuIG5vdGlmaWVkIG9mXG4gICAqIHRoZSBrZXlib2FyZCBkZXN0aW5hdGlvbiBiZWZvcmUgYmVpbmcgaW5zdHJ1Y3RlZCB0byBzY3JvbGwgdG8gd2hlcmUgdGhlXG4gICAqIGtleWJvYXJkIHdpbGwgYmUuIFN0aWNrIHRvIHRoZSBgU2Nyb2xsUmVzcG9uZGVyYCBjYWxsYmFja3MsIGFuZCBldmVyeXRoaW5nXG4gICAqIHdpbGwgd29yay5cbiAgICpcbiAgICogV0FSTklORzogVGhlc2UgY2FsbGJhY2tzIHdpbGwgZmlyZSBldmVuIGlmIGEga2V5Ym9hcmQgaXMgZGlzcGxheWVkIGluIGFcbiAgICogZGlmZmVyZW50IG5hdmlnYXRpb24gcGFuZS4gRmlsdGVyIG91dCB0aGUgZXZlbnRzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICAgKiByZWxldmFudCB0byB5b3UuIChGb3IgZXhhbXBsZSwgb25seSBpZiB5b3UgcmVjZWl2ZSB0aGVzZSBjYWxsYmFja3MgYWZ0ZXJcbiAgICogeW91IGhhZCBleHBsaWNpdGx5IGZvY3VzZWQgYSBub2RlIGV0YykuXG4gICAqL1xuICBzY3JvbGxSZXNwb25kZXJLZXlib2FyZFdpbGxTaG93OiBmdW5jdGlvbihlOiBLZXlib2FyZEV2ZW50KSB7XG4gICAgdGhpcy5rZXlib2FyZFdpbGxPcGVuVG8gPSBlO1xuICAgIHRoaXMucHJvcHMub25LZXlib2FyZFdpbGxTaG93ICYmIHRoaXMucHJvcHMub25LZXlib2FyZFdpbGxTaG93KGUpO1xuICB9LFxuXG4gIHNjcm9sbFJlc3BvbmRlcktleWJvYXJkV2lsbEhpZGU6IGZ1bmN0aW9uKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICB0aGlzLmtleWJvYXJkV2lsbE9wZW5UbyA9IG51bGw7XG4gICAgdGhpcy5wcm9wcy5vbktleWJvYXJkV2lsbEhpZGUgJiYgdGhpcy5wcm9wcy5vbktleWJvYXJkV2lsbEhpZGUoZSk7XG4gIH0sXG5cbiAgc2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmREaWRTaG93OiBmdW5jdGlvbihlOiBLZXlib2FyZEV2ZW50KSB7XG4gICAgLy8gVE9ETyg3NjkzOTYxKTogVGhlIGV2ZW50IGZvciBEaWRTaG93IGlzIG5vdCBhdmFpbGFibGUgb24gaU9TIHlldC5cbiAgICAvLyBVc2UgdGhlIG9uZSBmcm9tIFdpbGxTaG93IGFuZCBkbyBub3QgYXNzaWduLlxuICAgIGlmIChlKSB7XG4gICAgICB0aGlzLmtleWJvYXJkV2lsbE9wZW5UbyA9IGU7XG4gICAgfVxuICAgIHRoaXMucHJvcHMub25LZXlib2FyZERpZFNob3cgJiYgdGhpcy5wcm9wcy5vbktleWJvYXJkRGlkU2hvdyhlKTtcbiAgfSxcblxuICBzY3JvbGxSZXNwb25kZXJLZXlib2FyZERpZEhpZGU6IGZ1bmN0aW9uKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICB0aGlzLmtleWJvYXJkV2lsbE9wZW5UbyA9IG51bGw7XG4gICAgdGhpcy5wcm9wcy5vbktleWJvYXJkRGlkSGlkZSAmJiB0aGlzLnByb3BzLm9uS2V5Ym9hcmREaWRIaWRlKGUpO1xuICB9LFxufTtcblxuY29uc3QgU2Nyb2xsUmVzcG9uZGVyID0ge1xuICBNaXhpbjogU2Nyb2xsUmVzcG9uZGVyTWl4aW4sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNjcm9sbFJlc3BvbmRlcjtcbiJdfQ==