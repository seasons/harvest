ebfb38595286514eeedb26f70ba0d12d
jest.mock("react-native", function () {
  return {
    AsyncStorage: {
      setItem: jest.fn(function () {
        return new Promise(function (resolve, reject) {
          resolve(null);
        });
      }),
      multiSet: jest.fn(function () {
        return new Promise(function (resolve, reject) {
          resolve(null);
        });
      }),
      getItem: jest.fn(function () {
        return new Promise(function (resolve, reject) {
          resolve({
            bag: {
              items: []
            }
          });
        });
      }),
      multiGet: jest.fn(function () {
        return new Promise(function (resolve, reject) {
          resolve(null);
        });
      }),
      removeItem: jest.fn(function () {
        return new Promise(function (resolve, reject) {
          resolve(null);
        });
      }),
      getAllKeys: jest.fn(function () {
        return new Promise(function (resolve) {
          resolve(["one", "two", "three"]);
        });
      })
    }
  };
});

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _chalk = _interopRequireDefault(require("chalk"));

var _enzyme = _interopRequireDefault(require("enzyme"));

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _expect = _interopRequireDefault(require("expect"));

var _util = require("util");

var _snapshotDiff = _interopRequireDefault(require("snapshot-diff"));

var _reactNative = require("react-native");

_enzyme.default.configure({
  adapter: new _enzymeAdapterReact.default()
});

_expect.default.extend({
  toMatchDiffSnapshot: _snapshotDiff.default.toMatchDiffSnapshot
});

function mockedModule(path, mockModuleName) {
  jest.mock(path, function () {
    return mockModuleName;
  });
}

var originalConsoleError = console.error;

console.error = function (message) {
  if (typeof message === "string" && (message.includes("is using uppercase HTML. Always use lowercase HTML tags in React.") || /Warning: React does not recognize the `\w+` prop on a DOM element\./.test(message) || /Warning: The tag <\w+> is unrecognized in this browser\./.test(message) || /Warning: Unknown event handler property `\w+`\./.test(message) || /Warning: Received `\w+` for a non-boolean attribute `\w+`\./.test(message) || /Warning: [\w\s]+ has been extracted from react-native core/.test(message))) {} else {
    originalConsoleError(message);
  }
};

_reactNative.NativeModules.ARTakeCameraPhotoModule = {
  errorCodes: {
    cameraNotAvailable: "cameraNotAvailable",
    imageMediaNotAvailable: "imageMediaNotAvailable",
    cameraAccessDenied: "cameraAccessDenied",
    saveFailed: "saveFailed"
  }
};
_reactNative.NativeModules.ARCocoaConstantsModule = {
  UIApplicationOpenSettingsURLString: "UIApplicationOpenSettingsURLString",
  AREnabled: true
};
_reactNative.NativeModules.ARSwitchBoardModule = {
  presentNavigationViewController: jest.fn(),
  presentModalViewController: jest.fn(),
  presentMediaPreviewController: jest.fn(),
  presentArtworksSet: jest.fn()
};

if (process.env.ALLOW_CONSOLE_LOGS !== "true") {
  var originalLoggers = {
    error: console.error,
    warn: console.warn
  };

  function logToError(type, args, constructorOpt) {
    var explanation = _chalk.default.white("Test failed due to `console." + type + "(\u2026)` call.\n") + _chalk.default.gray("(Disable with ALLOW_CONSOLE_LOGS=true env variable.)\n\n");

    if (args[0] instanceof Error) {
      var msg = explanation + _chalk.default.red(args[0].message);

      var err = new Error(msg);
      err.stack = args[0].stack.replace("Error: " + args[0].message, msg);
      return err;
    } else if (!args[0].includes("is using incorrect casing") && !args[0].includes("is unrecognized in this browser") && ![args[0].includes("React does not recognize the `testID` prop on a DOM element.")]) {
      var _err = new Error(explanation + _chalk.default.red(_util.format.apply(void 0, [args[0]].concat((0, _toConsumableArray2.default)(args.slice(1))))));

      Error.captureStackTrace(_err, constructorOpt);
      return _err;
    }

    return null;
  }

  beforeEach(function (done) {
    var types = ["error", "warn"];
    types.forEach(function (type) {
      if (console[type] === originalLoggers[type]) {
        var handler = function handler() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var error = logToError(type, args, handler);

          if (error) {
            done.fail(error);
          }
        };

        jest.spyOn(console, type).mockImplementation(handler);
      }
    });
    done();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,