5aa5df74a7cd0f8a2d8b66fd8c825bea
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var LayoutType_1 = require("./LayoutType");

var LayoutTreeParser = function () {
  function LayoutTreeParser(uniqueIdProvider) {
    (0, _classCallCheck2.default)(this, LayoutTreeParser);
    this.uniqueIdProvider = uniqueIdProvider;
    this.parse = this.parse.bind(this);
  }

  (0, _createClass2.default)(LayoutTreeParser, [{
    key: "parse",
    value: function parse(api) {
      if (api.topTabs) {
        return this.topTabs(api.topTabs);
      } else if (api.sideMenu) {
        return this.sideMenu(api.sideMenu);
      } else if (api.bottomTabs) {
        return this.bottomTabs(api.bottomTabs);
      } else if (api.stack) {
        return this.stack(api.stack);
      } else if (api.component) {
        return this.component(api.component);
      } else if (api.externalComponent) {
        return this.externalComponent(api.externalComponent);
      } else if (api.splitView) {
        return this.splitView(api.splitView);
      }

      throw new Error("unknown LayoutType \"" + Object.keys(api) + "\"");
    }
  }, {
    key: "topTabs",
    value: function topTabs(api) {
      return {
        id: api.id || this.uniqueIdProvider.generate(LayoutType_1.LayoutType.TopTabs),
        type: LayoutType_1.LayoutType.TopTabs,
        data: {
          options: api.options
        },
        children: api.children ? api.children.map(this.parse) : []
      };
    }
  }, {
    key: "sideMenu",
    value: function sideMenu(api) {
      return {
        id: api.id || this.uniqueIdProvider.generate(LayoutType_1.LayoutType.SideMenuRoot),
        type: LayoutType_1.LayoutType.SideMenuRoot,
        data: {
          options: api.options
        },
        children: this.sideMenuChildren(api)
      };
    }
  }, {
    key: "sideMenuChildren",
    value: function sideMenuChildren(api) {
      var children = [];

      if (api.left) {
        children.push({
          id: this.uniqueIdProvider.generate(LayoutType_1.LayoutType.SideMenuLeft),
          type: LayoutType_1.LayoutType.SideMenuLeft,
          data: {},
          children: [this.parse(api.left)]
        });
      }

      children.push({
        id: this.uniqueIdProvider.generate(LayoutType_1.LayoutType.SideMenuCenter),
        type: LayoutType_1.LayoutType.SideMenuCenter,
        data: {},
        children: [this.parse(api.center)]
      });

      if (api.right) {
        children.push({
          id: this.uniqueIdProvider.generate(LayoutType_1.LayoutType.SideMenuRight),
          type: LayoutType_1.LayoutType.SideMenuRight,
          data: {},
          children: [this.parse(api.right)]
        });
      }

      return children;
    }
  }, {
    key: "bottomTabs",
    value: function bottomTabs(api) {
      return {
        id: api.id || this.uniqueIdProvider.generate(LayoutType_1.LayoutType.BottomTabs),
        type: LayoutType_1.LayoutType.BottomTabs,
        data: {
          options: api.options
        },
        children: api.children ? api.children.map(this.parse) : []
      };
    }
  }, {
    key: "stack",
    value: function stack(api) {
      return {
        id: api.id || this.uniqueIdProvider.generate(LayoutType_1.LayoutType.Stack),
        type: LayoutType_1.LayoutType.Stack,
        data: {
          options: api.options
        },
        children: api.children ? api.children.map(this.parse) : []
      };
    }
  }, {
    key: "component",
    value: function component(api) {
      return {
        id: api.id || this.uniqueIdProvider.generate(LayoutType_1.LayoutType.Component),
        type: LayoutType_1.LayoutType.Component,
        data: {
          name: api.name.toString(),
          options: api.options,
          passProps: api.passProps
        },
        children: []
      };
    }
  }, {
    key: "externalComponent",
    value: function externalComponent(api) {
      return {
        id: api.id || this.uniqueIdProvider.generate(LayoutType_1.LayoutType.ExternalComponent),
        type: LayoutType_1.LayoutType.ExternalComponent,
        data: {
          name: api.name.toString(),
          options: api.options,
          passProps: api.passProps
        },
        children: []
      };
    }
  }, {
    key: "splitView",
    value: function splitView(api) {
      var master = api.master ? this.parse(api.master) : undefined;
      var detail = api.detail ? this.parse(api.detail) : undefined;
      return {
        id: api.id || this.uniqueIdProvider.generate(LayoutType_1.LayoutType.SplitView),
        type: LayoutType_1.LayoutType.SplitView,
        data: {
          options: api.options
        },
        children: master && detail ? [master, detail] : []
      };
    }
  }]);
  return LayoutTreeParser;
}();

exports.LayoutTreeParser = LayoutTreeParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,