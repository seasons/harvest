a27bee9c0dbd6924c091e39a2d493009
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ = require("lodash");

var Commands = function () {
  function Commands(nativeCommandsSender, layoutTreeParser, layoutTreeCrawler, commandsObserver, uniqueIdProvider, optionsProcessor) {
    (0, _classCallCheck2.default)(this, Commands);
    this.nativeCommandsSender = nativeCommandsSender;
    this.layoutTreeParser = layoutTreeParser;
    this.layoutTreeCrawler = layoutTreeCrawler;
    this.commandsObserver = commandsObserver;
    this.uniqueIdProvider = uniqueIdProvider;
    this.optionsProcessor = optionsProcessor;
  }

  (0, _createClass2.default)(Commands, [{
    key: "setRoot",
    value: function setRoot(simpleApi) {
      var _this = this;

      var input = _.cloneDeep(simpleApi);

      var root = this.layoutTreeParser.parse(input.root);

      var modals = _.map(input.modals, function (modal) {
        return _this.layoutTreeParser.parse(modal);
      });

      var overlays = _.map(input.overlays, function (overlay) {
        return _this.layoutTreeParser.parse(overlay);
      });

      var commandId = this.uniqueIdProvider.generate('setRoot');
      this.commandsObserver.notify('setRoot', {
        commandId: commandId,
        layout: {
          root: root,
          modals: modals,
          overlays: overlays
        }
      });
      this.layoutTreeCrawler.crawl(root);
      modals.forEach(function (modalLayout) {
        _this.layoutTreeCrawler.crawl(modalLayout);
      });
      overlays.forEach(function (overlayLayout) {
        _this.layoutTreeCrawler.crawl(overlayLayout);
      });
      var result = this.nativeCommandsSender.setRoot(commandId, {
        root: root,
        modals: modals,
        overlays: overlays
      });
      return result;
    }
  }, {
    key: "setDefaultOptions",
    value: function setDefaultOptions(options) {
      var input = _.cloneDeep(options);

      this.optionsProcessor.processOptions(input);
      this.nativeCommandsSender.setDefaultOptions(input);
      this.commandsObserver.notify('setDefaultOptions', {
        options: options
      });
    }
  }, {
    key: "mergeOptions",
    value: function mergeOptions(componentId, options) {
      var input = _.cloneDeep(options);

      this.optionsProcessor.processOptions(input);
      this.nativeCommandsSender.mergeOptions(componentId, input);
      this.commandsObserver.notify('mergeOptions', {
        componentId: componentId,
        options: options
      });
    }
  }, {
    key: "showModal",
    value: function showModal(layout) {
      var layoutCloned = _.cloneDeep(layout);

      var layoutNode = this.layoutTreeParser.parse(layoutCloned);
      var commandId = this.uniqueIdProvider.generate('showModal');
      this.commandsObserver.notify('showModal', {
        commandId: commandId,
        layout: layoutNode
      });
      this.layoutTreeCrawler.crawl(layoutNode);
      var result = this.nativeCommandsSender.showModal(commandId, layoutNode);
      return result;
    }
  }, {
    key: "dismissModal",
    value: function dismissModal(componentId, mergeOptions) {
      var commandId = this.uniqueIdProvider.generate('dismissModal');
      var result = this.nativeCommandsSender.dismissModal(commandId, componentId, mergeOptions);
      this.commandsObserver.notify('dismissModal', {
        commandId: commandId,
        componentId: componentId,
        mergeOptions: mergeOptions
      });
      return result;
    }
  }, {
    key: "dismissAllModals",
    value: function dismissAllModals(mergeOptions) {
      var commandId = this.uniqueIdProvider.generate('dismissAllModals');
      var result = this.nativeCommandsSender.dismissAllModals(commandId, mergeOptions);
      this.commandsObserver.notify('dismissAllModals', {
        commandId: commandId,
        mergeOptions: mergeOptions
      });
      return result;
    }
  }, {
    key: "push",
    value: function push(componentId, simpleApi) {
      var input = _.cloneDeep(simpleApi);

      var layout = this.layoutTreeParser.parse(input);
      var commandId = this.uniqueIdProvider.generate('push');
      this.commandsObserver.notify('push', {
        commandId: commandId,
        componentId: componentId,
        layout: layout
      });
      this.layoutTreeCrawler.crawl(layout);
      var result = this.nativeCommandsSender.push(commandId, componentId, layout);
      return result;
    }
  }, {
    key: "pop",
    value: function pop(componentId, mergeOptions) {
      var commandId = this.uniqueIdProvider.generate('pop');
      var result = this.nativeCommandsSender.pop(commandId, componentId, mergeOptions);
      this.commandsObserver.notify('pop', {
        commandId: commandId,
        componentId: componentId,
        mergeOptions: mergeOptions
      });
      return result;
    }
  }, {
    key: "popTo",
    value: function popTo(componentId, mergeOptions) {
      var commandId = this.uniqueIdProvider.generate('popTo');
      var result = this.nativeCommandsSender.popTo(commandId, componentId, mergeOptions);
      this.commandsObserver.notify('popTo', {
        commandId: commandId,
        componentId: componentId,
        mergeOptions: mergeOptions
      });
      return result;
    }
  }, {
    key: "popToRoot",
    value: function popToRoot(componentId, mergeOptions) {
      var commandId = this.uniqueIdProvider.generate('popToRoot');
      var result = this.nativeCommandsSender.popToRoot(commandId, componentId, mergeOptions);
      this.commandsObserver.notify('popToRoot', {
        commandId: commandId,
        componentId: componentId,
        mergeOptions: mergeOptions
      });
      return result;
    }
  }, {
    key: "setStackRoot",
    value: function setStackRoot(componentId, children) {
      var _this2 = this;

      var input = _.map(_.cloneDeep(children), function (simpleApi) {
        var layout = _this2.layoutTreeParser.parse(simpleApi);

        return layout;
      });

      var commandId = this.uniqueIdProvider.generate('setStackRoot');
      this.commandsObserver.notify('setStackRoot', {
        commandId: commandId,
        componentId: componentId,
        layout: input
      });
      input.forEach(function (layoutNode) {
        _this2.layoutTreeCrawler.crawl(layoutNode);
      });
      var result = this.nativeCommandsSender.setStackRoot(commandId, componentId, input);
      return result;
    }
  }, {
    key: "showOverlay",
    value: function showOverlay(simpleApi) {
      var input = _.cloneDeep(simpleApi);

      var layout = this.layoutTreeParser.parse(input);
      var commandId = this.uniqueIdProvider.generate('showOverlay');
      this.commandsObserver.notify('showOverlay', {
        commandId: commandId,
        layout: layout
      });
      this.layoutTreeCrawler.crawl(layout);
      var result = this.nativeCommandsSender.showOverlay(commandId, layout);
      return result;
    }
  }, {
    key: "dismissOverlay",
    value: function dismissOverlay(componentId) {
      var commandId = this.uniqueIdProvider.generate('dismissOverlay');
      var result = this.nativeCommandsSender.dismissOverlay(commandId, componentId);
      this.commandsObserver.notify('dismissOverlay', {
        commandId: commandId,
        componentId: componentId
      });
      return result;
    }
  }, {
    key: "getLaunchArgs",
    value: function getLaunchArgs() {
      var commandId = this.uniqueIdProvider.generate('getLaunchArgs');
      var result = this.nativeCommandsSender.getLaunchArgs(commandId);
      this.commandsObserver.notify('getLaunchArgs', {
        commandId: commandId
      });
      return result;
    }
  }]);
  return Commands;
}();

exports.Commands = Commands;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,