543edb9e3f803c6d396e3e27e0b327b9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propsAndStyles = propsAndStyles;
exports.default = extractProps;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extractFill = _interopRequireDefault(require("./extractFill"));

var _extractStroke = _interopRequireDefault(require("./extractStroke"));

var _extractTransform = require("./extractTransform");

var _extractClipPath = _interopRequireDefault(require("./extractClipPath"));

var _extractResponder = _interopRequireDefault(require("./extractResponder"));

var _extractOpacity = _interopRequireDefault(require("./extractOpacity"));

var _util = require("../util");

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function propsAndStyles(props) {
  var style = props.style;
  return _objectSpread({}, Array.isArray(style) ? Object.assign.apply(Object, [{}].concat((0, _toConsumableArray2.default)(style))) : style, {}, props);
}

function extractProps(props, ref) {
  var opacity = props.opacity,
      onLayout = props.onLayout,
      id = props.id,
      clipPath = props.clipPath,
      mask = props.mask,
      transform = props.transform;
  var styleProperties = [];
  var transformProps = (0, _extractTransform.props2transform)(props);
  var matrix = (0, _extractTransform.transformToMatrix)(transformProps, transform);

  var extracted = _objectSpread({
    matrix: matrix,
    onLayout: onLayout
  }, transformProps, {
    propList: styleProperties,
    opacity: (0, _extractOpacity.default)(opacity)
  }, (0, _extractResponder.default)(props, ref), {}, (0, _extractFill.default)(props, styleProperties), {}, (0, _extractStroke.default)(props, styleProperties));

  if (id) {
    extracted.name = id;
  }

  if (clipPath) {
    (0, _extends2.default)(extracted, (0, _extractClipPath.default)(props));
  }

  if (mask) {
    var matched = mask.match(_util.idPattern);

    if (matched) {
      extracted.mask = matched[1];
    } else {
      console.warn('Invalid `mask` prop, expected a mask like "#id", but got: "' + mask + '"');
    }
  }

  return extracted;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4dHJhY3RQcm9wcy50cyJdLCJuYW1lcyI6WyJzdHlsZSIsInByb3BzIiwiQXJyYXkiLCJPYmplY3QiLCJvcGFjaXR5Iiwib25MYXlvdXQiLCJpZCIsImNsaXBQYXRoIiwibWFzayIsInRyYW5zZm9ybSIsInN0eWxlUHJvcGVydGllcyIsInRyYW5zZm9ybVByb3BzIiwibWF0cml4IiwiZXh0cmFjdGVkIiwicHJvcExpc3QiLCJtYXRjaGVkIiwiaWRQYXR0ZXJuIiwiY29uc29sZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLFlBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsaUJBQUEsQ0FBQTs7QUFDQSxJQUFBLGNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsbUJBQUEsQ0FBQTs7QUFDQSxJQUFBLGlCQUFBLEdBQUEsT0FBQSxzQkFBQTs7QUFDQSxJQUFBLGdCQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLHFCQUFBLENBQUE7O0FBQ0EsSUFBQSxpQkFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxzQkFBQSxDQUFBOztBQUNBLElBQUEsZUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxvQkFBQSxDQUFBOztBQUNBLElBQUEsS0FBQSxHQUFBLE9BQUEsV0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVdPOztBQUFBLFNBQUEsY0FBQSxDQUFBLEtBQUEsRUFBNkQ7QUFBQSxNQUMxREEsS0FEMEQsR0FDaERDLEtBRGdELENBQUEsS0FBQTtBQUVsRSxTQUFBLGFBQUEsQ0FBQSxFQUFBLEVBQ01DLEtBQUssQ0FBTEEsT0FBQUEsQ0FBQUEsS0FBQUEsSUFBdUJDLE1BQU0sQ0FBTkEsTUFBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsTUFBQUEsRUFBTSxDQUFBLEVBQUEsRUFBQSxNQUFBLENBQUEsQ0FBQSxHQUFBLG1CQUFBLENBQUEsT0FBQSxFQUE3QkQsS0FBNkIsQ0FBQSxDQUFOQyxDQUF2QkQsR0FETixLQUFBLEVBQUEsRUFBQSxFQUFBLEtBQUEsQ0FBQTtBQU1hOztBQUFBLFNBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxHQUFBLEVBY2I7QUFBQSxNQUNRRSxPQURSLEdBQzZESCxLQUQ3RCxDQUFBLE9BQUE7QUFBQSxNQUNpQkksUUFEakIsR0FDNkRKLEtBRDdELENBQUEsUUFBQTtBQUFBLE1BQzJCSyxFQUQzQixHQUM2REwsS0FEN0QsQ0FBQSxFQUFBO0FBQUEsTUFDK0JNLFFBRC9CLEdBQzZETixLQUQ3RCxDQUFBLFFBQUE7QUFBQSxNQUN5Q08sSUFEekMsR0FDNkRQLEtBRDdELENBQUEsSUFBQTtBQUFBLE1BQytDUSxTQUQvQyxHQUM2RFIsS0FEN0QsQ0FBQSxTQUFBO0FBRUEsTUFBTVMsZUFBeUIsR0FBL0IsRUFBQTtBQUNBLE1BQU1DLGNBQWMsR0FBRyxDQUFBLEdBQUEsaUJBQUEsQ0FBQSxlQUFBLEVBQXZCLEtBQXVCLENBQXZCO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLENBQUEsR0FBQSxpQkFBQSxDQUFBLGlCQUFBLEVBQUEsY0FBQSxFQUFmLFNBQWUsQ0FBZjs7QUFDQSxNQUFNQyxTQVFMLEdBQUEsYUFBQSxDQUFBO0FBQ0NELElBQUFBLE1BQU0sRUFEUCxNQUFBO0FBRUNQLElBQUFBLFFBQVEsRUFGVDtBQUFBLEdBQUEsRUFBQSxjQUFBLEVBQUE7QUFJQ1MsSUFBQUEsUUFBUSxFQUpULGVBQUE7QUFLQ1YsSUFBQUEsT0FBTyxFQUFFLENBQUEsR0FBQSxlQUFBLENBQUEsT0FBQSxFQUxWLE9BS1U7QUFMVixHQUFBLEVBTUksQ0FBQSxHQUFBLGlCQUFBLENBQUEsT0FBQSxFQUFBLEtBQUEsRUFOSixHQU1JLENBTkosRUFBQSxFQUFBLEVBT0ksQ0FBQSxHQUFBLFlBQUEsQ0FBQSxPQUFBLEVBQUEsS0FBQSxFQVBKLGVBT0ksQ0FQSixFQUFBLEVBQUEsRUFRSSxDQUFBLEdBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxLQUFBLEVBaEJMLGVBZ0JLLENBUkosQ0FSRDs7QUFtQkEsTUFBQSxFQUFBLEVBQVE7QUFDTlMsSUFBQUEsU0FBUyxDQUFUQSxJQUFBQSxHQUFBQSxFQUFBQTtBQUdGOztBQUFBLE1BQUEsUUFBQSxFQUFjO0FBQ1osS0FBQSxHQUFBLFNBQUEsQ0FBQSxPQUFBLEVBQUEsU0FBQSxFQUF5QixDQUFBLEdBQUEsZ0JBQUEsQ0FBQSxPQUFBLEVBQXpCLEtBQXlCLENBQXpCO0FBR0Y7O0FBQUEsTUFBQSxJQUFBLEVBQVU7QUFDUixRQUFNRSxPQUFPLEdBQUdQLElBQUksQ0FBSkEsS0FBQUEsQ0FBV1EsS0FBQUEsQ0FBM0IsU0FBZ0JSLENBQWhCOztBQUVBLFFBQUEsT0FBQSxFQUFhO0FBQ1hLLE1BQUFBLFNBQVMsQ0FBVEEsSUFBQUEsR0FBaUJFLE9BQU8sQ0FBeEJGLENBQXdCLENBQXhCQTtBQURGLEtBQUEsTUFFTztBQUNMSSxNQUFBQSxPQUFPLENBQVBBLElBQUFBLENBQ0UsZ0VBQUEsSUFBQSxHQURGQSxHQUFBQTtBQU1IO0FBRUQ7O0FBQUEsU0FBQSxTQUFBO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXh0cmFjdEZpbGwgZnJvbSAnLi9leHRyYWN0RmlsbCc7XG5pbXBvcnQgZXh0cmFjdFN0cm9rZSBmcm9tICcuL2V4dHJhY3RTdHJva2UnO1xuaW1wb3J0IHsgdHJhbnNmb3JtVG9NYXRyaXgsIHByb3BzMnRyYW5zZm9ybSB9IGZyb20gJy4vZXh0cmFjdFRyYW5zZm9ybSc7XG5pbXBvcnQgZXh0cmFjdENsaXBQYXRoIGZyb20gJy4vZXh0cmFjdENsaXBQYXRoJztcbmltcG9ydCBleHRyYWN0UmVzcG9uZGVyIGZyb20gJy4vZXh0cmFjdFJlc3BvbmRlcic7XG5pbXBvcnQgZXh0cmFjdE9wYWNpdHkgZnJvbSAnLi9leHRyYWN0T3BhY2l0eSc7XG5pbXBvcnQgeyBpZFBhdHRlcm4gfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7XG4gIENsaXBQcm9wcyxcbiAgRmlsbFByb3BzLFxuICBOdW1iZXJQcm9wLFxuICBSZXNwb25kZXJQcm9wcyxcbiAgU3Ryb2tlUHJvcHMsXG4gIFRyYW5zZm9ybVByb3BzLFxufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIHByb3BzQW5kU3R5bGVzKHByb3BzOiBPYmplY3QgJiB7IHN0eWxlPzogW10gfCB7fSB9KSB7XG4gIGNvbnN0IHsgc3R5bGUgfSA9IHByb3BzO1xuICByZXR1cm4ge1xuICAgIC4uLihBcnJheS5pc0FycmF5KHN0eWxlKSA/IE9iamVjdC5hc3NpZ24oe30sIC4uLnN0eWxlKSA6IHN0eWxlKSxcbiAgICAuLi5wcm9wcyxcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0cmFjdFByb3BzKFxuICBwcm9wczoge1xuICAgIGlkPzogc3RyaW5nO1xuICAgIG1hc2s/OiBzdHJpbmc7XG4gICAgY2xpcFBhdGg/OiBzdHJpbmc7XG4gICAgb3BhY2l0eT86IE51bWJlclByb3A7XG4gICAgb25MYXlvdXQ/OiAoKSA9PiB2b2lkO1xuICAgIHRyYW5zZm9ybT86IG51bWJlcltdIHwgc3RyaW5nIHwgVHJhbnNmb3JtUHJvcHM7XG4gIH0gJiBUcmFuc2Zvcm1Qcm9wcyAmXG4gICAgUmVzcG9uZGVyUHJvcHMgJlxuICAgIFN0cm9rZVByb3BzICZcbiAgICBGaWxsUHJvcHMgJlxuICAgIENsaXBQcm9wcyxcbiAgcmVmOiBPYmplY3QsXG4pIHtcbiAgY29uc3QgeyBvcGFjaXR5LCBvbkxheW91dCwgaWQsIGNsaXBQYXRoLCBtYXNrLCB0cmFuc2Zvcm0gfSA9IHByb3BzO1xuICBjb25zdCBzdHlsZVByb3BlcnRpZXM6IHN0cmluZ1tdID0gW107XG4gIGNvbnN0IHRyYW5zZm9ybVByb3BzID0gcHJvcHMydHJhbnNmb3JtKHByb3BzKTtcbiAgY29uc3QgbWF0cml4ID0gdHJhbnNmb3JtVG9NYXRyaXgodHJhbnNmb3JtUHJvcHMsIHRyYW5zZm9ybSk7XG4gIGNvbnN0IGV4dHJhY3RlZDoge1xuICAgIG5hbWU/OiBzdHJpbmc7XG4gICAgbWFzaz86IHN0cmluZztcbiAgICBvcGFjaXR5OiBudW1iZXI7XG4gICAgbWF0cml4OiBudW1iZXJbXTtcbiAgICBwcm9wTGlzdDogc3RyaW5nW107XG4gICAgb25MYXlvdXQ/OiAoKSA9PiB2b2lkO1xuICAgIHJlZj86IChpbnN0YW5jZTogQ29tcG9uZW50IHwgbnVsbCkgPT4gdm9pZDtcbiAgfSA9IHtcbiAgICBtYXRyaXgsXG4gICAgb25MYXlvdXQsXG4gICAgLi4udHJhbnNmb3JtUHJvcHMsXG4gICAgcHJvcExpc3Q6IHN0eWxlUHJvcGVydGllcyxcbiAgICBvcGFjaXR5OiBleHRyYWN0T3BhY2l0eShvcGFjaXR5KSxcbiAgICAuLi5leHRyYWN0UmVzcG9uZGVyKHByb3BzLCByZWYpLFxuICAgIC4uLmV4dHJhY3RGaWxsKHByb3BzLCBzdHlsZVByb3BlcnRpZXMpLFxuICAgIC4uLmV4dHJhY3RTdHJva2UocHJvcHMsIHN0eWxlUHJvcGVydGllcyksXG4gIH07XG5cbiAgaWYgKGlkKSB7XG4gICAgZXh0cmFjdGVkLm5hbWUgPSBpZDtcbiAgfVxuXG4gIGlmIChjbGlwUGF0aCkge1xuICAgIE9iamVjdC5hc3NpZ24oZXh0cmFjdGVkLCBleHRyYWN0Q2xpcFBhdGgocHJvcHMpKTtcbiAgfVxuXG4gIGlmIChtYXNrKSB7XG4gICAgY29uc3QgbWF0Y2hlZCA9IG1hc2subWF0Y2goaWRQYXR0ZXJuKTtcblxuICAgIGlmIChtYXRjaGVkKSB7XG4gICAgICBleHRyYWN0ZWQubWFzayA9IG1hdGNoZWRbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ0ludmFsaWQgYG1hc2tgIHByb3AsIGV4cGVjdGVkIGEgbWFzayBsaWtlIFwiI2lkXCIsIGJ1dCBnb3Q6IFwiJyArXG4gICAgICAgICAgbWFzayArXG4gICAgICAgICAgJ1wiJyxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV4dHJhY3RlZDtcbn1cbiJdfQ==