{"version":3,"sources":["setupJest.ts"],"names":["Enzyme","configure","adapter","Adapter","expect","extend","toMatchDiffSnapshot","diff","originalConsoleError","console","error","message","includes","test","process","env","ALLOW_CONSOLE_LOGS","originalLoggers","warn","logToError","type","args","constructorOpt","explanation","chalk","white","gray","Error","msg","red","err","stack","replace","format","slice","captureStackTrace","beforeEach","done","types","forEach","handler","fail","jest","spyOn","mockImplementation"],"mappings":"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","sourcesContent":["// re: https://github.com/facebook/react-native/issues/19955\n// and https://github.com/facebook/metro/pull/198\n//\n// import applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\"\n// import initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\"\n// declare var babelHelpers: any\n// Object.assign(babelHelpers, { applyDecoratedDescriptor, initializerDefineProperty })\n// import \"@babel/runtime\"\n\nimport chalk from \"chalk\"\nimport Enzyme from \"enzyme\"\nimport Adapter from \"enzyme-adapter-react-16\"\nimport expect from \"expect\"\nimport { format } from \"util\"\n\nEnzyme.configure({ adapter: new Adapter() })\n\n// Waiting on https://github.com/thymikee/snapshot-diff/pull/17\nimport diff from \"snapshot-diff\"\nexpect.extend({ toMatchDiffSnapshot: (diff as any).toMatchDiffSnapshot })\n\nconst originalConsoleError = console.error\n\n// TODO: Remove once we're no longer using JSDOM for enzyme static rendering.\nconsole.error = (message?: any) => {\n  if (\n    typeof message === \"string\" &&\n    (message.includes(\"is using uppercase HTML. Always use lowercase HTML tags in React.\") ||\n      /Warning: React does not recognize the `\\w+` prop on a DOM element\\./.test(message) ||\n      /Warning: The tag <\\w+> is unrecognized in this browser\\./.test(message) ||\n      /Warning: Unknown event handler property `\\w+`\\./.test(message) ||\n      /Warning: Received `\\w+` for a non-boolean attribute `\\w+`\\./.test(message) ||\n      /Warning: [\\w\\s]+ has been extracted from react-native core/.test(message))\n  ) {\n    // NOOP\n  } else {\n    originalConsoleError(message)\n  }\n}\n\ndeclare const process: any\n\nif (process.env.ALLOW_CONSOLE_LOGS !== \"true\") {\n  const originalLoggers = {\n    error: console.error,\n    warn: console.warn,\n  }\n\n  function logToError(type, args, constructorOpt: () => void) {\n    const explanation =\n      chalk.white(`Test failed due to \\`console.${type}(â€¦)\\` call.\\n`) +\n      chalk.gray(\"(Disable with ALLOW_CONSOLE_LOGS=true env variable.)\\n\\n\")\n    if (args[0] instanceof Error) {\n      const msg = explanation + chalk.red(args[0].message)\n      const err = new Error(msg)\n      err.stack = args[0].stack.replace(`Error: ${args[0].message}`, msg)\n      return err\n    } else if (\n      // Because we use react-dom in tests to render react-native components, a few warnings are being logged that we do\n      // not care for, so ignore these.\n      !args[0].includes(\"is using incorrect casing\") &&\n      !args[0].includes(\"is unrecognized in this browser\") &&\n      ![args[0].includes(\"React does not recognize the `testID` prop on a DOM element.\")]\n    ) {\n      const err = new Error(explanation + chalk.red(format(args[0], ...args.slice(1))))\n      ;(Error as any).captureStackTrace(err, constructorOpt)\n      return err\n    }\n    return null\n  }\n\n  beforeEach(done => {\n    const types: Array<\"error\" | \"warn\"> = [\"error\", \"warn\"]\n    types.forEach(type => {\n      // Don't spy on loggers that have been modified by the current test.\n      if (console[type] === originalLoggers[type]) {\n        const handler = (...args) => {\n          const error = logToError(type, args, handler)\n          if (error) {\n            done.fail(error)\n          }\n        }\n        jest.spyOn(console, type).mockImplementation(handler)\n      }\n    })\n    done() // it is important to call this here or every test will timeout\n  })\n}\n\n// jest.mock(\"./Components/Radio\", () => null)\n\n// jest.mock(\"@react-native-community/async-storage\", () => ({\n//   AsyncStorage: {\n//     setItem: jest.fn(() => {\n//       return new Promise((resolve, reject) => {\n//         resolve(null)\n//       })\n//     }),\n//     multiSet: jest.fn(() => {\n//       return new Promise((resolve, reject) => {\n//         resolve(null)\n//       })\n//     }),\n//     getItem: jest.fn(() => {\n//       return new Promise((resolve, reject) => {\n//         resolve({ bag: { items: [] } })\n//       })\n//     }),\n//     multiGet: jest.fn(() => {\n//       return new Promise((resolve, reject) => {\n//         resolve(null)\n//       })\n//     }),\n//     removeItem: jest.fn(() => {\n//       return new Promise((resolve, reject) => {\n//         resolve(null)\n//       })\n//     }),\n//     getAllKeys: jest.fn(() => {\n//       return new Promise(resolve => {\n//         resolve([\"one\", \"two\", \"three\"])\n//       })\n//     }),\n//   },\n// }))\n"]}