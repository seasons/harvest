363e713d8d4154379dbeba7f16416a98
'use strict';

var NativeModules = require('NativeModules');

var invariant = require('invariant');

var FrameRateLogger = {
  setGlobalOptions: function setGlobalOptions(options) {
    if (options.debug !== undefined) {
      invariant(NativeModules.FrameRateLogger, 'Trying to debug FrameRateLogger without the native module!');
    }

    if (NativeModules.FrameRateLogger) {
      var optionsClone = {
        debug: !!options.debug,
        reportStackTraces: !!options.reportStackTraces
      };
      Object.freeze(optionsClone);
      Object.seal(optionsClone);
      NativeModules.FrameRateLogger.setGlobalOptions(optionsClone);
    }
  },
  setContext: function setContext(context) {
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setContext(context);
  },
  beginScroll: function beginScroll() {
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.beginScroll();
  },
  endScroll: function endScroll() {
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.endScroll();
  }
};
module.exports = FrameRateLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZyYW1lUmF0ZUxvZ2dlci5qcyJdLCJuYW1lcyI6WyJOYXRpdmVNb2R1bGVzIiwicmVxdWlyZSIsImludmFyaWFudCIsIkZyYW1lUmF0ZUxvZ2dlciIsInNldEdsb2JhbE9wdGlvbnMiLCJvcHRpb25zIiwiZGVidWciLCJ1bmRlZmluZWQiLCJvcHRpb25zQ2xvbmUiLCJyZXBvcnRTdGFja1RyYWNlcyIsIk9iamVjdCIsImZyZWV6ZSIsInNlYWwiLCJzZXRDb250ZXh0IiwiY29udGV4dCIsImJlZ2luU2Nyb2xsIiwiZW5kU2Nyb2xsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7O0FBRUEsSUFBTUEsYUFBYSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUE3Qjs7QUFFQSxJQUFNQyxTQUFTLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBQXpCOztBQWtCQSxJQUFNRSxlQUFlLEdBQUc7QUFLdEJDLEVBQUFBLGdCQUFnQixFQUFFLDBCQUFTQyxPQUFULEVBR2Y7QUFDRCxRQUFJQSxPQUFPLENBQUNDLEtBQVIsS0FBa0JDLFNBQXRCLEVBQWlDO0FBQy9CTCxNQUFBQSxTQUFTLENBQ1BGLGFBQWEsQ0FBQ0csZUFEUCxFQUVQLDREQUZPLENBQVQ7QUFJRDs7QUFDRCxRQUFJSCxhQUFhLENBQUNHLGVBQWxCLEVBQW1DO0FBSWpDLFVBQU1LLFlBQVksR0FBRztBQUNuQkYsUUFBQUEsS0FBSyxFQUFFLENBQUMsQ0FBQ0QsT0FBTyxDQUFDQyxLQURFO0FBRW5CRyxRQUFBQSxpQkFBaUIsRUFBRSxDQUFDLENBQUNKLE9BQU8sQ0FBQ0k7QUFGVixPQUFyQjtBQUlBQyxNQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FBY0gsWUFBZDtBQUNBRSxNQUFBQSxNQUFNLENBQUNFLElBQVAsQ0FBWUosWUFBWjtBQUNBUixNQUFBQSxhQUFhLENBQUNHLGVBQWQsQ0FBOEJDLGdCQUE5QixDQUErQ0ksWUFBL0M7QUFDRDtBQUNGLEdBM0JxQjtBQWlDdEJLLEVBQUFBLFVBQVUsRUFBRSxvQkFBU0MsT0FBVCxFQUEwQjtBQUNwQ2QsSUFBQUEsYUFBYSxDQUFDRyxlQUFkLElBQ0VILGFBQWEsQ0FBQ0csZUFBZCxDQUE4QlUsVUFBOUIsQ0FBeUNDLE9BQXpDLENBREY7QUFFRCxHQXBDcUI7QUEwQ3RCQyxFQUFBQSxXQTFDc0IseUJBMENSO0FBQ1pmLElBQUFBLGFBQWEsQ0FBQ0csZUFBZCxJQUNFSCxhQUFhLENBQUNHLGVBQWQsQ0FBOEJZLFdBQTlCLEVBREY7QUFFRCxHQTdDcUI7QUFtRHRCQyxFQUFBQSxTQW5Ec0IsdUJBbURWO0FBQ1ZoQixJQUFBQSxhQUFhLENBQUNHLGVBQWQsSUFBaUNILGFBQWEsQ0FBQ0csZUFBZCxDQUE4QmEsU0FBOUIsRUFBakM7QUFDRDtBQXJEcUIsQ0FBeEI7QUF3REFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmYsZUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgTmF0aXZlTW9kdWxlcyA9IHJlcXVpcmUoJ05hdGl2ZU1vZHVsZXMnKTtcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbi8qKlxuICogRmxvdyBBUEkgZm9yIG5hdGl2ZSBGcmFtZVJhdGVMb2dnZXIgbW9kdWxlLiBJZiB0aGUgbmF0aXZlIG1vZHVsZSBpcyBub3QgaW5zdGFsbGVkLCBmdW5jdGlvbiBjYWxsc1xuICogYXJlIGp1c3Qgbm8tb3BzLlxuICpcbiAqIFR5cGljYWwgYmVoYXZpb3IgaXMgdGhhdCBgc2V0Q29udGV4dGAgaXMgY2FsbGVkIHdoZW4gYSBuZXcgc2NyZWVuIGlzIGxvYWRlZCAoZS5nLiB2aWEgYVxuICogbmF2aWdhdGlvbiBpbnRlZ3JhdGlvbiksIGFuZCB0aGVuIGBiZWdpblNjcm9sbGAgaXMgY2FsbGVkIGJ5IGBTY3JvbGxSZXNwb25kZXJgIGF0IHdoaWNoIHBvaW50IHRoZVxuICogbmF0aXZlIG1vZHVsZSB0aGVuIGJlZ2lucyB0cmFja2luZyBmcmFtZSBkcm9wcy4gV2hlbiBgU2Nyb2xsUmVzcG9uZGVyYCBjYWxscyBgZW5kU2Nyb2xsYCwgdGhlXG4gKiBuYXRpdmUgbW9kdWxlIGdhdGhlcnMgdXAgYWxsIGl0J3MgZnJhbWUgZHJvcCBkYXRhIGFuZCByZXBvcnRzIGl0IHZpYSBhbiBhbmFseXRpY3MgcGlwZWxpbmUgZm9yXG4gKiBhbmFseXNpcy5cbiAqXG4gKiBOb3RlIHRoYXQgYGJlZ2luU2Nyb2xsYCBtYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIGJ5IGBTY3JvbGxSZXNwb25kZXJgIC0gdW5jbGVhciBpZiB0aGF0J3MgYVxuICogYnVnLCBidXQgdGhlIG5hdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIHJvYnVzdCB0byB0aGF0LlxuICpcbiAqIEluIHRoZSBmdXR1cmUgd2UgbWF5IGFkZCBzdXBwb3J0IGZvciB0cmFja2luZyBmcmFtZSBkcm9wcyBpbiBvdGhlciB0eXBlcyBvZiBpbnRlcmFjdGlvbnMgYmV5b25kXG4gKiBzY3JvbGxpbmcuXG4gKi9cbmNvbnN0IEZyYW1lUmF0ZUxvZ2dlciA9IHtcbiAgLyoqXG4gICAqIEVuYWJsZSBgZGVidWdgIHRvIHNlZSBsb2NhbCBsb2dzIG9mIHdoYXQncyBnb2luZyBvbi4gYHJlcG9ydFN0YWNrVHJhY2VzYCB3aWxsIGdyYWIgc3RhY2sgdHJhY2VzXG4gICAqIGR1cmluZyBVSSB0aHJlYWQgc3RhbGxzIGFuZCB1cGxvYWQgdGhlbSBpZiB0aGUgbmF0aXZlIG1vZHVsZSBzdXBwb3J0cyBpdC5cbiAgICovXG4gIHNldEdsb2JhbE9wdGlvbnM6IGZ1bmN0aW9uKG9wdGlvbnM6IHtcbiAgICBkZWJ1Zz86IGJvb2xlYW4sXG4gICAgcmVwb3J0U3RhY2tUcmFjZXM/OiBib29sZWFuLFxuICB9KSB7XG4gICAgaWYgKG9wdGlvbnMuZGVidWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBOYXRpdmVNb2R1bGVzLkZyYW1lUmF0ZUxvZ2dlcixcbiAgICAgICAgJ1RyeWluZyB0byBkZWJ1ZyBGcmFtZVJhdGVMb2dnZXIgd2l0aG91dCB0aGUgbmF0aXZlIG1vZHVsZSEnLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKE5hdGl2ZU1vZHVsZXMuRnJhbWVSYXRlTG9nZ2VyKSB7XG4gICAgICAvLyBGcmVlemUgdGhlIG9iamVjdCB0byBhdm9pZCB0aGUgcHJlcGFjayB3YXJuaW5nIChQUDAwMTcpIGFib3V0IGxlYWtpbmdcbiAgICAgIC8vIHVuZnJvemVuIG9iamVjdHMuXG4gICAgICAvLyBOZWVkcyB0byBjbG9uZSB0aGUgb2JqZWN0IGZpcnN0IHRvIGF2b2lkIG1vZGlmeWluZyB0aGUgYXJndW1lbnQuXG4gICAgICBjb25zdCBvcHRpb25zQ2xvbmUgPSB7XG4gICAgICAgIGRlYnVnOiAhIW9wdGlvbnMuZGVidWcsXG4gICAgICAgIHJlcG9ydFN0YWNrVHJhY2VzOiAhIW9wdGlvbnMucmVwb3J0U3RhY2tUcmFjZXMsXG4gICAgICB9O1xuICAgICAgT2JqZWN0LmZyZWV6ZShvcHRpb25zQ2xvbmUpO1xuICAgICAgT2JqZWN0LnNlYWwob3B0aW9uc0Nsb25lKTtcbiAgICAgIE5hdGl2ZU1vZHVsZXMuRnJhbWVSYXRlTG9nZ2VyLnNldEdsb2JhbE9wdGlvbnMob3B0aW9uc0Nsb25lKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIE11c3QgY2FsbCBgc2V0Q29udGV4dGAgYmVmb3JlIGFueSBldmVudHMgY2FuIGJlIHByb3Blcmx5IHRyYWNrZWQsIHdoaWNoIGlzIGRvbmUgYXV0b21hdGljYWxseVxuICAgKiBpbiBgQXBwUmVnaXN0cnlgLCBidXQgbmF2aWdhdGlvbiBpcyBhbHNvIGEgY29tbW9uIHBsYWNlIHRvIGhvb2sgaW4uXG4gICAqL1xuICBzZXRDb250ZXh0OiBmdW5jdGlvbihjb250ZXh0OiBzdHJpbmcpIHtcbiAgICBOYXRpdmVNb2R1bGVzLkZyYW1lUmF0ZUxvZ2dlciAmJlxuICAgICAgTmF0aXZlTW9kdWxlcy5GcmFtZVJhdGVMb2dnZXIuc2V0Q29udGV4dChjb250ZXh0KTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsbGVkIGluIGBTY3JvbGxSZXNwb25kZXJgIHNvIGFueSBjb21wb25lbnQgdGhhdCB1c2VzIHRoYXQgbW9kdWxlIHdpbGwgaGFuZGxlIHRoaXNcbiAgICogYXV0b21hdGljYWxseS5cbiAgICovXG4gIGJlZ2luU2Nyb2xsKCkge1xuICAgIE5hdGl2ZU1vZHVsZXMuRnJhbWVSYXRlTG9nZ2VyICYmXG4gICAgICBOYXRpdmVNb2R1bGVzLkZyYW1lUmF0ZUxvZ2dlci5iZWdpblNjcm9sbCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgaW4gYFNjcm9sbFJlc3BvbmRlcmAgc28gYW55IGNvbXBvbmVudCB0aGF0IHVzZXMgdGhhdCBtb2R1bGUgd2lsbCBoYW5kbGUgdGhpc1xuICAgKiBhdXRvbWF0aWNhbGx5LlxuICAgKi9cbiAgZW5kU2Nyb2xsKCkge1xuICAgIE5hdGl2ZU1vZHVsZXMuRnJhbWVSYXRlTG9nZ2VyICYmIE5hdGl2ZU1vZHVsZXMuRnJhbWVSYXRlTG9nZ2VyLmVuZFNjcm9sbCgpO1xuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGcmFtZVJhdGVMb2dnZXI7XG4iXX0=