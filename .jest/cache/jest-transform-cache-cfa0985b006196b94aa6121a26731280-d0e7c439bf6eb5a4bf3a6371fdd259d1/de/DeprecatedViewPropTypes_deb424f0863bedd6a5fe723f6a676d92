a0a39afacd140dc9c6babdf67e9c2f8d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DeprecatedEdgeInsetsPropType = require('DeprecatedEdgeInsetsPropType');

var PlatformViewPropTypes = require('PlatformViewPropTypes');

var PropTypes = require('prop-types');

var DeprecatedStyleSheetPropType = require('DeprecatedStyleSheetPropType');

var DeprecatedViewStylePropTypes = require('DeprecatedViewStylePropTypes');

var _require = require('DeprecatedViewAccessibility'),
    DeprecatedAccessibilityComponentTypes = _require.DeprecatedAccessibilityComponentTypes,
    DeprecatedAccessibilityTraits = _require.DeprecatedAccessibilityTraits,
    DeprecatedAccessibilityRoles = _require.DeprecatedAccessibilityRoles,
    DeprecatedAccessibilityStates = _require.DeprecatedAccessibilityStates;

var stylePropType = DeprecatedStyleSheetPropType(DeprecatedViewStylePropTypes);
module.exports = _objectSpread({
  accessible: PropTypes.bool,
  accessibilityLabel: PropTypes.node,
  accessibilityHint: PropTypes.string,
  accessibilityActions: PropTypes.arrayOf(PropTypes.string),
  accessibilityIgnoresInvertColors: PropTypes.bool,
  accessibilityComponentType: PropTypes.oneOf(DeprecatedAccessibilityComponentTypes),
  accessibilityRole: PropTypes.oneOf(DeprecatedAccessibilityRoles),
  accessibilityStates: PropTypes.arrayOf(PropTypes.oneOf(DeprecatedAccessibilityStates)),
  accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),
  importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
  accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(DeprecatedAccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(DeprecatedAccessibilityTraits))]),
  accessibilityViewIsModal: PropTypes.bool,
  accessibilityElementsHidden: PropTypes.bool,
  onAccessibilityAction: PropTypes.func,
  onAccessibilityTap: PropTypes.func,
  onMagicTap: PropTypes.func,
  testID: PropTypes.string,
  nativeID: PropTypes.string,
  onResponderGrant: PropTypes.func,
  onResponderMove: PropTypes.func,
  onResponderReject: PropTypes.func,
  onResponderRelease: PropTypes.func,
  onResponderTerminate: PropTypes.func,
  onResponderTerminationRequest: PropTypes.func,
  onStartShouldSetResponder: PropTypes.func,
  onStartShouldSetResponderCapture: PropTypes.func,
  onMoveShouldSetResponder: PropTypes.func,
  onMoveShouldSetResponderCapture: PropTypes.func,
  hitSlop: DeprecatedEdgeInsetsPropType,
  onLayout: PropTypes.func,
  pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
  style: stylePropType,
  removeClippedSubviews: PropTypes.bool,
  renderToHardwareTextureAndroid: PropTypes.bool,
  shouldRasterizeIOS: PropTypes.bool,
  collapsable: PropTypes.bool,
  needsOffscreenAlphaCompositing: PropTypes.bool
}, PlatformViewPropTypes);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRlcHJlY2F0ZWRWaWV3UHJvcFR5cGVzLmpzIl0sIm5hbWVzIjpbIkRlcHJlY2F0ZWRFZGdlSW5zZXRzUHJvcFR5cGUiLCJyZXF1aXJlIiwiUGxhdGZvcm1WaWV3UHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiRGVwcmVjYXRlZFN0eWxlU2hlZXRQcm9wVHlwZSIsIkRlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMiLCJEZXByZWNhdGVkQWNjZXNzaWJpbGl0eUNvbXBvbmVudFR5cGVzIiwiRGVwcmVjYXRlZEFjY2Vzc2liaWxpdHlUcmFpdHMiLCJEZXByZWNhdGVkQWNjZXNzaWJpbGl0eVJvbGVzIiwiRGVwcmVjYXRlZEFjY2Vzc2liaWxpdHlTdGF0ZXMiLCJzdHlsZVByb3BUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFjY2Vzc2libGUiLCJib29sIiwiYWNjZXNzaWJpbGl0eUxhYmVsIiwibm9kZSIsImFjY2Vzc2liaWxpdHlIaW50Iiwic3RyaW5nIiwiYWNjZXNzaWJpbGl0eUFjdGlvbnMiLCJhcnJheU9mIiwiYWNjZXNzaWJpbGl0eUlnbm9yZXNJbnZlcnRDb2xvcnMiLCJhY2Nlc3NpYmlsaXR5Q29tcG9uZW50VHlwZSIsIm9uZU9mIiwiYWNjZXNzaWJpbGl0eVJvbGUiLCJhY2Nlc3NpYmlsaXR5U3RhdGVzIiwiYWNjZXNzaWJpbGl0eUxpdmVSZWdpb24iLCJpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5IiwiYWNjZXNzaWJpbGl0eVRyYWl0cyIsIm9uZU9mVHlwZSIsImFjY2Vzc2liaWxpdHlWaWV3SXNNb2RhbCIsImFjY2Vzc2liaWxpdHlFbGVtZW50c0hpZGRlbiIsIm9uQWNjZXNzaWJpbGl0eUFjdGlvbiIsImZ1bmMiLCJvbkFjY2Vzc2liaWxpdHlUYXAiLCJvbk1hZ2ljVGFwIiwidGVzdElEIiwibmF0aXZlSUQiLCJvblJlc3BvbmRlckdyYW50Iiwib25SZXNwb25kZXJNb3ZlIiwib25SZXNwb25kZXJSZWplY3QiLCJvblJlc3BvbmRlclJlbGVhc2UiLCJvblJlc3BvbmRlclRlcm1pbmF0ZSIsIm9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0Iiwib25TdGFydFNob3VsZFNldFJlc3BvbmRlciIsIm9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlIiwib25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyIiwib25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZSIsImhpdFNsb3AiLCJvbkxheW91dCIsInBvaW50ZXJFdmVudHMiLCJzdHlsZSIsInJlbW92ZUNsaXBwZWRTdWJ2aWV3cyIsInJlbmRlclRvSGFyZHdhcmVUZXh0dXJlQW5kcm9pZCIsInNob3VsZFJhc3Rlcml6ZUlPUyIsImNvbGxhcHNhYmxlIiwibmVlZHNPZmZzY3JlZW5BbHBoYUNvbXBvc2l0aW5nIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7OztBQUVBLElBQU1BLDRCQUE0QixHQUFHQyxPQUFPLENBQUMsOEJBQUQsQ0FBNUM7O0FBQ0EsSUFBTUMscUJBQXFCLEdBQUdELE9BQU8sQ0FBQyx1QkFBRCxDQUFyQzs7QUFDQSxJQUFNRSxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxZQUFELENBQXpCOztBQUNBLElBQU1HLDRCQUE0QixHQUFHSCxPQUFPLENBQUMsOEJBQUQsQ0FBNUM7O0FBQ0EsSUFBTUksNEJBQTRCLEdBQUdKLE9BQU8sQ0FBQyw4QkFBRCxDQUE1Qzs7ZUFPSUEsT0FBTyxDQUFDLDZCQUFELEM7SUFKVEsscUMsWUFBQUEscUM7SUFDQUMsNkIsWUFBQUEsNkI7SUFDQUMsNEIsWUFBQUEsNEI7SUFDQUMsNkIsWUFBQUEsNkI7O0FBR0YsSUFBTUMsYUFBYSxHQUFHTiw0QkFBNEIsQ0FDaERDLDRCQURnRCxDQUFsRDtBQUlBTSxNQUFNLENBQUNDLE9BQVA7QUFPRUMsRUFBQUEsVUFBVSxFQUFFVixTQUFTLENBQUNXLElBUHhCO0FBZ0JFQyxFQUFBQSxrQkFBa0IsRUFBRVosU0FBUyxDQUFDYSxJQWhCaEM7QUEwQkVDLEVBQUFBLGlCQUFpQixFQUFFZCxTQUFTLENBQUNlLE1BMUIvQjtBQWlDRUMsRUFBQUEsb0JBQW9CLEVBQUVoQixTQUFTLENBQUNpQixPQUFWLENBQWtCakIsU0FBUyxDQUFDZSxNQUE1QixDQWpDeEI7QUF3Q0VHLEVBQUFBLGdDQUFnQyxFQUFFbEIsU0FBUyxDQUFDVyxJQXhDOUM7QUFrREVRLEVBQUFBLDBCQUEwQixFQUFFbkIsU0FBUyxDQUFDb0IsS0FBVixDQUMxQmpCLHFDQUQwQixDQWxEOUI7QUF5REVrQixFQUFBQSxpQkFBaUIsRUFBRXJCLFNBQVMsQ0FBQ29CLEtBQVYsQ0FBZ0JmLDRCQUFoQixDQXpEckI7QUE4REVpQixFQUFBQSxtQkFBbUIsRUFBRXRCLFNBQVMsQ0FBQ2lCLE9BQVYsQ0FDbkJqQixTQUFTLENBQUNvQixLQUFWLENBQWdCZCw2QkFBaEIsQ0FEbUIsQ0E5RHZCO0FBeUVFaUIsRUFBQUEsdUJBQXVCLEVBQUV2QixTQUFTLENBQUNvQixLQUFWLENBQWdCLENBQUMsTUFBRCxFQUFTLFFBQVQsRUFBbUIsV0FBbkIsQ0FBaEIsQ0F6RTNCO0FBb0ZFSSxFQUFBQSx5QkFBeUIsRUFBRXhCLFNBQVMsQ0FBQ29CLEtBQVYsQ0FBZ0IsQ0FDekMsTUFEeUMsRUFFekMsS0FGeUMsRUFHekMsSUFIeUMsRUFJekMscUJBSnlDLENBQWhCLENBcEY3QjtBQXFHRUssRUFBQUEsbUJBQW1CLEVBQUV6QixTQUFTLENBQUMwQixTQUFWLENBQW9CLENBQ3ZDMUIsU0FBUyxDQUFDb0IsS0FBVixDQUFnQmhCLDZCQUFoQixDQUR1QyxFQUV2Q0osU0FBUyxDQUFDaUIsT0FBVixDQUFrQmpCLFNBQVMsQ0FBQ29CLEtBQVYsQ0FBZ0JoQiw2QkFBaEIsQ0FBbEIsQ0FGdUMsQ0FBcEIsQ0FyR3ZCO0FBbUhFdUIsRUFBQUEsd0JBQXdCLEVBQUUzQixTQUFTLENBQUNXLElBbkh0QztBQTZIRWlCLEVBQUFBLDJCQUEyQixFQUFFNUIsU0FBUyxDQUFDVyxJQTdIekM7QUFxSUVrQixFQUFBQSxxQkFBcUIsRUFBRTdCLFNBQVMsQ0FBQzhCLElBckluQztBQTZJRUMsRUFBQUEsa0JBQWtCLEVBQUUvQixTQUFTLENBQUM4QixJQTdJaEM7QUFxSkVFLEVBQUFBLFVBQVUsRUFBRWhDLFNBQVMsQ0FBQzhCLElBckp4QjtBQThKRUcsRUFBQUEsTUFBTSxFQUFFakMsU0FBUyxDQUFDZSxNQTlKcEI7QUF1S0VtQixFQUFBQSxRQUFRLEVBQUVsQyxTQUFTLENBQUNlLE1Bdkt0QjtBQXdMRW9CLEVBQUFBLGdCQUFnQixFQUFFbkMsU0FBUyxDQUFDOEIsSUF4TDlCO0FBa01FTSxFQUFBQSxlQUFlLEVBQUVwQyxTQUFTLENBQUM4QixJQWxNN0I7QUE2TUVPLEVBQUFBLGlCQUFpQixFQUFFckMsU0FBUyxDQUFDOEIsSUE3TS9CO0FBdU5FUSxFQUFBQSxrQkFBa0IsRUFBRXRDLFNBQVMsQ0FBQzhCLElBdk5oQztBQW9PRVMsRUFBQUEsb0JBQW9CLEVBQUV2QyxTQUFTLENBQUM4QixJQXBPbEM7QUErT0VVLEVBQUFBLDZCQUE2QixFQUFFeEMsU0FBUyxDQUFDOEIsSUEvTzNDO0FBeVBFVyxFQUFBQSx5QkFBeUIsRUFBRXpDLFNBQVMsQ0FBQzhCLElBelB2QztBQW9RRVksRUFBQUEsZ0NBQWdDLEVBQUUxQyxTQUFTLENBQUM4QixJQXBROUM7QUErUUVhLEVBQUFBLHdCQUF3QixFQUFFM0MsU0FBUyxDQUFDOEIsSUEvUXRDO0FBMFJFYyxFQUFBQSwrQkFBK0IsRUFBRTVDLFNBQVMsQ0FBQzhCLElBMVI3QztBQXVTRWUsRUFBQUEsT0FBTyxFQUFFaEQsNEJBdlNYO0FBb1RFaUQsRUFBQUEsUUFBUSxFQUFFOUMsU0FBUyxDQUFDOEIsSUFwVHRCO0FBMlRFaUIsRUFBQUEsYUFBYSxFQUFFL0MsU0FBUyxDQUFDb0IsS0FBVixDQUFnQixDQUFDLFVBQUQsRUFBYSxNQUFiLEVBQXFCLFVBQXJCLEVBQWlDLE1BQWpDLENBQWhCLENBM1RqQjtBQWdVRTRCLEVBQUFBLEtBQUssRUFBRXpDLGFBaFVUO0FBNFVFMEMsRUFBQUEscUJBQXFCLEVBQUVqRCxTQUFTLENBQUNXLElBNVVuQztBQXNWRXVDLEVBQUFBLDhCQUE4QixFQUFFbEQsU0FBUyxDQUFDVyxJQXRWNUM7QUErVkV3QyxFQUFBQSxrQkFBa0IsRUFBRW5ELFNBQVMsQ0FBQ1csSUEvVmhDO0FBMldFeUMsRUFBQUEsV0FBVyxFQUFFcEQsU0FBUyxDQUFDVyxJQTNXekI7QUFxWEUwQyxFQUFBQSw4QkFBOEIsRUFBRXJELFNBQVMsQ0FBQ1c7QUFyWDVDLEdBMFhLWixxQkExWEwiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEZXByZWNhdGVkRWRnZUluc2V0c1Byb3BUeXBlID0gcmVxdWlyZSgnRGVwcmVjYXRlZEVkZ2VJbnNldHNQcm9wVHlwZScpO1xuY29uc3QgUGxhdGZvcm1WaWV3UHJvcFR5cGVzID0gcmVxdWlyZSgnUGxhdGZvcm1WaWV3UHJvcFR5cGVzJyk7XG5jb25zdCBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5jb25zdCBEZXByZWNhdGVkU3R5bGVTaGVldFByb3BUeXBlID0gcmVxdWlyZSgnRGVwcmVjYXRlZFN0eWxlU2hlZXRQcm9wVHlwZScpO1xuY29uc3QgRGVwcmVjYXRlZFZpZXdTdHlsZVByb3BUeXBlcyA9IHJlcXVpcmUoJ0RlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMnKTtcblxuY29uc3Qge1xuICBEZXByZWNhdGVkQWNjZXNzaWJpbGl0eUNvbXBvbmVudFR5cGVzLFxuICBEZXByZWNhdGVkQWNjZXNzaWJpbGl0eVRyYWl0cyxcbiAgRGVwcmVjYXRlZEFjY2Vzc2liaWxpdHlSb2xlcyxcbiAgRGVwcmVjYXRlZEFjY2Vzc2liaWxpdHlTdGF0ZXMsXG59ID0gcmVxdWlyZSgnRGVwcmVjYXRlZFZpZXdBY2Nlc3NpYmlsaXR5Jyk7XG5cbmNvbnN0IHN0eWxlUHJvcFR5cGUgPSBEZXByZWNhdGVkU3R5bGVTaGVldFByb3BUeXBlKFxuICBEZXByZWNhdGVkVmlld1N0eWxlUHJvcFR5cGVzLFxuKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKlxuICAgKiBXaGVuIGB0cnVlYCwgaW5kaWNhdGVzIHRoYXQgdGhlIHZpZXcgaXMgYW4gYWNjZXNzaWJpbGl0eSBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCBhbGwgdGhlIHRvdWNoYWJsZSBlbGVtZW50cyBhcmUgYWNjZXNzaWJsZS5cbiAgICpcbiAgICogU2VlIGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3Mvdmlldy5odG1sI2FjY2Vzc2libGVcbiAgICovXG4gIGFjY2Vzc2libGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZXMgdGhlIHRleHQgdGhhdCdzIHJlYWQgYnkgdGhlIHNjcmVlbiByZWFkZXIgd2hlbiB0aGUgdXNlciBpbnRlcmFjdHNcbiAgICogd2l0aCB0aGUgZWxlbWVudC4gQnkgZGVmYXVsdCwgdGhlIGxhYmVsIGlzIGNvbnN0cnVjdGVkIGJ5IHRyYXZlcnNpbmcgYWxsXG4gICAqIHRoZSBjaGlsZHJlbiBhbmQgYWNjdW11bGF0aW5nIGFsbCB0aGUgYFRleHRgIG5vZGVzIHNlcGFyYXRlZCBieSBzcGFjZS5cbiAgICpcbiAgICogU2VlIGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3Mvdmlldy5odG1sI2FjY2Vzc2liaWxpdHlsYWJlbFxuICAgKi9cbiAgYWNjZXNzaWJpbGl0eUxhYmVsOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQW4gYWNjZXNzaWJpbGl0eSBoaW50IGhlbHBzIHVzZXJzIHVuZGVyc3RhbmQgd2hhdCB3aWxsIGhhcHBlbiB3aGVuIHRoZXkgcGVyZm9ybVxuICAgKiBhbiBhY3Rpb24gb24gdGhlIGFjY2Vzc2liaWxpdHkgZWxlbWVudCB3aGVuIHRoYXQgcmVzdWx0IGlzIG5vdCBvYnZpb3VzIGZyb20gdGhlXG4gICAqIGFjY2Vzc2liaWxpdHkgbGFiZWwuXG4gICAqXG4gICAqXG4gICAqIFNlZSBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL3ZpZXcuaHRtbCNhY2Nlc3NpYmlsaXR5SGludFxuICAgKi9cbiAgYWNjZXNzaWJpbGl0eUhpbnQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGFuIGFycmF5IG9mIGN1c3RvbSBhY3Rpb25zIGF2YWlsYWJsZSBmb3IgYWNjZXNzaWJpbGl0eS5cbiAgICpcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgYWNjZXNzaWJpbGl0eUFjdGlvbnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLFxuXG4gIC8qKlxuICAgKiBQcmV2ZW50cyB2aWV3IGZyb20gYmVpbmcgaW52ZXJ0ZWQgaWYgc2V0IHRvIHRydWUgYW5kIGNvbG9yIGludmVyc2lvbiBpcyB0dXJuZWQgb24uXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGFjY2Vzc2liaWxpdHlJZ25vcmVzSW52ZXJ0Q29sb3JzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHRvIGFjY2Vzc2liaWxpdHkgc2VydmljZXMgdG8gdHJlYXQgVUkgY29tcG9uZW50IGxpa2UgYVxuICAgKiBuYXRpdmUgb25lLiBXb3JrcyBmb3IgQW5kcm9pZCBvbmx5LlxuICAgKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKlxuICAgKiBTZWUgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy92aWV3Lmh0bWwjYWNjZXNzaWJpbGl0eWNvbXBvbmVudHR5cGVcbiAgICovXG4gIGFjY2Vzc2liaWxpdHlDb21wb25lbnRUeXBlOiBQcm9wVHlwZXMub25lT2YoXG4gICAgRGVwcmVjYXRlZEFjY2Vzc2liaWxpdHlDb21wb25lbnRUeXBlcyxcbiAgKSxcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHRvIGFjY2Vzc2liaWxpdHkgc2VydmljZXMgdG8gdHJlYXQgVUkgY29tcG9uZW50IGxpa2UgYSBzcGVjaWZpYyByb2xlLlxuICAgKi9cbiAgYWNjZXNzaWJpbGl0eVJvbGU6IFByb3BUeXBlcy5vbmVPZihEZXByZWNhdGVkQWNjZXNzaWJpbGl0eVJvbGVzKSxcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHRvIGFjY2Vzc2liaWxpdHkgc2VydmljZXMgdGhhdCBVSSBDb21wb25lbnQgaXMgaW4gYSBzcGVjaWZpYyBTdGF0ZS5cbiAgICovXG4gIGFjY2Vzc2liaWxpdHlTdGF0ZXM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFByb3BUeXBlcy5vbmVPZihEZXByZWNhdGVkQWNjZXNzaWJpbGl0eVN0YXRlcyksXG4gICksXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdG8gYWNjZXNzaWJpbGl0eSBzZXJ2aWNlcyB3aGV0aGVyIHRoZSB1c2VyIHNob3VsZCBiZSBub3RpZmllZFxuICAgKiB3aGVuIHRoaXMgdmlldyBjaGFuZ2VzLiBXb3JrcyBmb3IgQW5kcm9pZCBBUEkgPj0gMTkgb25seS5cbiAgICpcbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICpcbiAgICogU2VlIGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3Mvdmlldy5odG1sI2FjY2Vzc2liaWxpdHlsaXZlcmVnaW9uXG4gICAqL1xuICBhY2Nlc3NpYmlsaXR5TGl2ZVJlZ2lvbjogUHJvcFR5cGVzLm9uZU9mKFsnbm9uZScsICdwb2xpdGUnLCAnYXNzZXJ0aXZlJ10pLFxuXG4gIC8qKlxuICAgKiBDb250cm9scyBob3cgdmlldyBpcyBpbXBvcnRhbnQgZm9yIGFjY2Vzc2liaWxpdHkgd2hpY2ggaXMgaWYgaXRcbiAgICogZmlyZXMgYWNjZXNzaWJpbGl0eSBldmVudHMgYW5kIGlmIGl0IGlzIHJlcG9ydGVkIHRvIGFjY2Vzc2liaWxpdHkgc2VydmljZXNcbiAgICogdGhhdCBxdWVyeSB0aGUgc2NyZWVuLiBXb3JrcyBmb3IgQW5kcm9pZCBvbmx5LlxuICAgKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKlxuICAgKiBTZWUgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy92aWV3Lmh0bWwjaW1wb3J0YW50Zm9yYWNjZXNzaWJpbGl0eVxuICAgKi9cbiAgaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eTogUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnYXV0bycsXG4gICAgJ3llcycsXG4gICAgJ25vJyxcbiAgICAnbm8taGlkZS1kZXNjZW5kYW50cycsXG4gIF0pLFxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhZGRpdGlvbmFsIHRyYWl0cyB0byBzY3JlZW4gcmVhZGVyLiBCeSBkZWZhdWx0IG5vIHRyYWl0cyBhcmVcbiAgICogcHJvdmlkZWQgdW5sZXNzIHNwZWNpZmllZCBvdGhlcndpc2UgaW4gZWxlbWVudC5cbiAgICpcbiAgICogWW91IGNhbiBwcm92aWRlIG9uZSB0cmFpdCBvciBhbiBhcnJheSBvZiBtYW55IHRyYWl0cy5cbiAgICpcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKlxuICAgKiBTZWUgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy92aWV3Lmh0bWwjYWNjZXNzaWJpbGl0eXRyYWl0c1xuICAgKi9cbiAgYWNjZXNzaWJpbGl0eVRyYWl0czogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLm9uZU9mKERlcHJlY2F0ZWRBY2Nlc3NpYmlsaXR5VHJhaXRzKSxcbiAgICBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2YoRGVwcmVjYXRlZEFjY2Vzc2liaWxpdHlUcmFpdHMpKSxcbiAgXSksXG5cbiAgLyoqXG4gICAqIEEgdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIFZvaWNlT3ZlciBzaG91bGQgaWdub3JlIHRoZSBlbGVtZW50c1xuICAgKiB3aXRoaW4gdmlld3MgdGhhdCBhcmUgc2libGluZ3Mgb2YgdGhlIHJlY2VpdmVyLlxuICAgKiBEZWZhdWx0IGlzIGBmYWxzZWAuXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICpcbiAgICogU2VlIGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3Mvdmlldy5odG1sI2FjY2Vzc2liaWxpdHl2aWV3aXNtb2RhbFxuICAgKi9cbiAgYWNjZXNzaWJpbGl0eVZpZXdJc01vZGFsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGFjY2Vzc2liaWxpdHkgZWxlbWVudHMgY29udGFpbmVkIHdpdGhpblxuICAgKiB0aGlzIGFjY2Vzc2liaWxpdHkgZWxlbWVudCBhcmUgaGlkZGVuLlxuICAgKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqXG4gICAqIFNlZSBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL3ZpZXcuaHRtbCNhY2Nlc3NpYmlsaXR5RWxlbWVudHNIaWRkZW5cbiAgICovXG4gIGFjY2Vzc2liaWxpdHlFbGVtZW50c0hpZGRlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZW4gYGFjY2Vzc2libGVgIGlzIHRydWUsIHRoZSBzeXN0ZW0gd2lsbCB0cnkgdG8gaW52b2tlIHRoaXMgZnVuY3Rpb25cbiAgICogd2hlbiB0aGUgdXNlciBwZXJmb3JtcyBhbiBhY2Nlc3NpYmlsaXR5IGN1c3RvbSBhY3Rpb24uXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIG9uQWNjZXNzaWJpbGl0eUFjdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFdoZW4gYGFjY2Vzc2libGVgIGlzIHRydWUsIHRoZSBzeXN0ZW0gd2lsbCB0cnkgdG8gaW52b2tlIHRoaXMgZnVuY3Rpb25cbiAgICogd2hlbiB0aGUgdXNlciBwZXJmb3JtcyBhY2Nlc3NpYmlsaXR5IHRhcCBnZXN0dXJlLlxuICAgKlxuICAgKiBTZWUgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy92aWV3Lmh0bWwjb25hY2Nlc3NpYmlsaXR5dGFwXG4gICAqL1xuICBvbkFjY2Vzc2liaWxpdHlUYXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBXaGVuIGBhY2Nlc3NpYmxlYCBpcyBgdHJ1ZWAsIHRoZSBzeXN0ZW0gd2lsbCBpbnZva2UgdGhpcyBmdW5jdGlvbiB3aGVuIHRoZVxuICAgKiB1c2VyIHBlcmZvcm1zIHRoZSBtYWdpYyB0YXAgZ2VzdHVyZS5cbiAgICpcbiAgICogU2VlIGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3Mvdmlldy5odG1sI29ubWFnaWN0YXBcbiAgICovXG4gIG9uTWFnaWNUYXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGxvY2F0ZSB0aGlzIHZpZXcgaW4gZW5kLXRvLWVuZCB0ZXN0cy5cbiAgICpcbiAgICogPiBUaGlzIGRpc2FibGVzIHRoZSAnbGF5b3V0LW9ubHkgdmlldyByZW1vdmFsJyBvcHRpbWl6YXRpb24gZm9yIHRoaXMgdmlldyFcbiAgICpcbiAgICogU2VlIGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3Mvdmlldy5odG1sI3Rlc3RpZFxuICAgKi9cbiAgdGVzdElEOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGxvY2F0ZSB0aGlzIHZpZXcgZnJvbSBuYXRpdmUgY2xhc3Nlcy5cbiAgICpcbiAgICogPiBUaGlzIGRpc2FibGVzIHRoZSAnbGF5b3V0LW9ubHkgdmlldyByZW1vdmFsJyBvcHRpbWl6YXRpb24gZm9yIHRoaXMgdmlldyFcbiAgICpcbiAgICogU2VlIGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3Mvdmlldy5odG1sI25hdGl2ZWlkXG4gICAqL1xuICBuYXRpdmVJRDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogRm9yIG1vc3QgdG91Y2ggaW50ZXJhY3Rpb25zLCB5b3UnbGwgc2ltcGx5IHdhbnQgdG8gd3JhcCB5b3VyIGNvbXBvbmVudCBpblxuICAgKiBgVG91Y2hhYmxlSGlnaGxpZ2h0YCBvciBgVG91Y2hhYmxlT3BhY2l0eWAuIENoZWNrIG91dCBgVG91Y2hhYmxlLmpzYCxcbiAgICogYFNjcm9sbFJlc3BvbmRlci5qc2AgYW5kIGBSZXNwb25kZXJFdmVudFBsdWdpbi5qc2AgZm9yIG1vcmUgZGlzY3Vzc2lvbi5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBWaWV3IGlzIG5vdyByZXNwb25kaW5nIGZvciB0b3VjaCBldmVudHMuIFRoaXMgaXMgdGhlIHRpbWUgdG8gaGlnaGxpZ2h0XG4gICAqIGFuZCBzaG93IHRoZSB1c2VyIHdoYXQgaXMgaGFwcGVuaW5nLlxuICAgKlxuICAgKiBgVmlldy5wcm9wcy5vblJlc3BvbmRlckdyYW50OiAoZXZlbnQpID0+IHt9YCwgd2hlcmUgYGV2ZW50YCBpcyBhIHN5bnRoZXRpY1xuICAgKiB0b3VjaCBldmVudCBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAqXG4gICAqIFNlZSBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL3ZpZXcuaHRtbCNvbnJlc3BvbmRlcmdyYW50XG4gICAqL1xuICBvblJlc3BvbmRlckdyYW50OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHVzZXIgaXMgbW92aW5nIHRoZWlyIGZpbmdlci5cbiAgICpcbiAgICogYFZpZXcucHJvcHMub25SZXNwb25kZXJNb3ZlOiAoZXZlbnQpID0+IHt9YCwgd2hlcmUgYGV2ZW50YCBpcyBhIHN5bnRoZXRpY1xuICAgKiB0b3VjaCBldmVudCBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAqXG4gICAqIFNlZSBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL3ZpZXcuaHRtbCNvbnJlc3BvbmRlcm1vdmVcbiAgICovXG4gIG9uUmVzcG9uZGVyTW92ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEFub3RoZXIgcmVzcG9uZGVyIGlzIGFscmVhZHkgYWN0aXZlIGFuZCB3aWxsIG5vdCByZWxlYXNlIGl0IHRvIHRoYXQgYFZpZXdgXG4gICAqIGFza2luZyB0byBiZSB0aGUgcmVzcG9uZGVyLlxuICAgKlxuICAgKiBgVmlldy5wcm9wcy5vblJlc3BvbmRlclJlamVjdDogKGV2ZW50KSA9PiB7fWAsIHdoZXJlIGBldmVudGAgaXMgYVxuICAgKiBzeW50aGV0aWMgdG91Y2ggZXZlbnQgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgKlxuICAgKiBTZWUgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy92aWV3Lmh0bWwjb25yZXNwb25kZXJyZWplY3RcbiAgICovXG4gIG9uUmVzcG9uZGVyUmVqZWN0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogRmlyZWQgYXQgdGhlIGVuZCBvZiB0aGUgdG91Y2guXG4gICAqXG4gICAqIGBWaWV3LnByb3BzLm9uUmVzcG9uZGVyUmVsZWFzZTogKGV2ZW50KSA9PiB7fWAsIHdoZXJlIGBldmVudGAgaXMgYVxuICAgKiBzeW50aGV0aWMgdG91Y2ggZXZlbnQgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgKlxuICAgKiBTZWUgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy92aWV3Lmh0bWwjb25yZXNwb25kZXJyZWxlYXNlXG4gICAqL1xuICBvblJlc3BvbmRlclJlbGVhc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgcmVzcG9uZGVyIGhhcyBiZWVuIHRha2VuIGZyb20gdGhlIGBWaWV3YC4gTWlnaHQgYmUgdGFrZW4gYnkgb3RoZXJcbiAgICogdmlld3MgYWZ0ZXIgYSBjYWxsIHRvIGBvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdGAsIG9yIG1pZ2h0IGJlIHRha2VuXG4gICAqIGJ5IHRoZSBPUyB3aXRob3V0IGFza2luZyAoZS5nLiwgaGFwcGVucyB3aXRoIGNvbnRyb2wgY2VudGVyLyBub3RpZmljYXRpb25cbiAgICogY2VudGVyIG9uIGlPUylcbiAgICpcbiAgICogYFZpZXcucHJvcHMub25SZXNwb25kZXJUZXJtaW5hdGU6IChldmVudCkgPT4ge31gLCB3aGVyZSBgZXZlbnRgIGlzIGFcbiAgICogc3ludGhldGljIHRvdWNoIGV2ZW50IGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAgICpcbiAgICogU2VlIGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3Mvdmlldy5odG1sI29ucmVzcG9uZGVydGVybWluYXRlXG4gICAqL1xuICBvblJlc3BvbmRlclRlcm1pbmF0ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFNvbWUgb3RoZXIgYFZpZXdgIHdhbnRzIHRvIGJlY29tZSByZXNwb25kZXIgYW5kIGlzIGFza2luZyB0aGlzIGBWaWV3YCB0b1xuICAgKiByZWxlYXNlIGl0cyByZXNwb25kZXIuIFJldHVybmluZyBgdHJ1ZWAgYWxsb3dzIGl0cyByZWxlYXNlLlxuICAgKlxuICAgKiBgVmlldy5wcm9wcy5vblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdDogKGV2ZW50KSA9PiB7fWAsIHdoZXJlIGBldmVudGBcbiAgICogaXMgYSBzeW50aGV0aWMgdG91Y2ggZXZlbnQgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgKlxuICAgKiBTZWUgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy92aWV3Lmh0bWwjb25yZXNwb25kZXJ0ZXJtaW5hdGlvbnJlcXVlc3RcbiAgICovXG4gIG9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogRG9lcyB0aGlzIHZpZXcgd2FudCB0byBiZWNvbWUgcmVzcG9uZGVyIG9uIHRoZSBzdGFydCBvZiBhIHRvdWNoP1xuICAgKlxuICAgKiBgVmlldy5wcm9wcy5vblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyOiAoZXZlbnQpID0+IFt0cnVlIHwgZmFsc2VdYCwgd2hlcmVcbiAgICogYGV2ZW50YCBpcyBhIHN5bnRoZXRpYyB0b3VjaCBldmVudCBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAqXG4gICAqIFNlZSBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL3ZpZXcuaHRtbCNvbnN0YXJ0c2hvdWxkc2V0cmVzcG9uZGVyXG4gICAqL1xuICBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYSBwYXJlbnQgYFZpZXdgIHdhbnRzIHRvIHByZXZlbnQgYSBjaGlsZCBgVmlld2AgZnJvbSBiZWNvbWluZyByZXNwb25kZXJcbiAgICogb24gYSB0b3VjaCBzdGFydCwgaXQgc2hvdWxkIGhhdmUgdGhpcyBoYW5kbGVyIHdoaWNoIHJldHVybnMgYHRydWVgLlxuICAgKlxuICAgKiBgVmlldy5wcm9wcy5vblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZTogKGV2ZW50KSA9PiBbdHJ1ZSB8IGZhbHNlXWAsXG4gICAqIHdoZXJlIGBldmVudGAgaXMgYSBzeW50aGV0aWMgdG91Y2ggZXZlbnQgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgKlxuICAgKiBTZWUgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy92aWV3Lmh0bWwjb25zdGFydHNob3VsZHNldHJlc3BvbmRlcmNhcHR1cmVcbiAgICovXG4gIG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogRG9lcyB0aGlzIHZpZXcgd2FudCB0byBcImNsYWltXCIgdG91Y2ggcmVzcG9uc2l2ZW5lc3M/IFRoaXMgaXMgY2FsbGVkIGZvclxuICAgKiBldmVyeSB0b3VjaCBtb3ZlIG9uIHRoZSBgVmlld2Agd2hlbiBpdCBpcyBub3QgdGhlIHJlc3BvbmRlci5cbiAgICpcbiAgICogYFZpZXcucHJvcHMub25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyOiAoZXZlbnQpID0+IFt0cnVlIHwgZmFsc2VdYCwgd2hlcmVcbiAgICogYGV2ZW50YCBpcyBhIHN5bnRoZXRpYyB0b3VjaCBldmVudCBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAqXG4gICAqIFNlZSBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL3ZpZXcuaHRtbCNvbm1vdmVzaG91bGRzZXRyZXNwb25kZXJcbiAgICovXG4gIG9uTW92ZVNob3VsZFNldFJlc3BvbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGEgcGFyZW50IGBWaWV3YCB3YW50cyB0byBwcmV2ZW50IGEgY2hpbGQgYFZpZXdgIGZyb20gYmVjb21pbmcgcmVzcG9uZGVyXG4gICAqIG9uIGEgbW92ZSwgaXQgc2hvdWxkIGhhdmUgdGhpcyBoYW5kbGVyIHdoaWNoIHJldHVybnMgYHRydWVgLlxuICAgKlxuICAgKiBgVmlldy5wcm9wcy5vbk1vdmVTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlOiAoZXZlbnQpID0+IFt0cnVlIHwgZmFsc2VdYCxcbiAgICogd2hlcmUgYGV2ZW50YCBpcyBhIHN5bnRoZXRpYyB0b3VjaCBldmVudCBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAqXG4gICAqIFNlZSBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL3ZpZXcuaHRtbCNvbk1vdmVTaG91bGRzZXRyZXNwb25kZXJjYXB0dXJlXG4gICAqL1xuICBvbk1vdmVTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhpcyBkZWZpbmVzIGhvdyBmYXIgYSB0b3VjaCBldmVudCBjYW4gc3RhcnQgYXdheSBmcm9tIHRoZSB2aWV3LlxuICAgKiBUeXBpY2FsIGludGVyZmFjZSBndWlkZWxpbmVzIHJlY29tbWVuZCB0b3VjaCB0YXJnZXRzIHRoYXQgYXJlIGF0IGxlYXN0XG4gICAqIDMwIC0gNDAgcG9pbnRzL2RlbnNpdHktaW5kZXBlbmRlbnQgcGl4ZWxzLlxuICAgKlxuICAgKiA+IFRoZSB0b3VjaCBhcmVhIG5ldmVyIGV4dGVuZHMgcGFzdCB0aGUgcGFyZW50IHZpZXcgYm91bmRzIGFuZCB0aGUgWi1pbmRleFxuICAgKiA+IG9mIHNpYmxpbmcgdmlld3MgYWx3YXlzIHRha2VzIHByZWNlZGVuY2UgaWYgYSB0b3VjaCBoaXRzIHR3byBvdmVybGFwcGluZ1xuICAgKiA+IHZpZXdzLlxuICAgKlxuICAgKiBTZWUgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy92aWV3Lmh0bWwjaGl0c2xvcFxuICAgKi9cbiAgaGl0U2xvcDogRGVwcmVjYXRlZEVkZ2VJbnNldHNQcm9wVHlwZSxcblxuICAvKipcbiAgICogSW52b2tlZCBvbiBtb3VudCBhbmQgbGF5b3V0IGNoYW5nZXMgd2l0aDpcbiAgICpcbiAgICogYHtuYXRpdmVFdmVudDogeyBsYXlvdXQ6IHt4LCB5LCB3aWR0aCwgaGVpZ2h0fX19YFxuICAgKlxuICAgKiBUaGlzIGV2ZW50IGlzIGZpcmVkIGltbWVkaWF0ZWx5IG9uY2UgdGhlIGxheW91dCBoYXMgYmVlbiBjYWxjdWxhdGVkLCBidXRcbiAgICogdGhlIG5ldyBsYXlvdXQgbWF5IG5vdCB5ZXQgYmUgcmVmbGVjdGVkIG9uIHRoZSBzY3JlZW4gYXQgdGhlIHRpbWUgdGhlXG4gICAqIGV2ZW50IGlzIHJlY2VpdmVkLCBlc3BlY2lhbGx5IGlmIGEgbGF5b3V0IGFuaW1hdGlvbiBpcyBpbiBwcm9ncmVzcy5cbiAgICpcbiAgICogU2VlIGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3Mvdmlldy5odG1sI29ubGF5b3V0XG4gICAqL1xuICBvbkxheW91dDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoZXRoZXIgdGhlIGBWaWV3YCBjYW4gYmUgdGhlIHRhcmdldCBvZiB0b3VjaCBldmVudHMuXG4gICAqXG4gICAqIFNlZSBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL3ZpZXcuaHRtbCNwb2ludGVyZXZlbnRzXG4gICAqL1xuICBwb2ludGVyRXZlbnRzOiBQcm9wVHlwZXMub25lT2YoWydib3gtbm9uZScsICdub25lJywgJ2JveC1vbmx5JywgJ2F1dG8nXSksXG5cbiAgLyoqXG4gICAqIFNlZSBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL3N0eWxlLmh0bWxcbiAgICovXG4gIHN0eWxlOiBzdHlsZVByb3BUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgc3BlY2lhbCBwZXJmb3JtYW5jZSBwcm9wZXJ0eSBleHBvc2VkIGJ5IGBSQ1RWaWV3YCBhbmQgaXMgdXNlZnVsXG4gICAqIGZvciBzY3JvbGxpbmcgY29udGVudCB3aGVuIHRoZXJlIGFyZSBtYW55IHN1YnZpZXdzLCBtb3N0IG9mIHdoaWNoIGFyZVxuICAgKiBvZmZzY3JlZW4uIEZvciB0aGlzIHByb3BlcnR5IHRvIGJlIGVmZmVjdGl2ZSwgaXQgbXVzdCBiZSBhcHBsaWVkIHRvIGFcbiAgICogdmlldyB0aGF0IGNvbnRhaW5zIG1hbnkgc3Vidmlld3MgdGhhdCBleHRlbmQgb3V0c2lkZSBpdHMgYm91bmQuIFRoZVxuICAgKiBzdWJ2aWV3cyBtdXN0IGFsc28gaGF2ZSBgb3ZlcmZsb3c6IGhpZGRlbmAsIGFzIHNob3VsZCB0aGUgY29udGFpbmluZyB2aWV3XG4gICAqIChvciBvbmUgb2YgaXRzIHN1cGVydmlld3MpLlxuICAgKlxuICAgKiBTZWUgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy92aWV3Lmh0bWwjcmVtb3ZlY2xpcHBlZHN1YnZpZXdzXG4gICAqL1xuICByZW1vdmVDbGlwcGVkU3Vidmlld3M6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoaXMgYFZpZXdgIHNob3VsZCByZW5kZXIgaXRzZWxmIChhbmQgYWxsIG9mIGl0cyBjaGlsZHJlbikgaW50byBhXG4gICAqIHNpbmdsZSBoYXJkd2FyZSB0ZXh0dXJlIG9uIHRoZSBHUFUuXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqXG4gICAqIFNlZSBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL3ZpZXcuaHRtbCNyZW5kZXJ0b2hhcmR3YXJldGV4dHVyZWFuZHJvaWRcbiAgICovXG4gIHJlbmRlclRvSGFyZHdhcmVUZXh0dXJlQW5kcm9pZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBgVmlld2Agc2hvdWxkIGJlIHJlbmRlcmVkIGFzIGEgYml0bWFwIGJlZm9yZSBjb21wb3NpdGluZy5cbiAgICpcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKlxuICAgKiBTZWUgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy92aWV3Lmh0bWwjc2hvdWxkcmFzdGVyaXplaW9zXG4gICAqL1xuICBzaG91bGRSYXN0ZXJpemVJT1M6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBWaWV3cyB0aGF0IGFyZSBvbmx5IHVzZWQgdG8gbGF5b3V0IHRoZWlyIGNoaWxkcmVuIG9yIG90aGVyd2lzZSBkb24ndCBkcmF3XG4gICAqIGFueXRoaW5nIG1heSBiZSBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgZnJvbSB0aGUgbmF0aXZlIGhpZXJhcmNoeSBhcyBhblxuICAgKiBvcHRpbWl6YXRpb24uIFNldCB0aGlzIHByb3BlcnR5IHRvIGBmYWxzZWAgdG8gZGlzYWJsZSB0aGlzIG9wdGltaXphdGlvbiBhbmRcbiAgICogZW5zdXJlIHRoYXQgdGhpcyBgVmlld2AgZXhpc3RzIGluIHRoZSBuYXRpdmUgdmlldyBoaWVyYXJjaHkuXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqXG4gICAqIFNlZSBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL3ZpZXcuaHRtbCNjb2xsYXBzYWJsZVxuICAgKi9cbiAgY29sbGFwc2FibGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoaXMgYFZpZXdgIG5lZWRzIHRvIHJlbmRlcmVkIG9mZnNjcmVlbiBhbmQgY29tcG9zaXRlZCB3aXRoIGFuXG4gICAqIGFscGhhIGluIG9yZGVyIHRvIHByZXNlcnZlIDEwMCUgY29ycmVjdCBjb2xvcnMgYW5kIGJsZW5kaW5nIGJlaGF2aW9yLlxuICAgKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKlxuICAgKiBTZWUgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC1uYXRpdmUvZG9jcy92aWV3Lmh0bWwjbmVlZHNvZmZzY3JlZW5hbHBoYWNvbXBvc2l0aW5nXG4gICAqL1xuICBuZWVkc09mZnNjcmVlbkFscGhhQ29tcG9zaXRpbmc6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBbnkgYWRkaXRpb25hbCBwbGF0Zm9ybS1zcGVjaWZpYyB2aWV3IHByb3AgdHlwZXMsIG9yIHByb3AgdHlwZSBvdmVycmlkZXMuXG4gICAqL1xuICAuLi5QbGF0Zm9ybVZpZXdQcm9wVHlwZXMsXG59O1xuIl19