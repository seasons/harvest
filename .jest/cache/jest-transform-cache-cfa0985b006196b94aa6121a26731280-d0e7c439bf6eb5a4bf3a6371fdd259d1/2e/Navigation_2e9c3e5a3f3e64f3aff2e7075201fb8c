3e4442921657bb2a64f3e9a3462e7f3b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var lodash_1 = require("lodash");

var NativeCommandsSender_1 = require("./adapters/NativeCommandsSender");

var NativeEventsReceiver_1 = require("./adapters/NativeEventsReceiver");

var UniqueIdProvider_1 = require("./adapters/UniqueIdProvider");

var Store_1 = require("./components/Store");

var ComponentRegistry_1 = require("./components/ComponentRegistry");

var Commands_1 = require("./commands/Commands");

var LayoutTreeParser_1 = require("./commands/LayoutTreeParser");

var LayoutTreeCrawler_1 = require("./commands/LayoutTreeCrawler");

var EventsRegistry_1 = require("./events/EventsRegistry");

var SharedElement_1 = require("./adapters/SharedElement");

var CommandsObserver_1 = require("./events/CommandsObserver");

var Constants_1 = require("./adapters/Constants");

var ComponentEventsObserver_1 = require("./events/ComponentEventsObserver");

var TouchablePreview_1 = require("./adapters/TouchablePreview");

var ComponentWrapper_1 = require("./components/ComponentWrapper");

var OptionsProcessor_1 = require("./commands/OptionsProcessor");

var ColorService_1 = require("./adapters/ColorService");

var AssetResolver_1 = require("./adapters/AssetResolver");

var AppRegistryService_1 = require("./adapters/AppRegistryService");

var NavigationRoot = function () {
  function NavigationRoot() {
    (0, _classCallCheck2.default)(this, NavigationRoot);
    this.Element = SharedElement_1.SharedElement;
    this.TouchablePreview = TouchablePreview_1.TouchablePreview;
    this.componentWrapper = new ComponentWrapper_1.ComponentWrapper();
    this.store = new Store_1.Store();
    this.nativeEventsReceiver = new NativeEventsReceiver_1.NativeEventsReceiver();
    this.uniqueIdProvider = new UniqueIdProvider_1.UniqueIdProvider();
    this.componentEventsObserver = new ComponentEventsObserver_1.ComponentEventsObserver(this.nativeEventsReceiver, this.store);
    var appRegistryService = new AppRegistryService_1.AppRegistryService();
    this.componentRegistry = new ComponentRegistry_1.ComponentRegistry(this.store, this.componentEventsObserver, this.componentWrapper, appRegistryService);
    this.layoutTreeParser = new LayoutTreeParser_1.LayoutTreeParser(this.uniqueIdProvider);
    var optionsProcessor = new OptionsProcessor_1.OptionsProcessor(this.store, this.uniqueIdProvider, new ColorService_1.ColorService(), new AssetResolver_1.AssetService());
    this.layoutTreeCrawler = new LayoutTreeCrawler_1.LayoutTreeCrawler(this.store, optionsProcessor);
    this.nativeCommandsSender = new NativeCommandsSender_1.NativeCommandsSender();
    this.commandsObserver = new CommandsObserver_1.CommandsObserver(this.uniqueIdProvider);
    this.commands = new Commands_1.Commands(this.nativeCommandsSender, this.layoutTreeParser, this.layoutTreeCrawler, this.commandsObserver, this.uniqueIdProvider, optionsProcessor);
    this.eventsRegistry = new EventsRegistry_1.EventsRegistry(this.nativeEventsReceiver, this.commandsObserver, this.componentEventsObserver);
    this.componentEventsObserver.registerOnceForAllComponentEvents();
  }

  (0, _createClass2.default)(NavigationRoot, [{
    key: "registerComponent",
    value: function registerComponent(componentName, componentProvider, concreteComponentProvider) {
      return this.componentRegistry.registerComponent(componentName, componentProvider, concreteComponentProvider);
    }
  }, {
    key: "registerComponentWithRedux",
    value: function registerComponentWithRedux(componentName, getComponentClassFunc, ReduxProvider, reduxStore) {
      return this.componentRegistry.registerComponent(componentName, getComponentClassFunc, undefined, ReduxProvider, reduxStore);
    }
  }, {
    key: "setRoot",
    value: function setRoot(layout) {
      return this.commands.setRoot(layout);
    }
  }, {
    key: "setDefaultOptions",
    value: function setDefaultOptions(options) {
      this.commands.setDefaultOptions(options);
    }
  }, {
    key: "mergeOptions",
    value: function mergeOptions(componentId, options) {
      this.commands.mergeOptions(componentId, options);
    }
  }, {
    key: "showModal",
    value: function showModal(layout) {
      return this.commands.showModal(layout);
    }
  }, {
    key: "dismissModal",
    value: function dismissModal(componentId, mergeOptions) {
      return this.commands.dismissModal(componentId, mergeOptions);
    }
  }, {
    key: "dismissAllModals",
    value: function dismissAllModals(mergeOptions) {
      return this.commands.dismissAllModals(mergeOptions);
    }
  }, {
    key: "push",
    value: function push(componentId, layout) {
      return this.commands.push(componentId, layout);
    }
  }, {
    key: "pop",
    value: function pop(componentId, mergeOptions) {
      return this.commands.pop(componentId, mergeOptions);
    }
  }, {
    key: "popTo",
    value: function popTo(componentId, mergeOptions) {
      return this.commands.popTo(componentId, mergeOptions);
    }
  }, {
    key: "popToRoot",
    value: function popToRoot(componentId, mergeOptions) {
      return this.commands.popToRoot(componentId, mergeOptions);
    }
  }, {
    key: "setStackRoot",
    value: function setStackRoot(componentId, layout) {
      var children = lodash_1.isArray(layout) ? layout : [layout];
      return this.commands.setStackRoot(componentId, children);
    }
  }, {
    key: "showOverlay",
    value: function showOverlay(layout) {
      return this.commands.showOverlay(layout);
    }
  }, {
    key: "dismissOverlay",
    value: function dismissOverlay(componentId) {
      return this.commands.dismissOverlay(componentId);
    }
  }, {
    key: "getLaunchArgs",
    value: function getLaunchArgs() {
      return this.commands.getLaunchArgs();
    }
  }, {
    key: "events",
    value: function events() {
      return this.eventsRegistry;
    }
  }, {
    key: "constants",
    value: function constants() {
      return _regenerator.default.async(function constants$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _regenerator.default.awrap(Constants_1.Constants.get());

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      });
    }
  }]);
  return NavigationRoot;
}();

exports.NavigationRoot = NavigationRoot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,