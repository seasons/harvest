acf92f4330fa5a00d12771f5fd3cefb9
jest.mock("react-tracking");
jest.mock("react-tracking/build/dispatchTrackingEvent");
jest.mock("./lib/NativeModules/NotificationsManager.tsx", function () {
  return {
    NotificationsManager: {
      addListener: jest.fn()
    }
  };
});
jest.mock("@mapbox/react-native-mapbox-gl", function () {
  return {
    MapView: function MapView() {
      return null;
    },
    StyleURL: {
      Light: null
    },
    setAccessToken: function setAccessToken() {
      return jest.fn();
    },
    StyleSheet: {
      create: function create() {
        return jest.fn();
      }
    },
    ShapeSource: function ShapeSource() {
      return null;
    },
    SymbolLayer: function SymbolLayer() {
      return null;
    }
  };
});
jest.mock("./lib/utils/useScreenDimensions", function () {
  var React = require("react");

  var screenDimensions = {
    width: 380,
    height: 550,
    orientation: "portrait",
    safeAreaInsets: {
      top: 20,
      left: 0,
      right: 0,
      bottom: 0
    }
  };
  return {
    getCurrentScreenDimensions: function getCurrentScreenDimensions() {
      return screenDimensions;
    },
    ProvideScreenDimensions: function ProvideScreenDimensions(_ref) {
      var children = _ref.children;
      return React.createElement(React.Fragment, null, children);
    },
    useScreenDimensions: function useScreenDimensions() {
      return screenDimensions;
    }
  };
});

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _chalk = _interopRequireDefault(require("chalk"));

var _enzyme = _interopRequireDefault(require("enzyme"));

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _expect = _interopRequireDefault(require("expect"));

var _util = require("util");

require("lib/tests/renderUntil");

var _snapshotDiff = _interopRequireDefault(require("snapshot-diff"));

var _reactTracking = _interopRequireDefault(require("react-tracking"));

var _reactNative = require("react-native");

_enzyme.default.configure({
  adapter: new _enzymeAdapterReact.default()
});

_expect.default.extend({
  toMatchDiffSnapshot: _snapshotDiff.default.toMatchDiffSnapshot
});

var track = _reactTracking.default;
track.mockImplementation(function (_) {
  return function (x) {
    return x;
  };
});

function mockedModule(path, mockModuleName) {
  jest.mock(path, function () {
    return mockModuleName;
  });
}

var originalConsoleError = console.error;

console.error = function (message) {
  if (typeof message === "string" && (message.includes("is using uppercase HTML. Always use lowercase HTML tags in React.") || /Warning: React does not recognize the `\w+` prop on a DOM element\./.test(message) || /Warning: The tag <\w+> is unrecognized in this browser\./.test(message) || /Warning: Unknown event handler property `\w+`\./.test(message) || /Warning: Received `\w+` for a non-boolean attribute `\w+`\./.test(message) || /Warning: [\w\s]+ has been extracted from react-native core/.test(message))) {} else {
    originalConsoleError(message);
  }
};

mockedModule("./lib/Components/SwitchView.tsx", "SwitchView");
mockedModule("./lib/Components/Spinner.tsx", "ARSpinner");
mockedModule("./lib/Components/OpaqueImageView/OpaqueImageView.tsx", "AROpaqueImageView");
mockedModule("./lib/Components/Artist/Shows/index.tsx", "PartnerShows");
mockedModule("./lib/Components/Artist/Artworks/index.tsx", "Artworks");
mockedModule("./lib/Components/Artist/Header.tsx", "Header");
mockedModule("./lib/Components/Artist/About.tsx", "About");
mockedModule("./lib/Components/Gene/Header.tsx", "Header");
_reactNative.NativeModules.ARTakeCameraPhotoModule = {
  errorCodes: {
    cameraNotAvailable: "cameraNotAvailable",
    imageMediaNotAvailable: "imageMediaNotAvailable",
    cameraAccessDenied: "cameraAccessDenied",
    saveFailed: "saveFailed"
  }
};
_reactNative.NativeModules.ARCocoaConstantsModule = {
  UIApplicationOpenSettingsURLString: "UIApplicationOpenSettingsURLString",
  AREnabled: true
};
_reactNative.NativeModules.Emission = {
  userAgent: "Jest Unit Tests"
};
_reactNative.NativeModules.ARSwitchBoardModule = {
  presentNavigationViewController: jest.fn(),
  presentModalViewController: jest.fn(),
  presentMediaPreviewController: jest.fn(),
  presentArtworksSet: jest.fn()
};

if (process.env.ALLOW_CONSOLE_LOGS !== "true") {
  var originalLoggers = {
    error: console.error,
    warn: console.warn
  };

  function logToError(type, args, constructorOpt) {
    var explanation = _chalk.default.white("Test failed due to `console." + type + "(\u2026)` call.\n") + _chalk.default.gray("(Disable with ALLOW_CONSOLE_LOGS=true env variable.)\n\n");

    if (args[0] instanceof Error) {
      var msg = explanation + _chalk.default.red(args[0].message);

      var err = new Error(msg);
      err.stack = args[0].stack.replace("Error: " + args[0].message, msg);
      return err;
    } else if (!args[0].includes("is using incorrect casing") && !args[0].includes("is unrecognized in this browser") && ![args[0].includes("React does not recognize the `testID` prop on a DOM element.")]) {
      var _err = new Error(explanation + _chalk.default.red(_util.format.apply(void 0, [args[0]].concat((0, _toConsumableArray2.default)(args.slice(1))))));

      Error.captureStackTrace(_err, constructorOpt);
      return _err;
    }

    return null;
  }

  beforeEach(function (done) {
    var types = ["error", "warn"];
    types.forEach(function (type) {
      if (console[type] === originalLoggers[type]) {
        var handler = function handler() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var error = logToError(type, args, handler);

          if (error) {
            done.fail(error);
          }
        };

        jest.spyOn(console, type).mockImplementation(handler);
      }
    });
    done();
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,