{"version":3,"sources":["setupJest.ts"],"names":["jest","mock","NotificationsManager","addListener","fn","MapView","StyleURL","Light","setAccessToken","StyleSheet","create","ShapeSource","SymbolLayer","React","require","screenDimensions","width","height","orientation","safeAreaInsets","top","left","right","bottom","getCurrentScreenDimensions","ProvideScreenDimensions","children","createElement","Fragment","useScreenDimensions","Enzyme","configure","adapter","Adapter","expect","extend","toMatchDiffSnapshot","diff","track","_track","mockImplementation","_","x","mockedModule","path","mockModuleName","originalConsoleError","console","error","message","includes","test","NativeModules","ARTakeCameraPhotoModule","errorCodes","cameraNotAvailable","imageMediaNotAvailable","cameraAccessDenied","saveFailed","ARCocoaConstantsModule","UIApplicationOpenSettingsURLString","AREnabled","Emission","userAgent","ARSwitchBoardModule","presentNavigationViewController","presentModalViewController","presentMediaPreviewController","presentArtworksSet","process","env","ALLOW_CONSOLE_LOGS","originalLoggers","warn","logToError","type","args","constructorOpt","explanation","chalk","white","gray","Error","msg","red","err","stack","replace","format","slice","captureStackTrace","beforeEach","done","types","forEach","handler","fail","spyOn"],"mappings":"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","sourcesContent":["// re: https://github.com/facebook/react-native/issues/19955\n// and https://github.com/facebook/metro/pull/198\n//\n// import applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\"\n// import initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\"\n// declare var babelHelpers: any\n// Object.assign(babelHelpers, { applyDecoratedDescriptor, initializerDefineProperty })\n// import \"@babel/runtime\"\n\nimport chalk from \"chalk\"\nimport Enzyme from \"enzyme\"\nimport Adapter from \"enzyme-adapter-react-16\"\nimport expect from \"expect\"\nimport { format } from \"util\"\n\nimport \"lib/tests/renderUntil\"\nEnzyme.configure({ adapter: new Adapter() })\n\n// Waiting on https://github.com/thymikee/snapshot-diff/pull/17\nimport diff from \"snapshot-diff\"\nexpect.extend({ toMatchDiffSnapshot: (diff as any).toMatchDiffSnapshot })\n\njest.mock(\"react-tracking\")\nimport _track from \"react-tracking\"\nconst track = _track as jest.Mock<typeof _track>\ntrack.mockImplementation((_ => x => x) as any)\n\n// Mock this separately so react-tracking can be unmocked in tests but not result in the `window` global being accessed.\njest.mock(\"react-tracking/build/dispatchTrackingEvent\")\n\njest.mock(\"./lib/NativeModules/NotificationsManager.tsx\", () => ({\n  NotificationsManager: {\n    addListener: jest.fn(),\n  },\n}))\n\njest.mock(\"@mapbox/react-native-mapbox-gl\", () => ({\n  MapView: () => null,\n  StyleURL: {\n    Light: null,\n  },\n  setAccessToken: () => jest.fn(),\n  StyleSheet: {\n    create: () => jest.fn(),\n  },\n  ShapeSource: () => null,\n  SymbolLayer: () => null,\n}))\n\nfunction mockedModule(path: string, mockModuleName: string) {\n  jest.mock(path, () => mockModuleName)\n}\n\nconst originalConsoleError = console.error\n\n// TODO: Remove once we're no longer using JSDOM for enzyme static rendering.\nconsole.error = (message?: any) => {\n  if (\n    typeof message === \"string\" &&\n    (message.includes(\"is using uppercase HTML. Always use lowercase HTML tags in React.\") ||\n      /Warning: React does not recognize the `\\w+` prop on a DOM element\\./.test(message) ||\n      /Warning: The tag <\\w+> is unrecognized in this browser\\./.test(message) ||\n      /Warning: Unknown event handler property `\\w+`\\./.test(message) ||\n      /Warning: Received `\\w+` for a non-boolean attribute `\\w+`\\./.test(message) ||\n      /Warning: [\\w\\s]+ has been extracted from react-native core/.test(message))\n  ) {\n    // NOOP\n  } else {\n    originalConsoleError(message)\n  }\n}\n\nmockedModule(\"./lib/Components/SwitchView.tsx\", \"SwitchView\")\nmockedModule(\"./lib/Components/Spinner.tsx\", \"ARSpinner\")\nmockedModule(\"./lib/Components/OpaqueImageView/OpaqueImageView.tsx\", \"AROpaqueImageView\")\n// mockedModule(\"./lib/Components/ArtworkGrids/InfiniteScrollGrid.tsx\", \"ArtworksGrid\")\n\n// Artist tests\nmockedModule(\"./lib/Components/Artist/Shows/index.tsx\", \"PartnerShows\")\nmockedModule(\"./lib/Components/Artist/Artworks/index.tsx\", \"Artworks\")\nmockedModule(\"./lib/Components/Artist/Header.tsx\", \"Header\")\nmockedModule(\"./lib/Components/Artist/About.tsx\", \"About\")\n\n// Gene tests\nmockedModule(\"./lib/Components/Gene/Header.tsx\", \"Header\")\n\n// Native modules\nimport { ScreenDimensions } from \"lib/utils/useScreenDimensions\"\nimport { NativeModules } from \"react-native\"\nNativeModules.ARTakeCameraPhotoModule = {\n  errorCodes: {\n    cameraNotAvailable: \"cameraNotAvailable\",\n    imageMediaNotAvailable: \"imageMediaNotAvailable\",\n    cameraAccessDenied: \"cameraAccessDenied\",\n    saveFailed: \"saveFailed\",\n  },\n}\nNativeModules.ARCocoaConstantsModule = {\n  UIApplicationOpenSettingsURLString: \"UIApplicationOpenSettingsURLString\",\n  AREnabled: true,\n}\nNativeModules.Emission = {\n  userAgent: \"Jest Unit Tests\",\n}\nNativeModules.ARSwitchBoardModule = {\n  presentNavigationViewController: jest.fn(),\n  presentModalViewController: jest.fn(),\n  presentMediaPreviewController: jest.fn(),\n  presentArtworksSet: jest.fn(),\n}\n\ndeclare const process: any\n\nif (process.env.ALLOW_CONSOLE_LOGS !== \"true\") {\n  const originalLoggers = {\n    error: console.error,\n    warn: console.warn,\n  }\n\n  function logToError(type, args, constructorOpt: () => void) {\n    const explanation =\n      chalk.white(`Test failed due to \\`console.${type}(…)\\` call.\\n`) +\n      chalk.gray(\"(Disable with ALLOW_CONSOLE_LOGS=true env variable.)\\n\\n\")\n    if (args[0] instanceof Error) {\n      const msg = explanation + chalk.red(args[0].message)\n      const err = new Error(msg)\n      err.stack = args[0].stack.replace(`Error: ${args[0].message}`, msg)\n      return err\n    } else if (\n      // Because we use react-dom in tests to render react-native components, a few warnings are being logged that we do\n      // not care for, so ignore these.\n      !args[0].includes(\"is using incorrect casing\") &&\n      !args[0].includes(\"is unrecognized in this browser\") &&\n      ![args[0].includes(\"React does not recognize the `testID` prop on a DOM element.\")]\n    ) {\n      const err = new Error(explanation + chalk.red(format(args[0], ...args.slice(1))))\n      ;(Error as any).captureStackTrace(err, constructorOpt)\n      return err\n    }\n    return null\n  }\n\n  beforeEach(done => {\n    const types: Array<\"error\" | \"warn\"> = [\"error\", \"warn\"]\n    types.forEach(type => {\n      // Don't spy on loggers that have been modified by the current test.\n      if (console[type] === originalLoggers[type]) {\n        const handler = (...args) => {\n          const error = logToError(type, args, handler)\n          if (error) {\n            done.fail(error)\n          }\n        }\n        jest.spyOn(console, type).mockImplementation(handler)\n      }\n    })\n    done() // it is important to call this here or every test will timeout\n  })\n}\n\njest.mock(\"./lib/utils/useScreenDimensions\", () => {\n  const React = require(\"react\")\n  const screenDimensions: ScreenDimensions = {\n    width: 380,\n    height: 550,\n    orientation: \"portrait\",\n    safeAreaInsets: {\n      top: 20,\n      left: 0,\n      right: 0,\n      bottom: 0,\n    },\n  }\n\n  return {\n    getCurrentScreenDimensions: () => screenDimensions,\n    ProvideScreenDimensions: ({ children }) => {\n      return React.createElement(React.Fragment, null, children)\n    },\n    useScreenDimensions: () => screenDimensions,\n  }\n})\n"]}