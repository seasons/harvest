db1a6028df007d82a7f2bb5dfd15446d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DeprecatedColorPropType = require('DeprecatedColorPropType');

var ReactPropTypes = require('prop-types');

var DeprecatedViewStylePropTypes = require('DeprecatedViewStylePropTypes');

var TextStylePropTypes = _objectSpread({}, DeprecatedViewStylePropTypes, {
  color: DeprecatedColorPropType,
  fontFamily: ReactPropTypes.string,
  fontSize: ReactPropTypes.number,
  fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
  fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
  fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
  textShadowOffset: ReactPropTypes.shape({
    width: ReactPropTypes.number,
    height: ReactPropTypes.number
  }),
  textShadowRadius: ReactPropTypes.number,
  textShadowColor: DeprecatedColorPropType,
  letterSpacing: ReactPropTypes.number,
  lineHeight: ReactPropTypes.number,
  textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
  textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
  includeFontPadding: ReactPropTypes.bool,
  textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
  textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
  textDecorationColor: DeprecatedColorPropType,
  textTransform: ReactPropTypes.oneOf(['none', 'capitalize', 'uppercase', 'lowercase']),
  writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
});

module.exports = TextStylePropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRTdHlsZVByb3BUeXBlcy5qcyJdLCJuYW1lcyI6WyJEZXByZWNhdGVkQ29sb3JQcm9wVHlwZSIsInJlcXVpcmUiLCJSZWFjdFByb3BUeXBlcyIsIkRlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMiLCJUZXh0U3R5bGVQcm9wVHlwZXMiLCJjb2xvciIsImZvbnRGYW1pbHkiLCJzdHJpbmciLCJmb250U2l6ZSIsIm51bWJlciIsImZvbnRTdHlsZSIsIm9uZU9mIiwiZm9udFdlaWdodCIsImZvbnRWYXJpYW50IiwiYXJyYXlPZiIsInRleHRTaGFkb3dPZmZzZXQiLCJzaGFwZSIsIndpZHRoIiwiaGVpZ2h0IiwidGV4dFNoYWRvd1JhZGl1cyIsInRleHRTaGFkb3dDb2xvciIsImxldHRlclNwYWNpbmciLCJsaW5lSGVpZ2h0IiwidGV4dEFsaWduIiwidGV4dEFsaWduVmVydGljYWwiLCJpbmNsdWRlRm9udFBhZGRpbmciLCJib29sIiwidGV4dERlY29yYXRpb25MaW5lIiwidGV4dERlY29yYXRpb25TdHlsZSIsInRleHREZWNvcmF0aW9uQ29sb3IiLCJ0ZXh0VHJhbnNmb3JtIiwid3JpdGluZ0RpcmVjdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7Ozs7O0FBRUEsSUFBTUEsdUJBQXVCLEdBQUdDLE9BQU8sQ0FBQyx5QkFBRCxDQUF2Qzs7QUFDQSxJQUFNQyxjQUFjLEdBQUdELE9BQU8sQ0FBQyxZQUFELENBQTlCOztBQUNBLElBQU1FLDRCQUE0QixHQUFHRixPQUFPLENBQUMsOEJBQUQsQ0FBNUM7O0FBRUEsSUFBTUcsa0JBQWtCLHFCQUNuQkQsNEJBRG1CO0FBR3RCRSxFQUFBQSxLQUFLLEVBQUVMLHVCQUhlO0FBSXRCTSxFQUFBQSxVQUFVLEVBQUVKLGNBQWMsQ0FBQ0ssTUFKTDtBQUt0QkMsRUFBQUEsUUFBUSxFQUFFTixjQUFjLENBQUNPLE1BTEg7QUFNdEJDLEVBQUFBLFNBQVMsRUFBRVIsY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQUMsUUFBRCxFQUFXLFFBQVgsQ0FBckIsQ0FOVztBQVl0QkMsRUFBQUEsVUFBVSxFQUFFVixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FDL0IsUUFEK0IsRUFFL0IsTUFGK0IsRUFHL0IsS0FIK0IsRUFJL0IsS0FKK0IsRUFLL0IsS0FMK0IsRUFNL0IsS0FOK0IsRUFPL0IsS0FQK0IsRUFRL0IsS0FSK0IsRUFTL0IsS0FUK0IsRUFVL0IsS0FWK0IsRUFXL0IsS0FYK0IsQ0FBckIsQ0FaVTtBQTRCdEJFLEVBQUFBLFdBQVcsRUFBRVgsY0FBYyxDQUFDWSxPQUFmLENBQ1haLGNBQWMsQ0FBQ1MsS0FBZixDQUFxQixDQUNuQixZQURtQixFQUVuQixlQUZtQixFQUduQixhQUhtQixFQUluQixjQUptQixFQUtuQixtQkFMbUIsQ0FBckIsQ0FEVyxDQTVCUztBQXFDdEJJLEVBQUFBLGdCQUFnQixFQUFFYixjQUFjLENBQUNjLEtBQWYsQ0FBcUI7QUFDckNDLElBQUFBLEtBQUssRUFBRWYsY0FBYyxDQUFDTyxNQURlO0FBRXJDUyxJQUFBQSxNQUFNLEVBQUVoQixjQUFjLENBQUNPO0FBRmMsR0FBckIsQ0FyQ0k7QUF5Q3RCVSxFQUFBQSxnQkFBZ0IsRUFBRWpCLGNBQWMsQ0FBQ08sTUF6Q1g7QUEwQ3RCVyxFQUFBQSxlQUFlLEVBQUVwQix1QkExQ0s7QUE4Q3RCcUIsRUFBQUEsYUFBYSxFQUFFbkIsY0FBYyxDQUFDTyxNQTlDUjtBQStDdEJhLEVBQUFBLFVBQVUsRUFBRXBCLGNBQWMsQ0FBQ08sTUEvQ0w7QUFvRHRCYyxFQUFBQSxTQUFTLEVBQUVyQixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FDOUIsTUFEOEIsRUFFOUIsTUFGOEIsRUFHOUIsT0FIOEIsRUFJOUIsUUFKOEIsRUFLOUIsU0FMOEIsQ0FBckIsQ0FwRFc7QUE4RHRCYSxFQUFBQSxpQkFBaUIsRUFBRXRCLGNBQWMsQ0FBQ1MsS0FBZixDQUFxQixDQUN0QyxNQURzQyxFQUV0QyxLQUZzQyxFQUd0QyxRQUhzQyxFQUl0QyxRQUpzQyxDQUFyQixDQTlERztBQTBFdEJjLEVBQUFBLGtCQUFrQixFQUFFdkIsY0FBYyxDQUFDd0IsSUExRWI7QUEyRXRCQyxFQUFBQSxrQkFBa0IsRUFBRXpCLGNBQWMsQ0FBQ1MsS0FBZixDQUFxQixDQUN2QyxNQUR1QyxFQUV2QyxXQUZ1QyxFQUd2QyxjQUh1QyxFQUl2Qyx3QkFKdUMsQ0FBckIsQ0EzRUU7QUFvRnRCaUIsRUFBQUEsbUJBQW1CLEVBQUUxQixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FDeEMsT0FEd0MsRUFFeEMsUUFGd0MsRUFHeEMsUUFId0MsRUFJeEMsUUFKd0MsQ0FBckIsQ0FwRkM7QUE2RnRCa0IsRUFBQUEsbUJBQW1CLEVBQUU3Qix1QkE3RkM7QUE4RnRCOEIsRUFBQUEsYUFBYSxFQUFFNUIsY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQ2xDLE1BRGtDLEVBRWxDLFlBRmtDLEVBR2xDLFdBSGtDLEVBSWxDLFdBSmtDLENBQXJCLENBOUZPO0FBdUd0Qm9CLEVBQUFBLGdCQUFnQixFQUFFN0IsY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQUMsTUFBRCxFQUFxQixLQUFyQixFQUE0QixLQUE1QixDQUFyQjtBQXZHSSxFQUF4Qjs7QUEwR0FxQixNQUFNLENBQUNDLE9BQVAsR0FBaUI3QixrQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEZXByZWNhdGVkQ29sb3JQcm9wVHlwZSA9IHJlcXVpcmUoJ0RlcHJlY2F0ZWRDb2xvclByb3BUeXBlJyk7XG5jb25zdCBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcbmNvbnN0IERlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCdEZXByZWNhdGVkVmlld1N0eWxlUHJvcFR5cGVzJyk7XG5cbmNvbnN0IFRleHRTdHlsZVByb3BUeXBlcyA9IHtcbiAgLi4uRGVwcmVjYXRlZFZpZXdTdHlsZVByb3BUeXBlcyxcblxuICBjb2xvcjogRGVwcmVjYXRlZENvbG9yUHJvcFR5cGUsXG4gIGZvbnRGYW1pbHk6IFJlYWN0UHJvcFR5cGVzLnN0cmluZyxcbiAgZm9udFNpemU6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgZm9udFN0eWxlOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbJ25vcm1hbCcsICdpdGFsaWMnXSksXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgZm9udCB3ZWlnaHQuIFRoZSB2YWx1ZXMgJ25vcm1hbCcgYW5kICdib2xkJyBhcmUgc3VwcG9ydGVkIGZvclxuICAgKiBtb3N0IGZvbnRzLiBOb3QgYWxsIGZvbnRzIGhhdmUgYSB2YXJpYW50IGZvciBlYWNoIG9mIHRoZSBudW1lcmljIHZhbHVlcyxcbiAgICogaW4gdGhhdCBjYXNlIHRoZSBjbG9zZXN0IG9uZSBpcyBjaG9zZW4uXG4gICAqL1xuICBmb250V2VpZ2h0OiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ25vcm1hbCcgLypkZWZhdWx0Ki8sXG4gICAgJ2JvbGQnLFxuICAgICcxMDAnLFxuICAgICcyMDAnLFxuICAgICczMDAnLFxuICAgICc0MDAnLFxuICAgICc1MDAnLFxuICAgICc2MDAnLFxuICAgICc3MDAnLFxuICAgICc4MDAnLFxuICAgICc5MDAnLFxuICBdKSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGZvbnRWYXJpYW50OiBSZWFjdFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgICdzbWFsbC1jYXBzJyxcbiAgICAgICdvbGRzdHlsZS1udW1zJyxcbiAgICAgICdsaW5pbmctbnVtcycsXG4gICAgICAndGFidWxhci1udW1zJyxcbiAgICAgICdwcm9wb3J0aW9uYWwtbnVtcycsXG4gICAgXSksXG4gICksXG4gIHRleHRTaGFkb3dPZmZzZXQ6IFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtcbiAgICB3aWR0aDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgIGhlaWdodDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICB9KSxcbiAgdGV4dFNoYWRvd1JhZGl1czogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICB0ZXh0U2hhZG93Q29sb3I6IERlcHJlY2F0ZWRDb2xvclByb3BUeXBlLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgbGV0dGVyU3BhY2luZzogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICBsaW5lSGVpZ2h0OiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGV4dCBhbGlnbm1lbnQuIFRoZSB2YWx1ZSAnanVzdGlmeScgaXMgb25seSBzdXBwb3J0ZWQgb24gaU9TIGFuZFxuICAgKiBmYWxsYmFja3MgdG8gYGxlZnRgIG9uIEFuZHJvaWQuXG4gICAqL1xuICB0ZXh0QWxpZ246IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnYXV0bycgLypkZWZhdWx0Ki8sXG4gICAgJ2xlZnQnLFxuICAgICdyaWdodCcsXG4gICAgJ2NlbnRlcicsXG4gICAgJ2p1c3RpZnknLFxuICBdKSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqL1xuICB0ZXh0QWxpZ25WZXJ0aWNhbDogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdhdXRvJyAvKmRlZmF1bHQqLyxcbiAgICAndG9wJyxcbiAgICAnYm90dG9tJyxcbiAgICAnY2VudGVyJyxcbiAgXSksXG4gIC8qKlxuICAgKiBTZXQgdG8gYGZhbHNlYCB0byByZW1vdmUgZXh0cmEgZm9udCBwYWRkaW5nIGludGVuZGVkIHRvIG1ha2Ugc3BhY2UgZm9yIGNlcnRhaW4gYXNjZW5kZXJzIC8gZGVzY2VuZGVycy5cbiAgICogV2l0aCBzb21lIGZvbnRzLCB0aGlzIHBhZGRpbmcgY2FuIG1ha2UgdGV4dCBsb29rIHNsaWdodGx5IG1pc2FsaWduZWQgd2hlbiBjZW50ZXJlZCB2ZXJ0aWNhbGx5LlxuICAgKiBGb3IgYmVzdCByZXN1bHRzIGFsc28gc2V0IGB0ZXh0QWxpZ25WZXJ0aWNhbGAgdG8gYGNlbnRlcmAuIERlZmF1bHQgaXMgdHJ1ZS5cbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIGluY2x1ZGVGb250UGFkZGluZzogUmVhY3RQcm9wVHlwZXMuYm9vbCxcbiAgdGV4dERlY29yYXRpb25MaW5lOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ25vbmUnIC8qZGVmYXVsdCovLFxuICAgICd1bmRlcmxpbmUnLFxuICAgICdsaW5lLXRocm91Z2gnLFxuICAgICd1bmRlcmxpbmUgbGluZS10aHJvdWdoJyxcbiAgXSksXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICB0ZXh0RGVjb3JhdGlvblN0eWxlOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ3NvbGlkJyAvKmRlZmF1bHQqLyxcbiAgICAnZG91YmxlJyxcbiAgICAnZG90dGVkJyxcbiAgICAnZGFzaGVkJyxcbiAgXSksXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICB0ZXh0RGVjb3JhdGlvbkNvbG9yOiBEZXByZWNhdGVkQ29sb3JQcm9wVHlwZSxcbiAgdGV4dFRyYW5zZm9ybTogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdub25lJyAvKmRlZmF1bHQqLyxcbiAgICAnY2FwaXRhbGl6ZScsXG4gICAgJ3VwcGVyY2FzZScsXG4gICAgJ2xvd2VyY2FzZScsXG4gIF0pLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgd3JpdGluZ0RpcmVjdGlvbjogUmVhY3RQcm9wVHlwZXMub25lT2YoWydhdXRvJyAvKmRlZmF1bHQqLywgJ2x0cicsICdydGwnXSksXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRleHRTdHlsZVByb3BUeXBlcztcbiJdfQ==