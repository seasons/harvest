{"version":3,"sources":["TextPath.tsx"],"names":["TextPath","Shape","displayName","setNativeProps","matrix","props","children","xlinkHref","href","startOffset","method","spacing","side","alignmentBaseline","midLine","prop","matched","idPattern","match","x","y","console","RNSVGTextPath"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { requireNativeComponent } from 'react-native';\nimport extractTransform from '../lib/extract/extractTransform';\nimport extractProps, { propsAndStyles } from '../lib/extract/extractProps';\nimport { NumberProp, TransformProps } from '../lib/extract/types';\nimport extractText from '../lib/extract/extractText';\nimport { idPattern, pickNotNil } from '../lib/util';\nimport Shape from './Shape';\nimport TSpan from './TSpan';\n\nexport default class TextPath extends Shape<{\n  children?: NumberProp | [NumberProp | React.ComponentType];\n  alignmentBaseline?: string;\n  startOffset?: NumberProp;\n  xlinkHref?: string;\n  midLine?: string;\n  spacing?: string;\n  method?: string;\n  href?: string;\n  side?: string;\n}> {\n  static displayName = 'TextPath';\n\n  setNativeProps = (\n    props: Object & {\n      matrix?: number[];\n      style?: [] | {};\n    } & TransformProps,\n  ) => {\n    const matrix = !props.matrix && extractTransform(props);\n    if (matrix) {\n      props.matrix = matrix;\n    }\n    Object.assign(props, pickNotNil(extractText(props, true)));\n    this.root && this.root.setNativeProps(props);\n  };\n\n  render() {\n    const {\n      children,\n      xlinkHref,\n      href = xlinkHref,\n      startOffset = 0,\n      method,\n      spacing,\n      side,\n      alignmentBaseline,\n      midLine,\n      ...prop\n    } = this.props;\n    const matched = href && href.match(idPattern);\n    const match = matched && matched[1];\n    if (match) {\n      const props = extractProps(\n        {\n          ...propsAndStyles(prop),\n          x: null,\n          y: null,\n        },\n        this,\n      );\n      Object.assign(\n        props,\n        extractText(\n          {\n            children,\n          },\n          true,\n        ),\n        {\n          href: match,\n          startOffset,\n          method,\n          spacing,\n          side,\n          alignmentBaseline,\n          midLine,\n        },\n      );\n      props.ref = this.refMethod as (instance: Component | null) => void;\n      return <RNSVGTextPath {...props} />;\n    }\n\n    console.warn(\n      'Invalid `href` prop for `TextPath` element, expected a href like \"#id\", but got: \"' +\n        href +\n        '\"',\n    );\n    return (\n      <TSpan ref={this.refMethod as (instance: Component | null) => void}>\n        {children}\n      </TSpan>\n    );\n  }\n}\n\nexport const RNSVGTextPath = requireNativeComponent('RNSVGTextPath');\n"]}