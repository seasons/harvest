58143639af1e0f78194cfd8e44d8b469
'use strict';

var ReactPropTypes = require('prop-types');

var deprecatedPropType = require('deprecatedPropType');

var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The transformMatrix style property is deprecated. ' + 'Use `transform: [{ matrix: ... }]` instead.');
  }
};

var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The decomposedMatrix style property is deprecated. ' + 'Use `transform: [...]` instead.');
  }
};

var DeprecatedTransformPropTypes = {
  transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({
    perspective: ReactPropTypes.number
  }), ReactPropTypes.shape({
    rotate: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateX: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateY: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateZ: ReactPropTypes.string
  }), ReactPropTypes.shape({
    scale: ReactPropTypes.number
  }), ReactPropTypes.shape({
    scaleX: ReactPropTypes.number
  }), ReactPropTypes.shape({
    scaleY: ReactPropTypes.number
  }), ReactPropTypes.shape({
    translateX: ReactPropTypes.number
  }), ReactPropTypes.shape({
    translateY: ReactPropTypes.number
  }), ReactPropTypes.shape({
    skewX: ReactPropTypes.string
  }), ReactPropTypes.shape({
    skewY: ReactPropTypes.string
  })])),
  transformMatrix: TransformMatrixPropType,
  decomposedMatrix: DecomposedMatrixPropType,
  scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
};
module.exports = DeprecatedTransformPropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRlcHJlY2F0ZWRUcmFuc2Zvcm1Qcm9wVHlwZXMuanMiXSwibmFtZXMiOlsiUmVhY3RQcm9wVHlwZXMiLCJyZXF1aXJlIiwiZGVwcmVjYXRlZFByb3BUeXBlIiwiVHJhbnNmb3JtTWF0cml4UHJvcFR5cGUiLCJwcm9wcyIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsIkVycm9yIiwiRGVjb21wb3NlZE1hdHJpeFByb3BUeXBlIiwiRGVwcmVjYXRlZFRyYW5zZm9ybVByb3BUeXBlcyIsInRyYW5zZm9ybSIsImFycmF5T2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsInBlcnNwZWN0aXZlIiwibnVtYmVyIiwicm90YXRlIiwic3RyaW5nIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwic2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInNrZXdYIiwic2tld1kiLCJ0cmFuc2Zvcm1NYXRyaXgiLCJkZWNvbXBvc2VkTWF0cml4Iiwicm90YXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7QUFFQSxJQUFNQSxjQUFjLEdBQUdDLE9BQU8sQ0FBQyxZQUFELENBQTlCOztBQUVBLElBQU1DLGtCQUFrQixHQUFHRCxPQUFPLENBQUMsb0JBQUQsQ0FBbEM7O0FBRUEsSUFBTUUsdUJBQXVCLEdBQUcsU0FBMUJBLHVCQUEwQixDQUM5QkMsS0FEOEIsRUFFOUJDLFFBRjhCLEVBRzlCQyxhQUg4QixFQUl0QjtBQUNSLE1BQUlGLEtBQUssQ0FBQ0MsUUFBRCxDQUFULEVBQXFCO0FBQ25CLFdBQU8sSUFBSUUsS0FBSixDQUNMLHVEQUNFLDZDQUZHLENBQVA7QUFJRDtBQUNGLENBWEQ7O0FBYUEsSUFBTUMsd0JBQXdCLEdBQUcsU0FBM0JBLHdCQUEyQixDQUMvQkosS0FEK0IsRUFFL0JDLFFBRitCLEVBRy9CQyxhQUgrQixFQUl2QjtBQUNSLE1BQUlGLEtBQUssQ0FBQ0MsUUFBRCxDQUFULEVBQXFCO0FBQ25CLFdBQU8sSUFBSUUsS0FBSixDQUNMLHdEQUNFLGlDQUZHLENBQVA7QUFJRDtBQUNGLENBWEQ7O0FBYUEsSUFBTUUsNEJBQTRCLEdBQUc7QUFDbkNDLEVBQUFBLFNBQVMsRUFBRVYsY0FBYyxDQUFDVyxPQUFmLENBQ1RYLGNBQWMsQ0FBQ1ksU0FBZixDQUF5QixDQUN2QlosY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNDLElBQUFBLFdBQVcsRUFBRWQsY0FBYyxDQUFDZTtBQUE3QixHQUFyQixDQUR1QixFQUV2QmYsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNHLElBQUFBLE1BQU0sRUFBRWhCLGNBQWMsQ0FBQ2lCO0FBQXhCLEdBQXJCLENBRnVCLEVBR3ZCakIsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNLLElBQUFBLE9BQU8sRUFBRWxCLGNBQWMsQ0FBQ2lCO0FBQXpCLEdBQXJCLENBSHVCLEVBSXZCakIsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNNLElBQUFBLE9BQU8sRUFBRW5CLGNBQWMsQ0FBQ2lCO0FBQXpCLEdBQXJCLENBSnVCLEVBS3ZCakIsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNPLElBQUFBLE9BQU8sRUFBRXBCLGNBQWMsQ0FBQ2lCO0FBQXpCLEdBQXJCLENBTHVCLEVBTXZCakIsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNRLElBQUFBLEtBQUssRUFBRXJCLGNBQWMsQ0FBQ2U7QUFBdkIsR0FBckIsQ0FOdUIsRUFPdkJmLGNBQWMsQ0FBQ2EsS0FBZixDQUFxQjtBQUFDUyxJQUFBQSxNQUFNLEVBQUV0QixjQUFjLENBQUNlO0FBQXhCLEdBQXJCLENBUHVCLEVBUXZCZixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ1UsSUFBQUEsTUFBTSxFQUFFdkIsY0FBYyxDQUFDZTtBQUF4QixHQUFyQixDQVJ1QixFQVN2QmYsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNXLElBQUFBLFVBQVUsRUFBRXhCLGNBQWMsQ0FBQ2U7QUFBNUIsR0FBckIsQ0FUdUIsRUFVdkJmLGNBQWMsQ0FBQ2EsS0FBZixDQUFxQjtBQUFDWSxJQUFBQSxVQUFVLEVBQUV6QixjQUFjLENBQUNlO0FBQTVCLEdBQXJCLENBVnVCLEVBV3ZCZixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ2EsSUFBQUEsS0FBSyxFQUFFMUIsY0FBYyxDQUFDaUI7QUFBdkIsR0FBckIsQ0FYdUIsRUFZdkJqQixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ2MsSUFBQUEsS0FBSyxFQUFFM0IsY0FBYyxDQUFDaUI7QUFBdkIsR0FBckIsQ0FadUIsQ0FBekIsQ0FEUyxDQUR3QjtBQWlCbkNXLEVBQUFBLGVBQWUsRUFBRXpCLHVCQWpCa0I7QUFrQm5DMEIsRUFBQUEsZ0JBQWdCLEVBQUVyQix3QkFsQmlCO0FBbUJuQ2MsRUFBQUEsTUFBTSxFQUFFcEIsa0JBQWtCLENBQ3hCRixjQUFjLENBQUNlLE1BRFMsRUFFeEIsaUNBRndCLENBbkJTO0FBdUJuQ1EsRUFBQUEsTUFBTSxFQUFFckIsa0JBQWtCLENBQ3hCRixjQUFjLENBQUNlLE1BRFMsRUFFeEIsaUNBRndCLENBdkJTO0FBMkJuQ2UsRUFBQUEsUUFBUSxFQUFFNUIsa0JBQWtCLENBQzFCRixjQUFjLENBQUNlLE1BRFcsRUFFMUIsaUNBRjBCLENBM0JPO0FBK0JuQ1MsRUFBQUEsVUFBVSxFQUFFdEIsa0JBQWtCLENBQzVCRixjQUFjLENBQUNlLE1BRGEsRUFFNUIsaUNBRjRCLENBL0JLO0FBbUNuQ1UsRUFBQUEsVUFBVSxFQUFFdkIsa0JBQWtCLENBQzVCRixjQUFjLENBQUNlLE1BRGEsRUFFNUIsaUNBRjRCO0FBbkNLLENBQXJDO0FBeUNBZ0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdkIsNEJBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUmVhY3RQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbmNvbnN0IGRlcHJlY2F0ZWRQcm9wVHlwZSA9IHJlcXVpcmUoJ2RlcHJlY2F0ZWRQcm9wVHlwZScpO1xuXG5jb25zdCBUcmFuc2Zvcm1NYXRyaXhQcm9wVHlwZSA9IGZ1bmN0aW9uKFxuICBwcm9wczogT2JqZWN0LFxuICBwcm9wTmFtZTogc3RyaW5nLFxuICBjb21wb25lbnROYW1lOiBzdHJpbmcsXG4pOiA/RXJyb3Ige1xuICBpZiAocHJvcHNbcHJvcE5hbWVdKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICdUaGUgdHJhbnNmb3JtTWF0cml4IHN0eWxlIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQuICcgK1xuICAgICAgICAnVXNlIGB0cmFuc2Zvcm06IFt7IG1hdHJpeDogLi4uIH1dYCBpbnN0ZWFkLicsXG4gICAgKTtcbiAgfVxufTtcblxuY29uc3QgRGVjb21wb3NlZE1hdHJpeFByb3BUeXBlID0gZnVuY3Rpb24oXG4gIHByb3BzOiBPYmplY3QsXG4gIHByb3BOYW1lOiBzdHJpbmcsXG4gIGNvbXBvbmVudE5hbWU6IHN0cmluZyxcbik6ID9FcnJvciB7XG4gIGlmIChwcm9wc1twcm9wTmFtZV0pIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgJ1RoZSBkZWNvbXBvc2VkTWF0cml4IHN0eWxlIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQuICcgK1xuICAgICAgICAnVXNlIGB0cmFuc2Zvcm06IFsuLi5dYCBpbnN0ZWFkLicsXG4gICAgKTtcbiAgfVxufTtcblxuY29uc3QgRGVwcmVjYXRlZFRyYW5zZm9ybVByb3BUeXBlcyA9IHtcbiAgdHJhbnNmb3JtOiBSZWFjdFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFJlYWN0UHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7cGVyc3BlY3RpdmU6IFJlYWN0UHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3JvdGF0ZTogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7cm90YXRlWDogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7cm90YXRlWTogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7cm90YXRlWjogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7c2NhbGU6IFJlYWN0UHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3NjYWxlWDogUmVhY3RQcm9wVHlwZXMubnVtYmVyfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7c2NhbGVZOiBSZWFjdFByb3BUeXBlcy5udW1iZXJ9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHt0cmFuc2xhdGVYOiBSZWFjdFByb3BUeXBlcy5udW1iZXJ9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHt0cmFuc2xhdGVZOiBSZWFjdFByb3BUeXBlcy5udW1iZXJ9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtza2V3WDogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7c2tld1k6IFJlYWN0UHJvcFR5cGVzLnN0cmluZ30pLFxuICAgIF0pLFxuICApLFxuICB0cmFuc2Zvcm1NYXRyaXg6IFRyYW5zZm9ybU1hdHJpeFByb3BUeXBlLFxuICBkZWNvbXBvc2VkTWF0cml4OiBEZWNvbXBvc2VkTWF0cml4UHJvcFR5cGUsXG4gIHNjYWxlWDogZGVwcmVjYXRlZFByb3BUeXBlKFxuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICAnVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLicsXG4gICksXG4gIHNjYWxlWTogZGVwcmVjYXRlZFByb3BUeXBlKFxuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICAnVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLicsXG4gICksXG4gIHJvdGF0aW9uOiBkZXByZWNhdGVkUHJvcFR5cGUoXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgICdVc2UgdGhlIHRyYW5zZm9ybSBwcm9wIGluc3RlYWQuJyxcbiAgKSxcbiAgdHJhbnNsYXRlWDogZGVwcmVjYXRlZFByb3BUeXBlKFxuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICAnVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLicsXG4gICksXG4gIHRyYW5zbGF0ZVk6IGRlcHJlY2F0ZWRQcm9wVHlwZShcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nLFxuICApLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZXByZWNhdGVkVHJhbnNmb3JtUHJvcFR5cGVzO1xuIl19