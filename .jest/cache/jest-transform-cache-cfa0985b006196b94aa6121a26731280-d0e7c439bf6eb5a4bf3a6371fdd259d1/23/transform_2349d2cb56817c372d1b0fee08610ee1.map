{"version":3,"sources":["transform.js"],"names":["ctor","parent","child","Error","peg$subclass","peg$SyntaxError","DESCRIBE_EXPECTATION_FNS","literal","literalEscape","expectation","escapedParts","i","classEscape","any","end","other","ch","s","hex","descriptions","expected","describeExpectation","j","found","describeExpected","describeFound","options","peg$FAILED","peg$startRuleFunctions","transformList","peg$startRuleFunction","peg$c0","peg$c1","multiply_matrices","peg$c2","peg$c3","peg$literalExpectation","peg$c4","peg$c5","peg$c6","peg$c7","peg$c8","peg$c9","peg$c10","peg$c11","ty","peg$c12","peg$c13","peg$c14","sy","peg$c15","peg$c16","peg$c17","cos","Math","deg2rad","sin","c","x","y","peg$c18","peg$c19","peg$c20","peg$c21","peg$c22","peg$c23","peg$c24","parseFloat","f","peg$c25","parseInt","peg$c26","peg$c27","peg$c28","peg$c29","peg$c30","ds","peg$c31","peg$c32","d","peg$c33","peg$otherExpectation","peg$c34","peg$c35","peg$c36","d1","d2","peg$c37","peg$c38","peg$classExpectation","peg$c39","e","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","input","peg$computeLocation","location","peg$buildStructuredError","peg$buildSimpleError","type","text","ignoreCase","parts","inverted","description","details","p","pos","startPosDetails","peg$computePosDetails","endPosDetails","start","offset","s0","s1","s2","peg$parsewsp","peg$parsetransforms","s3","s4","peg$parsetransform","peg$parsecommaWsp","peg$parsematrix","peg$parsetranslate","peg$parsescale","peg$parserotate","peg$parseskewX","peg$parseskewY","peg$fail","s5","peg$parsenumber","s6","s7","s8","s9","s10","s11","s12","s13","s14","s15","s16","s17","peg$parsecommaWspNumber","peg$parsecommaWspTwoNumbers","peg$parsesign","peg$parsefloatingPointConstant","peg$parseintegerConstant","peg$parsecomma","peg$parsedigitSequence","peg$parsefractionalConstant","peg$parseexponent","peg$parsedigit","al","l","cl","el","bl","dl","fl","ar","r","cr","er","br","dr","fr","a","b","peg$result","peg$endExpectation","module","SyntaxError","parse"],"mappings":"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","sourcesContent":["/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { transformList: peg$parsetransformList },\n      peg$startRuleFunction  = peg$parsetransformList,\n\n      peg$c0 = function(ts) { return ts; },\n      peg$c1 = function(t, ts) {\n              return multiply_matrices(t, ts);\n          },\n      peg$c2 = \"matrix\",\n      peg$c3 = peg$literalExpectation(\"matrix\", false),\n      peg$c4 = \"(\",\n      peg$c5 = peg$literalExpectation(\"(\", false),\n      peg$c6 = \")\",\n      peg$c7 = peg$literalExpectation(\")\", false),\n      peg$c8 = function(a, b, c, d, e, f) {\n              return [\n                  a, c, e,\n                  b, d, f\n              ];\n          },\n      peg$c9 = \"translate\",\n      peg$c10 = peg$literalExpectation(\"translate\", false),\n      peg$c11 = function(tx, ty) {\n              return [\n                  1, 0, tx,\n                  0, 1, ty || 0\n              ];\n          },\n      peg$c12 = \"scale\",\n      peg$c13 = peg$literalExpectation(\"scale\", false),\n      peg$c14 = function(sx, sy) {\n              return [\n                  sx, 0,                     0,\n                  0,  sy === null ? sx : sy, 0\n              ];\n          },\n      peg$c15 = \"rotate\",\n      peg$c16 = peg$literalExpectation(\"rotate\", false),\n      peg$c17 = function(angle, c) {\n              var cos = Math.cos(deg2rad * angle);\n              var sin = Math.sin(deg2rad * angle);\n              if (c !== null) {\n                  var x = c[0];\n                  var y = c[1];\n                  return [\n                      cos, -sin, cos * -x + -sin * -y + x,\n                      sin,  cos, sin * -x +  cos * -y + y\n                  ];\n              }\n              return [\n                  cos, -sin, 0,\n                  sin,  cos, 0\n              ];\n          },\n      peg$c18 = \"skewX\",\n      peg$c19 = peg$literalExpectation(\"skewX\", false),\n      peg$c20 = function(angle) {\n              return [\n                  1, Math.tan(deg2rad * angle), 0,\n                  0, 1,                         0\n              ];\n          },\n      peg$c21 = \"skewY\",\n      peg$c22 = peg$literalExpectation(\"skewY\", false),\n      peg$c23 = function(angle) {\n              return [\n                  1,                         0, 0,\n                  Math.tan(deg2rad * angle), 1, 0\n              ];\n          },\n      peg$c24 = function(f) { return parseFloat(f.join(\"\")); },\n      peg$c25 = function(i) { return parseInt(i.join(\"\")); },\n      peg$c26 = function(n) { return n; },\n      peg$c27 = function(n1, n2) { return [n1, n2]; },\n      peg$c28 = \",\",\n      peg$c29 = peg$literalExpectation(\",\", false),\n      peg$c30 = function(ds) { return ds.join(\"\"); },\n      peg$c31 = function(f) { return f.join(\"\"); },\n      peg$c32 = function(d) { return d.join(\"\"); },\n      peg$c33 = peg$otherExpectation(\"fractionalConstant\"),\n      peg$c34 = \".\",\n      peg$c35 = peg$literalExpectation(\".\", false),\n      peg$c36 = function(d1, d2) { return [d1 ? d1.join(\"\") : null, \".\", d2.join(\"\")].join(\"\"); },\n      peg$c37 = /^[eE]/,\n      peg$c38 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c39 = function(e) { return [e[0], e[1], e[2].join(\"\")].join(\"\"); },\n      peg$c40 = /^[+\\-]/,\n      peg$c41 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c42 = /^[0-9]/,\n      peg$c43 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c44 = /^[ \\t\\r\\n]/,\n      peg$c45 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\"], false, false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsetransformList() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewsp();\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parsewsp();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsetransforms();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsewsp();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsewsp();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c0(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetransforms() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetransform();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecommaWsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecommaWsp();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetransforms();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsetransform();\n    }\n\n    return s0;\n  }\n\n  function peg$parsetransform() {\n    var s0;\n\n    s0 = peg$parsematrix();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsetranslate();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsescale();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parserotate();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseskewX();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseskewY();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsematrix() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6) === peg$c2) {\n      s1 = peg$c2;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c3); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWsp();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsenumber();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsecommaWsp();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsenumber();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsecommaWsp();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsenumber();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsecommaWsp();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsenumber();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsecommaWsp();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsenumber();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = [];\n                                  s17 = peg$parsewsp();\n                                  while (s17 !== peg$FAILED) {\n                                    s16.push(s17);\n                                    s17 = peg$parsewsp();\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    if (input.charCodeAt(peg$currPos) === 41) {\n                                      s17 = peg$c6;\n                                      peg$currPos++;\n                                    } else {\n                                      s17 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c8(s5, s7, s9, s11, s13, s15);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetranslate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c9) {\n      s1 = peg$c9;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWspNumber();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parsewsp();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parsewsp();\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s8 = peg$c6;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c11(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescale() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c12) {\n      s1 = peg$c12;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c13); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWspNumber();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parsewsp();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parsewsp();\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s8 = peg$c6;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c14(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserotate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6) === peg$c15) {\n      s1 = peg$c15;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c16); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWspTwoNumbers();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parsewsp();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parsewsp();\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s8 = peg$c6;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c17(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseskewX() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c18) {\n      s1 = peg$c18;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c19); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parsewsp();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parsewsp();\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s7 = peg$c6;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c20(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseskewY() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c21) {\n      s1 = peg$c21;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c22); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parsewsp();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parsewsp();\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s7 = peg$c6;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c23(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsesign();\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsefloatingPointConstant();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c24(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsesign();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseintegerConstant();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWspNumber() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecommaWsp();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumber();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c26(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWspTwoNumbers() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecommaWsp();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumber();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecommaWsp();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsenumber();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c27(s2, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWsp() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewsp();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsewsp();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecomma();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsewsp();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsewsp();\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecomma();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsewsp();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsewsp();\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomma() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c28;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c29); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseintegerConstant() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedigitSequence();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c30(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefloatingPointConstant() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsefractionalConstant();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseexponent();\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c31(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsedigitSequence();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexponent();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c32(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefractionalConstant() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsedigitSequence();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s2 = peg$c34;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c35); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedigitSequence();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c36(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedigitSequence();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s2 = peg$c34;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c35); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c32(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c33); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexponent() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (peg$c37.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c38); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsesign();\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsedigitSequence();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c39(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsesign() {\n    var s0;\n\n    if (peg$c40.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c41); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigitSequence() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsedigit();\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsedigit();\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c42.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c43); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewsp() {\n    var s0;\n\n    if (peg$c44.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c45); }\n    }\n\n    return s0;\n  }\n\n\n      var deg2rad = Math.PI / 180;\n\n      /*\n       ╔═        ═╗   ╔═        ═╗   ╔═     ═╗\n       ║ al cl el ║   ║ ar cr er ║   ║ a c e ║\n       ║ bl dl fl ║ * ║ br dr fr ║ = ║ b d f ║\n       ║ 0  0  1  ║   ║ 0  0  1  ║   ║ 0 0 1 ║\n       ╚═        ═╝   ╚═        ═╝   ╚═     ═╝\n      */\n      function multiply_matrices(l, r) {\n          var al = l[0];\n          var cl = l[1];\n          var el = l[2];\n          var bl = l[3];\n          var dl = l[4];\n          var fl = l[5];\n\n          var ar = r[0];\n          var cr = r[1];\n          var er = r[2];\n          var br = r[3];\n          var dr = r[4];\n          var fr = r[5];\n\n          var a = al * ar + cl * br;\n          var c = al * cr + cl * dr;\n          var e = al * er + cl * fr + el;\n          var b = bl * ar + dl * br;\n          var d = bl * cr + dl * dr;\n          var f = bl * er + dl * fr + fl;\n\n          return [a, c, e, b, d, f];\n      }\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n"]}