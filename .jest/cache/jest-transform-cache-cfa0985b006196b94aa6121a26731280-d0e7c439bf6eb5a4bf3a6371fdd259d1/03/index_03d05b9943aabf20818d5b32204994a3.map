{"version":3,"sources":["index.js"],"names":["Client","options","baseUrl","telemetry","token","Error","name","defaults","version","env","parsed","url","parse","protocol","domain","hostname","bearer","path","body","request","query","includeTelemetry","endpoint","resolve","length","auth0Client","_encodedTelemetry","format","method","headers","Accept","JSON","stringify","fetch","then","response","payload","status","ok","json","catch","text","statusText","base64","encode"],"mappings":"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","sourcesContent":["import defaults from './telemetry';\nimport url from 'url';\nimport base64 from 'base-64';\n\nexport default class Client {\n  constructor(options) {\n    const { baseUrl, telemetry = {}, token } = options;\n    if (!baseUrl) {\n      throw new Error('Missing Auth0 domain');\n    }\n    const { name = defaults.name, version = defaults.version } = telemetry;\n    this.telemetry = { name, version };\n    if (name !== defaults.name) {\n      this.telemetry.env = {};\n      this.telemetry.env[defaults.name] = defaults.version;\n    }\n    const parsed = url.parse(baseUrl);\n    this.baseUrl =\n      parsed.protocol === 'https:' || parsed.protocol === 'http:'\n        ? baseUrl\n        : `https://${baseUrl}`;\n    this.domain = parsed.hostname || baseUrl;\n    if (token) {\n      this.bearer = `Bearer ${token}`;\n    }\n  }\n\n  post(path, body) {\n    return this.request('POST', this.url(path), body);\n  }\n\n  patch(path, body) {\n    return this.request('PATCH', this.url(path), body);\n  }\n\n  get(path, query) {\n    return this.request('GET', this.url(path, query));\n  }\n\n  url(path, query, includeTelemetry = false) {\n    let endpoint = url.resolve(this.baseUrl, path);\n    if ((query && query.length !== 0) || includeTelemetry) {\n      const parsed = url.parse(endpoint);\n      parsed.query = query || {};\n      if (includeTelemetry) {\n        parsed.query.auth0Client = this._encodedTelemetry();\n      }\n      endpoint = url.format(parsed);\n    }\n    return endpoint;\n  }\n\n  request(method, url, body) {\n    const options = {\n      method: method,\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        'Auth0-Client': this._encodedTelemetry()\n      }\n    };\n    if (this.bearer) {\n      options.headers['Authorization'] = this.bearer;\n    }\n    if (body) {\n      options.body = JSON.stringify(body);\n    }\n    return fetch(url, options).then(response => {\n      const payload = {\n        status: response.status,\n        ok: response.ok,\n        headers: response.headers\n      };\n      return response\n        .json()\n        .then(json => {\n          return { ...payload, json };\n        })\n        .catch(() => {\n          return response\n            .text()\n            .then(text => {\n              return { ...payload, text };\n            })\n            .catch(() => {\n              return { ...payload, text: response.statusText };\n            });\n        });\n    });\n  }\n\n  _encodedTelemetry() {\n    return base64.encode(JSON.stringify(this.telemetry));\n  }\n}\n"]}